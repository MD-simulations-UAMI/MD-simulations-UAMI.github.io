{"version":3,"file":"component---src-templates-page-builder-js-82de843629ed56bf3da0.js","mappings":"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","sources":["webpack://gatsby-starter-henlo/./node_modules/extend/index.js","webpack://gatsby-starter-henlo/./node_modules/inline-style-parser/index.js","webpack://gatsby-starter-henlo/./node_modules/is-buffer/index.js","webpack://gatsby-starter-henlo/./node_modules/react-markdown/node_modules/react-is/cjs/react-is.production.min.js","webpack://gatsby-starter-henlo/./node_modules/react-markdown/node_modules/react-is/index.js","webpack://gatsby-starter-henlo/./node_modules/style-to-object/index.js","webpack://gatsby-starter-henlo/./src/components/UI/Button.js","webpack://gatsby-starter-henlo/./src/components/UI/Buttons.js","webpack://gatsby-starter-henlo/./node_modules/react-markdown/node_modules/unist-util-stringify-position/lib/index.js","webpack://gatsby-starter-henlo/./node_modules/react-markdown/node_modules/vfile-message/lib/index.js","webpack://gatsby-starter-henlo/./node_modules/react-markdown/node_modules/vfile/lib/minpath.browser.js","webpack://gatsby-starter-henlo/./node_modules/react-markdown/node_modules/vfile/lib/minproc.browser.js","webpack://gatsby-starter-henlo/./node_modules/react-markdown/node_modules/vfile/lib/minurl.shared.js","webpack://gatsby-starter-henlo/./node_modules/react-markdown/node_modules/vfile/lib/minurl.browser.js","webpack://gatsby-starter-henlo/./node_modules/react-markdown/node_modules/vfile/lib/index.js","webpack://gatsby-starter-henlo/./node_modules/react-markdown/node_modules/bail/index.js","webpack://gatsby-starter-henlo/./node_modules/react-markdown/node_modules/is-plain-obj/index.js","webpack://gatsby-starter-henlo/./node_modules/react-markdown/node_modules/trough/index.js","webpack://gatsby-starter-henlo/./node_modules/react-markdown/node_modules/unified/lib/index.js","webpack://gatsby-starter-henlo/./node_modules/react-markdown/node_modules/mdast-util-to-string/lib/index.js","webpack://gatsby-starter-henlo/./node_modules/micromark-util-chunked/index.js","webpack://gatsby-starter-henlo/./node_modules/micromark-util-combine-extensions/index.js","webpack://gatsby-starter-henlo/./node_modules/micromark-util-character/lib/unicode-punctuation-regex.js","webpack://gatsby-starter-henlo/./node_modules/micromark-util-character/index.js","webpack://gatsby-starter-henlo/./node_modules/micromark-factory-space/index.js","webpack://gatsby-starter-henlo/./node_modules/react-markdown/node_modules/micromark/lib/initialize/content.js","webpack://gatsby-starter-henlo/./node_modules/react-markdown/node_modules/micromark/lib/initialize/document.js","webpack://gatsby-starter-henlo/./node_modules/micromark-core-commonmark/lib/blank-line.js","webpack://gatsby-starter-henlo/./node_modules/micromark-util-subtokenize/index.js","webpack://gatsby-starter-henlo/./node_modules/micromark-core-commonmark/lib/content.js","webpack://gatsby-starter-henlo/./node_modules/react-markdown/node_modules/micromark/lib/initialize/flow.js","webpack://gatsby-starter-henlo/./node_modules/react-markdown/node_modules/micromark/lib/initialize/text.js","webpack://gatsby-starter-henlo/./node_modules/micromark-util-resolve-all/index.js","webpack://gatsby-starter-henlo/./node_modules/react-markdown/node_modules/micromark/lib/create-tokenizer.js","webpack://gatsby-starter-henlo/./node_modules/micromark-core-commonmark/lib/thematic-break.js","webpack://gatsby-starter-henlo/./node_modules/micromark-core-commonmark/lib/list.js","webpack://gatsby-starter-henlo/./node_modules/micromark-core-commonmark/lib/block-quote.js","webpack://gatsby-starter-henlo/./node_modules/micromark-factory-destination/index.js","webpack://gatsby-starter-henlo/./node_modules/micromark-factory-label/index.js","webpack://gatsby-starter-henlo/./node_modules/micromark-factory-title/index.js","webpack://gatsby-starter-henlo/./node_modules/micromark-factory-whitespace/index.js","webpack://gatsby-starter-henlo/./node_modules/micromark-util-normalize-identifier/index.js","webpack://gatsby-starter-henlo/./node_modules/micromark-core-commonmark/lib/definition.js","webpack://gatsby-starter-henlo/./node_modules/micromark-core-commonmark/lib/code-indented.js","webpack://gatsby-starter-henlo/./node_modules/micromark-core-commonmark/lib/heading-atx.js","webpack://gatsby-starter-henlo/./node_modules/micromark-core-commonmark/lib/setext-underline.js","webpack://gatsby-starter-henlo/./node_modules/micromark-util-html-tag-name/index.js","webpack://gatsby-starter-henlo/./node_modules/micromark-core-commonmark/lib/html-flow.js","webpack://gatsby-starter-henlo/./node_modules/micromark-core-commonmark/lib/code-fenced.js","webpack://gatsby-starter-henlo/./node_modules/decode-named-character-reference/index.dom.js","webpack://gatsby-starter-henlo/./node_modules/micromark-core-commonmark/lib/character-reference.js","webpack://gatsby-starter-henlo/./node_modules/micromark-core-commonmark/lib/character-escape.js","webpack://gatsby-starter-henlo/./node_modules/micromark-core-commonmark/lib/line-ending.js","webpack://gatsby-starter-henlo/./node_modules/micromark-core-commonmark/lib/label-end.js","webpack://gatsby-starter-henlo/./node_modules/micromark-core-commonmark/lib/label-start-image.js","webpack://gatsby-starter-henlo/./node_modules/micromark-util-classify-character/index.js","webpack://gatsby-starter-henlo/./node_modules/micromark-core-commonmark/lib/attention.js","webpack://gatsby-starter-henlo/./node_modules/micromark-core-commonmark/lib/autolink.js","webpack://gatsby-starter-henlo/./node_modules/micromark-core-commonmark/lib/html-text.js","webpack://gatsby-starter-henlo/./node_modules/micromark-core-commonmark/lib/label-start-link.js","webpack://gatsby-starter-henlo/./node_modules/micromark-core-commonmark/lib/hard-break-escape.js","webpack://gatsby-starter-henlo/./node_modules/micromark-core-commonmark/lib/code-text.js","webpack://gatsby-starter-henlo/./node_modules/react-markdown/node_modules/micromark/lib/constructs.js","webpack://gatsby-starter-henlo/./node_modules/react-markdown/node_modules/micromark/lib/parse.js","webpack://gatsby-starter-henlo/./node_modules/react-markdown/node_modules/micromark/lib/preprocess.js","webpack://gatsby-starter-henlo/./node_modules/micromark-util-decode-numeric-character-reference/index.js","webpack://gatsby-starter-henlo/./node_modules/micromark-util-decode-string/index.js","webpack://gatsby-starter-henlo/./node_modules/react-markdown/node_modules/mdast-util-from-markdown/lib/index.js","webpack://gatsby-starter-henlo/./node_modules/react-markdown/node_modules/micromark/lib/postprocess.js","webpack://gatsby-starter-henlo/./node_modules/react-markdown/node_modules/remark-parse/lib/index.js","webpack://gatsby-starter-henlo/./node_modules/micromark-util-sanitize-uri/index.js","webpack://gatsby-starter-henlo/./node_modules/react-markdown/node_modules/unist-util-is/lib/index.js","webpack://gatsby-starter-henlo/./node_modules/react-markdown/node_modules/unist-util-visit-parents/lib/index.js","webpack://gatsby-starter-henlo/./node_modules/react-markdown/node_modules/unist-util-visit/lib/index.js","webpack://gatsby-starter-henlo/./node_modules/react-markdown/node_modules/unist-util-position/lib/index.js","webpack://gatsby-starter-henlo/./node_modules/react-markdown/node_modules/mdast-util-definitions/lib/index.js","webpack://gatsby-starter-henlo/./node_modules/react-markdown/node_modules/mdast-util-to-hast/lib/handlers/footnote-reference.js","webpack://gatsby-starter-henlo/./node_modules/react-markdown/node_modules/mdast-util-to-hast/lib/revert.js","webpack://gatsby-starter-henlo/./node_modules/react-markdown/node_modules/mdast-util-to-hast/lib/handlers/list-item.js","webpack://gatsby-starter-henlo/./node_modules/trim-lines/index.js","webpack://gatsby-starter-henlo/./node_modules/react-markdown/node_modules/mdast-util-to-hast/lib/handlers/index.js","webpack://gatsby-starter-henlo/./node_modules/react-markdown/node_modules/mdast-util-to-hast/lib/handlers/blockquote.js","webpack://gatsby-starter-henlo/./node_modules/react-markdown/node_modules/mdast-util-to-hast/lib/handlers/break.js","webpack://gatsby-starter-henlo/./node_modules/react-markdown/node_modules/mdast-util-to-hast/lib/handlers/code.js","webpack://gatsby-starter-henlo/./node_modules/react-markdown/node_modules/mdast-util-to-hast/lib/handlers/delete.js","webpack://gatsby-starter-henlo/./node_modules/react-markdown/node_modules/mdast-util-to-hast/lib/handlers/emphasis.js","webpack://gatsby-starter-henlo/./node_modules/react-markdown/node_modules/mdast-util-to-hast/lib/handlers/footnote.js","webpack://gatsby-starter-henlo/./node_modules/react-markdown/node_modules/mdast-util-to-hast/lib/handlers/heading.js","webpack://gatsby-starter-henlo/./node_modules/react-markdown/node_modules/mdast-util-to-hast/lib/handlers/html.js","webpack://gatsby-starter-henlo/./node_modules/react-markdown/node_modules/mdast-util-to-hast/lib/handlers/image-reference.js","webpack://gatsby-starter-henlo/./node_modules/react-markdown/node_modules/mdast-util-to-hast/lib/handlers/image.js","webpack://gatsby-starter-henlo/./node_modules/react-markdown/node_modules/mdast-util-to-hast/lib/handlers/inline-code.js","webpack://gatsby-starter-henlo/./node_modules/react-markdown/node_modules/mdast-util-to-hast/lib/handlers/link-reference.js","webpack://gatsby-starter-henlo/./node_modules/react-markdown/node_modules/mdast-util-to-hast/lib/handlers/link.js","webpack://gatsby-starter-henlo/./node_modules/react-markdown/node_modules/mdast-util-to-hast/lib/handlers/list.js","webpack://gatsby-starter-henlo/./node_modules/react-markdown/node_modules/mdast-util-to-hast/lib/handlers/paragraph.js","webpack://gatsby-starter-henlo/./node_modules/react-markdown/node_modules/mdast-util-to-hast/lib/handlers/root.js","webpack://gatsby-starter-henlo/./node_modules/react-markdown/node_modules/mdast-util-to-hast/lib/handlers/strong.js","webpack://gatsby-starter-henlo/./node_modules/react-markdown/node_modules/mdast-util-to-hast/lib/handlers/table.js","webpack://gatsby-starter-henlo/./node_modules/react-markdown/node_modules/mdast-util-to-hast/lib/handlers/table-cell.js","webpack://gatsby-starter-henlo/./node_modules/react-markdown/node_modules/mdast-util-to-hast/lib/handlers/table-row.js","webpack://gatsby-starter-henlo/./node_modules/react-markdown/node_modules/mdast-util-to-hast/lib/handlers/text.js","webpack://gatsby-starter-henlo/./node_modules/react-markdown/node_modules/mdast-util-to-hast/lib/handlers/thematic-break.js","webpack://gatsby-starter-henlo/./node_modules/react-markdown/node_modules/mdast-util-to-hast/lib/state.js","webpack://gatsby-starter-henlo/./node_modules/react-markdown/node_modules/unist-util-generated/lib/index.js","webpack://gatsby-starter-henlo/./node_modules/react-markdown/node_modules/mdast-util-to-hast/lib/index.js","webpack://gatsby-starter-henlo/./node_modules/react-markdown/node_modules/mdast-util-to-hast/lib/footer.js","webpack://gatsby-starter-henlo/./node_modules/react-markdown/node_modules/remark-rehype/lib/index.js","webpack://gatsby-starter-henlo/./node_modules/react-markdown/node_modules/property-information/lib/util/schema.js","webpack://gatsby-starter-henlo/./node_modules/react-markdown/node_modules/property-information/lib/util/merge.js","webpack://gatsby-starter-henlo/./node_modules/react-markdown/node_modules/property-information/lib/normalize.js","webpack://gatsby-starter-henlo/./node_modules/react-markdown/node_modules/property-information/lib/util/info.js","webpack://gatsby-starter-henlo/./node_modules/react-markdown/node_modules/property-information/lib/util/types.js","webpack://gatsby-starter-henlo/./node_modules/react-markdown/node_modules/property-information/lib/util/defined-info.js","webpack://gatsby-starter-henlo/./node_modules/react-markdown/node_modules/property-information/lib/util/create.js","webpack://gatsby-starter-henlo/./node_modules/react-markdown/node_modules/property-information/lib/xlink.js","webpack://gatsby-starter-henlo/./node_modules/react-markdown/node_modules/property-information/lib/xml.js","webpack://gatsby-starter-henlo/./node_modules/react-markdown/node_modules/property-information/lib/util/case-sensitive-transform.js","webpack://gatsby-starter-henlo/./node_modules/react-markdown/node_modules/property-information/lib/util/case-insensitive-transform.js","webpack://gatsby-starter-henlo/./node_modules/react-markdown/node_modules/property-information/lib/xmlns.js","webpack://gatsby-starter-henlo/./node_modules/react-markdown/node_modules/property-information/lib/aria.js","webpack://gatsby-starter-henlo/./node_modules/react-markdown/node_modules/property-information/lib/html.js","webpack://gatsby-starter-henlo/./node_modules/react-markdown/node_modules/property-information/lib/svg.js","webpack://gatsby-starter-henlo/./node_modules/react-markdown/node_modules/property-information/index.js","webpack://gatsby-starter-henlo/./node_modules/react-markdown/lib/rehype-filter.js","webpack://gatsby-starter-henlo/./node_modules/react-markdown/node_modules/hast-util-whitespace/index.js","webpack://gatsby-starter-henlo/./node_modules/react-markdown/node_modules/property-information/lib/find.js","webpack://gatsby-starter-henlo/./node_modules/react-markdown/node_modules/property-information/lib/hast-to-react.js","webpack://gatsby-starter-henlo/./node_modules/style-to-object/index.mjs","webpack://gatsby-starter-henlo/./node_modules/react-markdown/lib/uri-transformer.js","webpack://gatsby-starter-henlo/./node_modules/react-markdown/lib/ast-to-react.js","webpack://gatsby-starter-henlo/./node_modules/react-markdown/node_modules/comma-separated-tokens/index.js","webpack://gatsby-starter-henlo/./node_modules/react-markdown/node_modules/space-separated-tokens/index.js","webpack://gatsby-starter-henlo/./node_modules/react-markdown/lib/react-markdown.js","webpack://gatsby-starter-henlo/./src/components/UI/Text.js","webpack://gatsby-starter-henlo/./src/blocks/Hero.js","webpack://gatsby-starter-henlo/./src/components/Article/ArticleCard.js","webpack://gatsby-starter-henlo/./src/hooks/useRecentArticles.js","webpack://gatsby-starter-henlo/./src/components/Article/Recent.js","webpack://gatsby-starter-henlo/./src/blocks/RecentArticles.js","webpack://gatsby-starter-henlo/./src/resolvers/Image.js","webpack://gatsby-starter-henlo/./src/components/UI/Title.js","webpack://gatsby-starter-henlo/./src/blocks/ContentImage.js","webpack://gatsby-starter-henlo/./src/blocks/Perks.js","webpack://gatsby-starter-henlo/./src/blocks/Content.js","webpack://gatsby-starter-henlo/./src/components/PageBuilder.js","webpack://gatsby-starter-henlo/./src/templates/page-builder.js"],"sourcesContent":["'use strict';\n\nvar hasOwn = Object.prototype.hasOwnProperty;\nvar toStr = Object.prototype.toString;\nvar defineProperty = Object.defineProperty;\nvar gOPD = Object.getOwnPropertyDescriptor;\nvar isArray = function isArray(arr) {\n  if (typeof Array.isArray === 'function') {\n    return Array.isArray(arr);\n  }\n  return toStr.call(arr) === '[object Array]';\n};\nvar isPlainObject = function isPlainObject(obj) {\n  if (!obj || toStr.call(obj) !== '[object Object]') {\n    return false;\n  }\n  var hasOwnConstructor = hasOwn.call(obj, 'constructor');\n  var hasIsPrototypeOf = obj.constructor && obj.constructor.prototype && hasOwn.call(obj.constructor.prototype, 'isPrototypeOf');\n  // Not own constructor property must be Object\n  if (obj.constructor && !hasOwnConstructor && !hasIsPrototypeOf) {\n    return false;\n  }\n\n  // Own properties are enumerated firstly, so to speed up,\n  // if last one is own, then all properties are own.\n  var key;\n  for (key in obj) {/**/}\n  return typeof key === 'undefined' || hasOwn.call(obj, key);\n};\n\n// If name is '__proto__', and Object.defineProperty is available, define __proto__ as an own property on target\nvar setProperty = function setProperty(target, options) {\n  if (defineProperty && options.name === '__proto__') {\n    defineProperty(target, options.name, {\n      enumerable: true,\n      configurable: true,\n      value: options.newValue,\n      writable: true\n    });\n  } else {\n    target[options.name] = options.newValue;\n  }\n};\n\n// Return undefined instead of __proto__ if '__proto__' is not an own property\nvar getProperty = function getProperty(obj, name) {\n  if (name === '__proto__') {\n    if (!hasOwn.call(obj, name)) {\n      return void 0;\n    } else if (gOPD) {\n      // In early versions of node, obj['__proto__'] is buggy when obj has\n      // __proto__ as an own property. Object.getOwnPropertyDescriptor() works.\n      return gOPD(obj, name).value;\n    }\n  }\n  return obj[name];\n};\nmodule.exports = function extend() {\n  var options, name, src, copy, copyIsArray, clone;\n  var target = arguments[0];\n  var i = 1;\n  var length = arguments.length;\n  var deep = false;\n\n  // Handle a deep copy situation\n  if (typeof target === 'boolean') {\n    deep = target;\n    target = arguments[1] || {};\n    // skip the boolean and the target\n    i = 2;\n  }\n  if (target == null || typeof target !== 'object' && typeof target !== 'function') {\n    target = {};\n  }\n  for (; i < length; ++i) {\n    options = arguments[i];\n    // Only deal with non-null/undefined values\n    if (options != null) {\n      // Extend the base object\n      for (name in options) {\n        src = getProperty(target, name);\n        copy = getProperty(options, name);\n\n        // Prevent never-ending loop\n        if (target !== copy) {\n          // Recurse if we're merging plain objects or arrays\n          if (deep && copy && (isPlainObject(copy) || (copyIsArray = isArray(copy)))) {\n            if (copyIsArray) {\n              copyIsArray = false;\n              clone = src && isArray(src) ? src : [];\n            } else {\n              clone = src && isPlainObject(src) ? src : {};\n            }\n\n            // Never move original objects, clone them\n            setProperty(target, {\n              name: name,\n              newValue: extend(deep, clone, copy)\n            });\n\n            // Don't bring in undefined values\n          } else if (typeof copy !== 'undefined') {\n            setProperty(target, {\n              name: name,\n              newValue: copy\n            });\n          }\n        }\n      }\n    }\n  }\n\n  // Return the modified object\n  return target;\n};","// http://www.w3.org/TR/CSS21/grammar.html\n// https://github.com/visionmedia/css-parse/pull/49#issuecomment-30088027\nvar COMMENT_REGEX = /\\/\\*[^*]*\\*+([^/*][^*]*\\*+)*\\//g;\nvar NEWLINE_REGEX = /\\n/g;\nvar WHITESPACE_REGEX = /^\\s*/;\n\n// declaration\nvar PROPERTY_REGEX = /^(\\*?[-#/*\\\\\\w]+(\\[[0-9a-z_-]+\\])?)\\s*/;\nvar COLON_REGEX = /^:\\s*/;\nvar VALUE_REGEX = /^((?:'(?:\\\\'|.)*?'|\"(?:\\\\\"|.)*?\"|\\([^)]*?\\)|[^};])+)/;\nvar SEMICOLON_REGEX = /^[;\\s]*/;\n\n// https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String/Trim#Polyfill\nvar TRIM_REGEX = /^\\s+|\\s+$/g;\n\n// strings\nvar NEWLINE = '\\n';\nvar FORWARD_SLASH = '/';\nvar ASTERISK = '*';\nvar EMPTY_STRING = '';\n\n// types\nvar TYPE_COMMENT = 'comment';\nvar TYPE_DECLARATION = 'declaration';\n\n/**\n * @param {String} style\n * @param {Object} [options]\n * @return {Object[]}\n * @throws {TypeError}\n * @throws {Error}\n */\nmodule.exports = function (style, options) {\n  if (typeof style !== 'string') {\n    throw new TypeError('First argument must be a string');\n  }\n  if (!style) return [];\n  options = options || {};\n\n  /**\n   * Positional.\n   */\n  var lineno = 1;\n  var column = 1;\n\n  /**\n   * Update lineno and column based on `str`.\n   *\n   * @param {String} str\n   */\n  function updatePosition(str) {\n    var lines = str.match(NEWLINE_REGEX);\n    if (lines) lineno += lines.length;\n    var i = str.lastIndexOf(NEWLINE);\n    column = ~i ? str.length - i : column + str.length;\n  }\n\n  /**\n   * Mark position and patch `node.position`.\n   *\n   * @return {Function}\n   */\n  function position() {\n    var start = {\n      line: lineno,\n      column: column\n    };\n    return function (node) {\n      node.position = new Position(start);\n      whitespace();\n      return node;\n    };\n  }\n\n  /**\n   * Store position information for a node.\n   *\n   * @constructor\n   * @property {Object} start\n   * @property {Object} end\n   * @property {undefined|String} source\n   */\n  function Position(start) {\n    this.start = start;\n    this.end = {\n      line: lineno,\n      column: column\n    };\n    this.source = options.source;\n  }\n\n  /**\n   * Non-enumerable source string.\n   */\n  Position.prototype.content = style;\n  var errorsList = [];\n\n  /**\n   * Error `msg`.\n   *\n   * @param {String} msg\n   * @throws {Error}\n   */\n  function error(msg) {\n    var err = new Error(options.source + ':' + lineno + ':' + column + ': ' + msg);\n    err.reason = msg;\n    err.filename = options.source;\n    err.line = lineno;\n    err.column = column;\n    err.source = style;\n    if (options.silent) {\n      errorsList.push(err);\n    } else {\n      throw err;\n    }\n  }\n\n  /**\n   * Match `re` and return captures.\n   *\n   * @param {RegExp} re\n   * @return {undefined|Array}\n   */\n  function match(re) {\n    var m = re.exec(style);\n    if (!m) return;\n    var str = m[0];\n    updatePosition(str);\n    style = style.slice(str.length);\n    return m;\n  }\n\n  /**\n   * Parse whitespace.\n   */\n  function whitespace() {\n    match(WHITESPACE_REGEX);\n  }\n\n  /**\n   * Parse comments.\n   *\n   * @param {Object[]} [rules]\n   * @return {Object[]}\n   */\n  function comments(rules) {\n    var c;\n    rules = rules || [];\n    while (c = comment()) {\n      if (c !== false) {\n        rules.push(c);\n      }\n    }\n    return rules;\n  }\n\n  /**\n   * Parse comment.\n   *\n   * @return {Object}\n   * @throws {Error}\n   */\n  function comment() {\n    var pos = position();\n    if (FORWARD_SLASH != style.charAt(0) || ASTERISK != style.charAt(1)) return;\n    var i = 2;\n    while (EMPTY_STRING != style.charAt(i) && (ASTERISK != style.charAt(i) || FORWARD_SLASH != style.charAt(i + 1))) {\n      ++i;\n    }\n    i += 2;\n    if (EMPTY_STRING === style.charAt(i - 1)) {\n      return error('End of comment missing');\n    }\n    var str = style.slice(2, i - 2);\n    column += 2;\n    updatePosition(str);\n    style = style.slice(i);\n    column += 2;\n    return pos({\n      type: TYPE_COMMENT,\n      comment: str\n    });\n  }\n\n  /**\n   * Parse declaration.\n   *\n   * @return {Object}\n   * @throws {Error}\n   */\n  function declaration() {\n    var pos = position();\n\n    // prop\n    var prop = match(PROPERTY_REGEX);\n    if (!prop) return;\n    comment();\n\n    // :\n    if (!match(COLON_REGEX)) return error(\"property missing ':'\");\n\n    // val\n    var val = match(VALUE_REGEX);\n    var ret = pos({\n      type: TYPE_DECLARATION,\n      property: trim(prop[0].replace(COMMENT_REGEX, EMPTY_STRING)),\n      value: val ? trim(val[0].replace(COMMENT_REGEX, EMPTY_STRING)) : EMPTY_STRING\n    });\n\n    // ;\n    match(SEMICOLON_REGEX);\n    return ret;\n  }\n\n  /**\n   * Parse declarations.\n   *\n   * @return {Object[]}\n   */\n  function declarations() {\n    var decls = [];\n    comments(decls);\n\n    // declarations\n    var decl;\n    while (decl = declaration()) {\n      if (decl !== false) {\n        decls.push(decl);\n        comments(decls);\n      }\n    }\n    return decls;\n  }\n  whitespace();\n  return declarations();\n};\n\n/**\n * Trim `str`.\n *\n * @param {String} str\n * @return {String}\n */\nfunction trim(str) {\n  return str ? str.replace(TRIM_REGEX, EMPTY_STRING) : EMPTY_STRING;\n}","/*!\n * Determine if an object is a Buffer\n *\n * @author   Feross Aboukhadijeh <https://feross.org>\n * @license  MIT\n */\n\nmodule.exports = function isBuffer(obj) {\n  return obj != null && obj.constructor != null && typeof obj.constructor.isBuffer === 'function' && obj.constructor.isBuffer(obj);\n};","/**\n * @license React\n * react-is.production.min.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n'use strict';\n\nvar b = Symbol.for(\"react.element\"),\n  c = Symbol.for(\"react.portal\"),\n  d = Symbol.for(\"react.fragment\"),\n  e = Symbol.for(\"react.strict_mode\"),\n  f = Symbol.for(\"react.profiler\"),\n  g = Symbol.for(\"react.provider\"),\n  h = Symbol.for(\"react.context\"),\n  k = Symbol.for(\"react.server_context\"),\n  l = Symbol.for(\"react.forward_ref\"),\n  m = Symbol.for(\"react.suspense\"),\n  n = Symbol.for(\"react.suspense_list\"),\n  p = Symbol.for(\"react.memo\"),\n  q = Symbol.for(\"react.lazy\"),\n  t = Symbol.for(\"react.offscreen\"),\n  u;\nu = Symbol.for(\"react.module.reference\");\nfunction v(a) {\n  if (\"object\" === typeof a && null !== a) {\n    var r = a.$$typeof;\n    switch (r) {\n      case b:\n        switch (a = a.type, a) {\n          case d:\n          case f:\n          case e:\n          case m:\n          case n:\n            return a;\n          default:\n            switch (a = a && a.$$typeof, a) {\n              case k:\n              case h:\n              case l:\n              case q:\n              case p:\n              case g:\n                return a;\n              default:\n                return r;\n            }\n        }\n      case c:\n        return r;\n    }\n  }\n}\nexports.ContextConsumer = h;\nexports.ContextProvider = g;\nexports.Element = b;\nexports.ForwardRef = l;\nexports.Fragment = d;\nexports.Lazy = q;\nexports.Memo = p;\nexports.Portal = c;\nexports.Profiler = f;\nexports.StrictMode = e;\nexports.Suspense = m;\nexports.SuspenseList = n;\nexports.isAsyncMode = function () {\n  return !1;\n};\nexports.isConcurrentMode = function () {\n  return !1;\n};\nexports.isContextConsumer = function (a) {\n  return v(a) === h;\n};\nexports.isContextProvider = function (a) {\n  return v(a) === g;\n};\nexports.isElement = function (a) {\n  return \"object\" === typeof a && null !== a && a.$$typeof === b;\n};\nexports.isForwardRef = function (a) {\n  return v(a) === l;\n};\nexports.isFragment = function (a) {\n  return v(a) === d;\n};\nexports.isLazy = function (a) {\n  return v(a) === q;\n};\nexports.isMemo = function (a) {\n  return v(a) === p;\n};\nexports.isPortal = function (a) {\n  return v(a) === c;\n};\nexports.isProfiler = function (a) {\n  return v(a) === f;\n};\nexports.isStrictMode = function (a) {\n  return v(a) === e;\n};\nexports.isSuspense = function (a) {\n  return v(a) === m;\n};\nexports.isSuspenseList = function (a) {\n  return v(a) === n;\n};\nexports.isValidElementType = function (a) {\n  return \"string\" === typeof a || \"function\" === typeof a || a === d || a === f || a === e || a === m || a === n || a === t || \"object\" === typeof a && null !== a && (a.$$typeof === q || a.$$typeof === p || a.$$typeof === g || a.$$typeof === h || a.$$typeof === l || a.$$typeof === u || void 0 !== a.getModuleId) ? !0 : !1;\n};\nexports.typeOf = v;","'use strict';\n\nif (process.env.NODE_ENV === 'production') {\n  module.exports = require('./cjs/react-is.production.min.js');\n} else {\n  module.exports = require('./cjs/react-is.development.js');\n}","var parse = require('inline-style-parser');\n\n/**\n * Parses inline style to object.\n *\n * @example\n * // returns { 'line-height': '42' }\n * StyleToObject('line-height: 42;');\n *\n * @param  {String}      style      - The inline style.\n * @param  {Function}    [iterator] - The iterator function.\n * @return {null|Object}\n */\nfunction StyleToObject(style, iterator) {\n  var output = null;\n  if (!style || typeof style !== 'string') {\n    return output;\n  }\n  var declaration;\n  var declarations = parse(style);\n  var hasIterator = typeof iterator === 'function';\n  var property;\n  var value;\n  for (var i = 0, len = declarations.length; i < len; i++) {\n    declaration = declarations[i];\n    property = declaration.property;\n    value = declaration.value;\n    if (hasIterator) {\n      iterator(property, value, declaration);\n    } else if (value) {\n      output || (output = {});\n      output[property] = value;\n    }\n  }\n  return output;\n}\nmodule.exports = StyleToObject;\nmodule.exports.default = StyleToObject; // ESM support","import React from 'react'\nimport Link from '../../resolvers/Link'\nimport clsx from 'clsx'\n\nexport default function Button({ className, button, children, ...props }) {\n  let buttonStyle = 'group inline-block font-bold text-dark-500 dark:text-white'\n  switch (button?.variant) {\n    case 'button':\n      buttonStyle = `${buttonStyle} border-dark-500 border dark:border-white bg-dark-500 dark:bg-white text-white dark:text-black py-2 px-6 text-center dark:hover:bg-transparent hover:bg-transparent hover:text-dark-500 dark:hover:text-white transition-colors`\n      break\n    case 'outlined':\n      buttonStyle = `${buttonStyle} border-dark-500 border dark:border-white py-2 px-6 text-center dark:hover:bg-white hover:bg-dark-500 hover:text-white dark:hover:text-black transition-colors`\n      break\n    default:\n      buttonStyle = `${buttonStyle} link dark:link-dark`\n  }\n\n  return (\n    <>\n      {button?.url ? (\n        <Link\n          to={button?.url}\n          className={clsx(buttonStyle, className)}\n          {...props}\n        >\n          {children}\n        </Link>\n      ) : (\n        <button className={clsx(buttonStyle, className)} {...props}>\n          {children}\n        </button>\n      )}\n    </>\n  )\n}\n","import clsx from 'clsx'\nimport React from 'react'\nimport Button from './Button'\n\nexport default function Buttons({ buttons, className }) {\n  return (\n    <div className={clsx('flex flex-wrap items-center gap-2', className)}>\n      {buttons.length > 0 &&\n        buttons.map((item, i) => (\n          <Button key={i} button={item?.button}>\n            {item?.button?.content}\n          </Button>\n        ))}\n    </div>\n  )\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Point} Point\n * @typedef {import('unist').Position} Position\n */\n\n/**\n * @typedef NodeLike\n * @property {string} type\n * @property {PositionLike | null | undefined} [position]\n *\n * @typedef PositionLike\n * @property {PointLike | null | undefined} [start]\n * @property {PointLike | null | undefined} [end]\n *\n * @typedef PointLike\n * @property {number | null | undefined} [line]\n * @property {number | null | undefined} [column]\n * @property {number | null | undefined} [offset]\n */\n\n/**\n * Serialize the positional info of a point, position (start and end points),\n * or node.\n *\n * @param {Node | NodeLike | Position | PositionLike | Point | PointLike | null | undefined} [value]\n *   Node, position, or point.\n * @returns {string}\n *   Pretty printed positional info of a node (`string`).\n *\n *   In the format of a range `ls:cs-le:ce` (when given `node` or `position`)\n *   or a point `l:c` (when given `point`), where `l` stands for line, `c` for\n *   column, `s` for `start`, and `e` for end.\n *   An empty string (`''`) is returned if the given value is neither `node`,\n *   `position`, nor `point`.\n */\nexport function stringifyPosition(value) {\n  // Nothing.\n  if (!value || typeof value !== 'object') {\n    return '';\n  }\n\n  // Node.\n  if ('position' in value || 'type' in value) {\n    return position(value.position);\n  }\n\n  // Position.\n  if ('start' in value || 'end' in value) {\n    return position(value);\n  }\n\n  // Point.\n  if ('line' in value || 'column' in value) {\n    return point(value);\n  }\n\n  // ?\n  return '';\n}\n\n/**\n * @param {Point | PointLike | null | undefined} point\n * @returns {string}\n */\nfunction point(point) {\n  return index(point && point.line) + ':' + index(point && point.column);\n}\n\n/**\n * @param {Position | PositionLike | null | undefined} pos\n * @returns {string}\n */\nfunction position(pos) {\n  return point(pos && pos.start) + '-' + point(pos && pos.end);\n}\n\n/**\n * @param {number | null | undefined} value\n * @returns {number}\n */\nfunction index(value) {\n  return value && typeof value === 'number' ? value : 1;\n}","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Position} Position\n * @typedef {import('unist').Point} Point\n * @typedef {object & {type: string, position?: Position | undefined}} NodeLike\n */\n\nimport { stringifyPosition } from 'unist-util-stringify-position';\n\n/**\n * Message.\n */\nexport class VFileMessage extends Error {\n  /**\n   * Create a message for `reason` at `place` from `origin`.\n   *\n   * When an error is passed in as `reason`, the `stack` is copied.\n   *\n   * @param {string | Error | VFileMessage} reason\n   *   Reason for message, uses the stack and message of the error if given.\n   *\n   *   > 👉 **Note**: you should use markdown.\n   * @param {Node | NodeLike | Position | Point | null | undefined} [place]\n   *   Place in file where the message occurred.\n   * @param {string | null | undefined} [origin]\n   *   Place in code where the message originates (example:\n   *   `'my-package:my-rule'` or `'my-rule'`).\n   * @returns\n   *   Instance of `VFileMessage`.\n   */\n  // To do: next major: expose `undefined` everywhere instead of `null`.\n  constructor(reason, place, origin) {\n    /** @type {[string | null, string | null]} */\n    const parts = [null, null];\n    /** @type {Position} */\n    let position = {\n      // @ts-expect-error: we always follows the structure of `position`.\n      start: {\n        line: null,\n        column: null\n      },\n      // @ts-expect-error: \"\n      end: {\n        line: null,\n        column: null\n      }\n    };\n    super();\n    if (typeof place === 'string') {\n      origin = place;\n      place = undefined;\n    }\n    if (typeof origin === 'string') {\n      const index = origin.indexOf(':');\n      if (index === -1) {\n        parts[1] = origin;\n      } else {\n        parts[0] = origin.slice(0, index);\n        parts[1] = origin.slice(index + 1);\n      }\n    }\n    if (place) {\n      // Node.\n      if ('type' in place || 'position' in place) {\n        if (place.position) {\n          // To do: next major: deep clone.\n          // @ts-expect-error: looks like a position.\n          position = place.position;\n        }\n      }\n      // Position.\n      else if ('start' in place || 'end' in place) {\n        // @ts-expect-error: looks like a position.\n        // To do: next major: deep clone.\n        position = place;\n      }\n      // Point.\n      else if ('line' in place || 'column' in place) {\n        // To do: next major: deep clone.\n        position.start = place;\n      }\n    }\n\n    // Fields from `Error`.\n    /**\n     * Serialized positional info of error.\n     *\n     * On normal errors, this would be something like `ParseError`, buit in\n     * `VFile` messages we use this space to show where an error happened.\n     */\n    this.name = stringifyPosition(place) || '1:1';\n\n    /**\n     * Reason for message.\n     *\n     * @type {string}\n     */\n    this.message = typeof reason === 'object' ? reason.message : reason;\n\n    /**\n     * Stack of message.\n     *\n     * This is used by normal errors to show where something happened in\n     * programming code, irrelevant for `VFile` messages,\n     *\n     * @type {string}\n     */\n    this.stack = '';\n    if (typeof reason === 'object' && reason.stack) {\n      this.stack = reason.stack;\n    }\n\n    /**\n     * Reason for message.\n     *\n     * > 👉 **Note**: you should use markdown.\n     *\n     * @type {string}\n     */\n    this.reason = this.message;\n\n    /* eslint-disable no-unused-expressions */\n    /**\n     * State of problem.\n     *\n     * * `true` — marks associated file as no longer processable (error)\n     * * `false` — necessitates a (potential) change (warning)\n     * * `null | undefined` — for things that might not need changing (info)\n     *\n     * @type {boolean | null | undefined}\n     */\n    this.fatal;\n\n    /**\n     * Starting line of error.\n     *\n     * @type {number | null}\n     */\n    this.line = position.start.line;\n\n    /**\n     * Starting column of error.\n     *\n     * @type {number | null}\n     */\n    this.column = position.start.column;\n\n    /**\n     * Full unist position.\n     *\n     * @type {Position | null}\n     */\n    this.position = position;\n\n    /**\n     * Namespace of message (example: `'my-package'`).\n     *\n     * @type {string | null}\n     */\n    this.source = parts[0];\n\n    /**\n     * Category of message (example: `'my-rule'`).\n     *\n     * @type {string | null}\n     */\n    this.ruleId = parts[1];\n\n    /**\n     * Path of a file (used throughout the `VFile` ecosystem).\n     *\n     * @type {string | null}\n     */\n    this.file;\n\n    // The following fields are “well known”.\n    // Not standard.\n    // Feel free to add other non-standard fields to your messages.\n\n    /**\n     * Specify the source value that’s being reported, which is deemed\n     * incorrect.\n     *\n     * @type {string | null}\n     */\n    this.actual;\n\n    /**\n     * Suggest acceptable values that can be used instead of `actual`.\n     *\n     * @type {Array<string> | null}\n     */\n    this.expected;\n\n    /**\n     * Link to docs for the message.\n     *\n     * > 👉 **Note**: this must be an absolute URL that can be passed as `x`\n     * > to `new URL(x)`.\n     *\n     * @type {string | null}\n     */\n    this.url;\n\n    /**\n     * Long form description of the message (you should use markdown).\n     *\n     * @type {string | null}\n     */\n    this.note;\n    /* eslint-enable no-unused-expressions */\n  }\n}\nVFileMessage.prototype.file = '';\nVFileMessage.prototype.name = '';\nVFileMessage.prototype.reason = '';\nVFileMessage.prototype.message = '';\nVFileMessage.prototype.stack = '';\nVFileMessage.prototype.fatal = null;\nVFileMessage.prototype.column = null;\nVFileMessage.prototype.line = null;\nVFileMessage.prototype.source = null;\nVFileMessage.prototype.ruleId = null;\nVFileMessage.prototype.position = null;","// A derivative work based on:\n// <https://github.com/browserify/path-browserify>.\n// Which is licensed:\n//\n// MIT License\n//\n// Copyright (c) 2013 James Halliday\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy of\n// this software and associated documentation files (the \"Software\"), to deal in\n// the Software without restriction, including without limitation the rights to\n// use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\n// the Software, and to permit persons to whom the Software is furnished to do so,\n// subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in all\n// copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\n// FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\n// COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\n// IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\n// CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n// A derivative work based on:\n//\n// Parts of that are extracted from Node’s internal `path` module:\n// <https://github.com/nodejs/node/blob/master/lib/path.js>.\n// Which is licensed:\n//\n// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nexport const path = {\n  basename,\n  dirname,\n  extname,\n  join,\n  sep: '/'\n};\n\n/* eslint-disable max-depth, complexity */\n\n/**\n * Get the basename from a path.\n *\n * @param {string} path\n *   File path.\n * @param {string | undefined} [ext]\n *   Extension to strip.\n * @returns {string}\n *   Stem or basename.\n */\nfunction basename(path, ext) {\n  if (ext !== undefined && typeof ext !== 'string') {\n    throw new TypeError('\"ext\" argument must be a string');\n  }\n  assertPath(path);\n  let start = 0;\n  let end = -1;\n  let index = path.length;\n  /** @type {boolean | undefined} */\n  let seenNonSlash;\n  if (ext === undefined || ext.length === 0 || ext.length > path.length) {\n    while (index--) {\n      if (path.charCodeAt(index) === 47 /* `/` */) {\n        // If we reached a path separator that was not part of a set of path\n        // separators at the end of the string, stop now.\n        if (seenNonSlash) {\n          start = index + 1;\n          break;\n        }\n      } else if (end < 0) {\n        // We saw the first non-path separator, mark this as the end of our\n        // path component.\n        seenNonSlash = true;\n        end = index + 1;\n      }\n    }\n    return end < 0 ? '' : path.slice(start, end);\n  }\n  if (ext === path) {\n    return '';\n  }\n  let firstNonSlashEnd = -1;\n  let extIndex = ext.length - 1;\n  while (index--) {\n    if (path.charCodeAt(index) === 47 /* `/` */) {\n      // If we reached a path separator that was not part of a set of path\n      // separators at the end of the string, stop now.\n      if (seenNonSlash) {\n        start = index + 1;\n        break;\n      }\n    } else {\n      if (firstNonSlashEnd < 0) {\n        // We saw the first non-path separator, remember this index in case\n        // we need it if the extension ends up not matching.\n        seenNonSlash = true;\n        firstNonSlashEnd = index + 1;\n      }\n      if (extIndex > -1) {\n        // Try to match the explicit extension.\n        if (path.charCodeAt(index) === ext.charCodeAt(extIndex--)) {\n          if (extIndex < 0) {\n            // We matched the extension, so mark this as the end of our path\n            // component\n            end = index;\n          }\n        } else {\n          // Extension does not match, so our result is the entire path\n          // component\n          extIndex = -1;\n          end = firstNonSlashEnd;\n        }\n      }\n    }\n  }\n  if (start === end) {\n    end = firstNonSlashEnd;\n  } else if (end < 0) {\n    end = path.length;\n  }\n  return path.slice(start, end);\n}\n\n/**\n * Get the dirname from a path.\n *\n * @param {string} path\n *   File path.\n * @returns {string}\n *   File path.\n */\nfunction dirname(path) {\n  assertPath(path);\n  if (path.length === 0) {\n    return '.';\n  }\n  let end = -1;\n  let index = path.length;\n  /** @type {boolean | undefined} */\n  let unmatchedSlash;\n\n  // Prefix `--` is important to not run on `0`.\n  while (--index) {\n    if (path.charCodeAt(index) === 47 /* `/` */) {\n      if (unmatchedSlash) {\n        end = index;\n        break;\n      }\n    } else if (!unmatchedSlash) {\n      // We saw the first non-path separator\n      unmatchedSlash = true;\n    }\n  }\n  return end < 0 ? path.charCodeAt(0) === 47 /* `/` */ ? '/' : '.' : end === 1 && path.charCodeAt(0) === 47 /* `/` */ ? '//' : path.slice(0, end);\n}\n\n/**\n * Get an extname from a path.\n *\n * @param {string} path\n *   File path.\n * @returns {string}\n *   Extname.\n */\nfunction extname(path) {\n  assertPath(path);\n  let index = path.length;\n  let end = -1;\n  let startPart = 0;\n  let startDot = -1;\n  // Track the state of characters (if any) we see before our first dot and\n  // after any path separator we find.\n  let preDotState = 0;\n  /** @type {boolean | undefined} */\n  let unmatchedSlash;\n  while (index--) {\n    const code = path.charCodeAt(index);\n    if (code === 47 /* `/` */) {\n      // If we reached a path separator that was not part of a set of path\n      // separators at the end of the string, stop now.\n      if (unmatchedSlash) {\n        startPart = index + 1;\n        break;\n      }\n      continue;\n    }\n    if (end < 0) {\n      // We saw the first non-path separator, mark this as the end of our\n      // extension.\n      unmatchedSlash = true;\n      end = index + 1;\n    }\n    if (code === 46 /* `.` */) {\n      // If this is our first dot, mark it as the start of our extension.\n      if (startDot < 0) {\n        startDot = index;\n      } else if (preDotState !== 1) {\n        preDotState = 1;\n      }\n    } else if (startDot > -1) {\n      // We saw a non-dot and non-path separator before our dot, so we should\n      // have a good chance at having a non-empty extension.\n      preDotState = -1;\n    }\n  }\n  if (startDot < 0 || end < 0 ||\n  // We saw a non-dot character immediately before the dot.\n  preDotState === 0 ||\n  // The (right-most) trimmed path component is exactly `..`.\n  preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {\n    return '';\n  }\n  return path.slice(startDot, end);\n}\n\n/**\n * Join segments from a path.\n *\n * @param {Array<string>} segments\n *   Path segments.\n * @returns {string}\n *   File path.\n */\nfunction join() {\n  let index = -1;\n  /** @type {string | undefined} */\n  let joined;\n  for (var _len = arguments.length, segments = new Array(_len), _key = 0; _key < _len; _key++) {\n    segments[_key] = arguments[_key];\n  }\n  while (++index < segments.length) {\n    assertPath(segments[index]);\n    if (segments[index]) {\n      joined = joined === undefined ? segments[index] : joined + '/' + segments[index];\n    }\n  }\n  return joined === undefined ? '.' : normalize(joined);\n}\n\n/**\n * Normalize a basic file path.\n *\n * @param {string} path\n *   File path.\n * @returns {string}\n *   File path.\n */\n// Note: `normalize` is not exposed as `path.normalize`, so some code is\n// manually removed from it.\nfunction normalize(path) {\n  assertPath(path);\n  const absolute = path.charCodeAt(0) === 47; /* `/` */\n\n  // Normalize the path according to POSIX rules.\n  let value = normalizeString(path, !absolute);\n  if (value.length === 0 && !absolute) {\n    value = '.';\n  }\n  if (value.length > 0 && path.charCodeAt(path.length - 1) === 47 /* / */) {\n    value += '/';\n  }\n  return absolute ? '/' + value : value;\n}\n\n/**\n * Resolve `.` and `..` elements in a path with directory names.\n *\n * @param {string} path\n *   File path.\n * @param {boolean} allowAboveRoot\n *   Whether `..` can move above root.\n * @returns {string}\n *   File path.\n */\nfunction normalizeString(path, allowAboveRoot) {\n  let result = '';\n  let lastSegmentLength = 0;\n  let lastSlash = -1;\n  let dots = 0;\n  let index = -1;\n  /** @type {number | undefined} */\n  let code;\n  /** @type {number} */\n  let lastSlashIndex;\n  while (++index <= path.length) {\n    if (index < path.length) {\n      code = path.charCodeAt(index);\n    } else if (code === 47 /* `/` */) {\n      break;\n    } else {\n      code = 47; /* `/` */\n    }\n    if (code === 47 /* `/` */) {\n      if (lastSlash === index - 1 || dots === 1) {\n        // Empty.\n      } else if (lastSlash !== index - 1 && dots === 2) {\n        if (result.length < 2 || lastSegmentLength !== 2 || result.charCodeAt(result.length - 1) !== 46 /* `.` */ || result.charCodeAt(result.length - 2) !== 46 /* `.` */) {\n          if (result.length > 2) {\n            lastSlashIndex = result.lastIndexOf('/');\n            if (lastSlashIndex !== result.length - 1) {\n              if (lastSlashIndex < 0) {\n                result = '';\n                lastSegmentLength = 0;\n              } else {\n                result = result.slice(0, lastSlashIndex);\n                lastSegmentLength = result.length - 1 - result.lastIndexOf('/');\n              }\n              lastSlash = index;\n              dots = 0;\n              continue;\n            }\n          } else if (result.length > 0) {\n            result = '';\n            lastSegmentLength = 0;\n            lastSlash = index;\n            dots = 0;\n            continue;\n          }\n        }\n        if (allowAboveRoot) {\n          result = result.length > 0 ? result + '/..' : '..';\n          lastSegmentLength = 2;\n        }\n      } else {\n        if (result.length > 0) {\n          result += '/' + path.slice(lastSlash + 1, index);\n        } else {\n          result = path.slice(lastSlash + 1, index);\n        }\n        lastSegmentLength = index - lastSlash - 1;\n      }\n      lastSlash = index;\n      dots = 0;\n    } else if (code === 46 /* `.` */ && dots > -1) {\n      dots++;\n    } else {\n      dots = -1;\n    }\n  }\n  return result;\n}\n\n/**\n * Make sure `path` is a string.\n *\n * @param {string} path\n *   File path.\n * @returns {asserts path is string}\n *   Nothing.\n */\nfunction assertPath(path) {\n  if (typeof path !== 'string') {\n    throw new TypeError('Path must be a string. Received ' + JSON.stringify(path));\n  }\n}\n\n/* eslint-enable max-depth, complexity */","// Somewhat based on:\n// <https://github.com/defunctzombie/node-process/blob/master/browser.js>.\n// But I don’t think one tiny line of code can be copyrighted. 😅\nexport const proc = {\n  cwd\n};\nfunction cwd() {\n  return '/';\n}","/**\n * @typedef URL\n * @property {string} hash\n * @property {string} host\n * @property {string} hostname\n * @property {string} href\n * @property {string} origin\n * @property {string} password\n * @property {string} pathname\n * @property {string} port\n * @property {string} protocol\n * @property {string} search\n * @property {any} searchParams\n * @property {string} username\n * @property {() => string} toString\n * @property {() => string} toJSON\n */\n\n/**\n * Check if `fileUrlOrPath` looks like a URL.\n *\n * @param {unknown} fileUrlOrPath\n *   File path or URL.\n * @returns {fileUrlOrPath is URL}\n *   Whether it’s a URL.\n */\n// From: <https://github.com/nodejs/node/blob/fcf8ba4/lib/internal/url.js#L1501>\nexport function isUrl(fileUrlOrPath) {\n  return fileUrlOrPath !== null && typeof fileUrlOrPath === 'object' &&\n  // @ts-expect-error: indexable.\n  fileUrlOrPath.href &&\n  // @ts-expect-error: indexable.\n  fileUrlOrPath.origin;\n}","/// <reference lib=\"dom\" />\n\nimport { isUrl } from './minurl.shared.js';\n\n// See: <https://github.com/nodejs/node/blob/fcf8ba4/lib/internal/url.js>\n\n/**\n * @param {string | URL} path\n *   File URL.\n * @returns {string}\n *   File URL.\n */\nexport function urlToPath(path) {\n  if (typeof path === 'string') {\n    path = new URL(path);\n  } else if (!isUrl(path)) {\n    /** @type {NodeJS.ErrnoException} */\n    const error = new TypeError('The \"path\" argument must be of type string or an instance of URL. Received `' + path + '`');\n    error.code = 'ERR_INVALID_ARG_TYPE';\n    throw error;\n  }\n  if (path.protocol !== 'file:') {\n    /** @type {NodeJS.ErrnoException} */\n    const error = new TypeError('The URL must be of scheme file');\n    error.code = 'ERR_INVALID_URL_SCHEME';\n    throw error;\n  }\n  return getPathFromURLPosix(path);\n}\n\n/**\n * Get a path from a POSIX URL.\n *\n * @param {URL} url\n *   URL.\n * @returns {string}\n *   File path.\n */\nfunction getPathFromURLPosix(url) {\n  if (url.hostname !== '') {\n    /** @type {NodeJS.ErrnoException} */\n    const error = new TypeError('File URL host must be \"localhost\" or empty on darwin');\n    error.code = 'ERR_INVALID_FILE_URL_HOST';\n    throw error;\n  }\n  const pathname = url.pathname;\n  let index = -1;\n  while (++index < pathname.length) {\n    if (pathname.charCodeAt(index) === 37 /* `%` */ && pathname.charCodeAt(index + 1) === 50 /* `2` */) {\n      const third = pathname.charCodeAt(index + 2);\n      if (third === 70 /* `F` */ || third === 102 /* `f` */) {\n        /** @type {NodeJS.ErrnoException} */\n        const error = new TypeError('File URL path must not include encoded / characters');\n        error.code = 'ERR_INVALID_FILE_URL_PATH';\n        throw error;\n      }\n    }\n  }\n  return decodeURIComponent(pathname);\n}\nexport { isUrl } from './minurl.shared.js';","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Position} Position\n * @typedef {import('unist').Point} Point\n * @typedef {import('./minurl.shared.js').URL} URL\n * @typedef {import('../index.js').Data} Data\n * @typedef {import('../index.js').Value} Value\n */\n\n/**\n * @typedef {Record<string, unknown> & {type: string, position?: Position | undefined}} NodeLike\n *\n * @typedef {'ascii' | 'utf8' | 'utf-8' | 'utf16le' | 'ucs2' | 'ucs-2' | 'base64' | 'base64url' | 'latin1' | 'binary' | 'hex'} BufferEncoding\n *   Encodings supported by the buffer class.\n *\n *   This is a copy of the types from Node, copied to prevent Node globals from\n *   being needed.\n *   Copied from: <https://github.com/DefinitelyTyped/DefinitelyTyped/blob/90a4ec8/types/node/buffer.d.ts#L170>\n *\n * @typedef {Options | URL | Value | VFile} Compatible\n *   Things that can be passed to the constructor.\n *\n * @typedef VFileCoreOptions\n *   Set multiple values.\n * @property {Value | null | undefined} [value]\n *   Set `value`.\n * @property {string | null | undefined} [cwd]\n *   Set `cwd`.\n * @property {Array<string> | null | undefined} [history]\n *   Set `history`.\n * @property {URL | string | null | undefined} [path]\n *   Set `path`.\n * @property {string | null | undefined} [basename]\n *   Set `basename`.\n * @property {string | null | undefined} [stem]\n *   Set `stem`.\n * @property {string | null | undefined} [extname]\n *   Set `extname`.\n * @property {string | null | undefined} [dirname]\n *   Set `dirname`.\n * @property {Data | null | undefined} [data]\n *   Set `data`.\n *\n * @typedef Map\n *   Raw source map.\n *\n *   See:\n *   <https://github.com/mozilla/source-map/blob/58819f0/source-map.d.ts#L15-L23>.\n * @property {number} version\n *   Which version of the source map spec this map is following.\n * @property {Array<string>} sources\n *   An array of URLs to the original source files.\n * @property {Array<string>} names\n *   An array of identifiers which can be referenced by individual mappings.\n * @property {string | undefined} [sourceRoot]\n *   The URL root from which all sources are relative.\n * @property {Array<string> | undefined} [sourcesContent]\n *   An array of contents of the original source files.\n * @property {string} mappings\n *   A string of base64 VLQs which contain the actual mappings.\n * @property {string} file\n *   The generated file this source map is associated with.\n *\n * @typedef {{[key: string]: unknown} & VFileCoreOptions} Options\n *   Configuration.\n *\n *   A bunch of keys that will be shallow copied over to the new file.\n *\n * @typedef {Record<string, unknown>} ReporterSettings\n *   Configuration for reporters.\n */\n\n/**\n * @template {ReporterSettings} Settings\n *   Options type.\n * @callback Reporter\n *   Type for a reporter.\n * @param {Array<VFile>} files\n *   Files to report.\n * @param {Settings} options\n *   Configuration.\n * @returns {string}\n *   Report.\n */\n\nimport bufferLike from 'is-buffer';\nimport { VFileMessage } from 'vfile-message';\nimport { path } from './minpath.js';\nimport { proc } from './minproc.js';\nimport { urlToPath, isUrl } from './minurl.js';\n\n/**\n * Order of setting (least specific to most), we need this because otherwise\n * `{stem: 'a', path: '~/b.js'}` would throw, as a path is needed before a\n * stem can be set.\n *\n * @type {Array<'basename' | 'dirname' | 'extname' | 'history' | 'path' | 'stem'>}\n */\nconst order = ['history', 'path', 'basename', 'stem', 'extname', 'dirname'];\nexport class VFile {\n  /**\n   * Create a new virtual file.\n   *\n   * `options` is treated as:\n   *\n   * *   `string` or `Buffer` — `{value: options}`\n   * *   `URL` — `{path: options}`\n   * *   `VFile` — shallow copies its data over to the new file\n   * *   `object` — all fields are shallow copied over to the new file\n   *\n   * Path related fields are set in the following order (least specific to\n   * most specific): `history`, `path`, `basename`, `stem`, `extname`,\n   * `dirname`.\n   *\n   * You cannot set `dirname` or `extname` without setting either `history`,\n   * `path`, `basename`, or `stem` too.\n   *\n   * @param {Compatible | null | undefined} [value]\n   *   File value.\n   * @returns\n   *   New instance.\n   */\n  constructor(value) {\n    /** @type {Options | VFile} */\n    let options;\n    if (!value) {\n      options = {};\n    } else if (typeof value === 'string' || buffer(value)) {\n      options = {\n        value\n      };\n    } else if (isUrl(value)) {\n      options = {\n        path: value\n      };\n    } else {\n      options = value;\n    }\n\n    /**\n     * Place to store custom information (default: `{}`).\n     *\n     * It’s OK to store custom data directly on the file but moving it to\n     * `data` is recommended.\n     *\n     * @type {Data}\n     */\n    this.data = {};\n\n    /**\n     * List of messages associated with the file.\n     *\n     * @type {Array<VFileMessage>}\n     */\n    this.messages = [];\n\n    /**\n     * List of filepaths the file moved between.\n     *\n     * The first is the original path and the last is the current path.\n     *\n     * @type {Array<string>}\n     */\n    this.history = [];\n\n    /**\n     * Base of `path` (default: `process.cwd()` or `'/'` in browsers).\n     *\n     * @type {string}\n     */\n    this.cwd = proc.cwd();\n\n    /* eslint-disable no-unused-expressions */\n    /**\n     * Raw value.\n     *\n     * @type {Value}\n     */\n    this.value;\n\n    // The below are non-standard, they are “well-known”.\n    // As in, used in several tools.\n\n    /**\n     * Whether a file was saved to disk.\n     *\n     * This is used by vfile reporters.\n     *\n     * @type {boolean}\n     */\n    this.stored;\n\n    /**\n     * Custom, non-string, compiled, representation.\n     *\n     * This is used by unified to store non-string results.\n     * One example is when turning markdown into React nodes.\n     *\n     * @type {unknown}\n     */\n    this.result;\n\n    /**\n     * Source map.\n     *\n     * This type is equivalent to the `RawSourceMap` type from the `source-map`\n     * module.\n     *\n     * @type {Map | null | undefined}\n     */\n    this.map;\n    /* eslint-enable no-unused-expressions */\n\n    // Set path related properties in the correct order.\n    let index = -1;\n    while (++index < order.length) {\n      const prop = order[index];\n\n      // Note: we specifically use `in` instead of `hasOwnProperty` to accept\n      // `vfile`s too.\n      if (prop in options && options[prop] !== undefined && options[prop] !== null) {\n        // @ts-expect-error: TS doesn’t understand basic reality.\n        this[prop] = prop === 'history' ? [...options[prop]] : options[prop];\n      }\n    }\n\n    /** @type {string} */\n    let prop;\n\n    // Set non-path related properties.\n    for (prop in options) {\n      // @ts-expect-error: fine to set other things.\n      if (!order.includes(prop)) {\n        // @ts-expect-error: fine to set other things.\n        this[prop] = options[prop];\n      }\n    }\n  }\n\n  /**\n   * Get the full path (example: `'~/index.min.js'`).\n   *\n   * @returns {string}\n   */\n  get path() {\n    return this.history[this.history.length - 1];\n  }\n\n  /**\n   * Set the full path (example: `'~/index.min.js'`).\n   *\n   * Cannot be nullified.\n   * You can set a file URL (a `URL` object with a `file:` protocol) which will\n   * be turned into a path with `url.fileURLToPath`.\n   *\n   * @param {string | URL} path\n   */\n  set path(path) {\n    if (isUrl(path)) {\n      path = urlToPath(path);\n    }\n    assertNonEmpty(path, 'path');\n    if (this.path !== path) {\n      this.history.push(path);\n    }\n  }\n\n  /**\n   * Get the parent path (example: `'~'`).\n   */\n  get dirname() {\n    return typeof this.path === 'string' ? path.dirname(this.path) : undefined;\n  }\n\n  /**\n   * Set the parent path (example: `'~'`).\n   *\n   * Cannot be set if there’s no `path` yet.\n   */\n  set dirname(dirname) {\n    assertPath(this.basename, 'dirname');\n    this.path = path.join(dirname || '', this.basename);\n  }\n\n  /**\n   * Get the basename (including extname) (example: `'index.min.js'`).\n   */\n  get basename() {\n    return typeof this.path === 'string' ? path.basename(this.path) : undefined;\n  }\n\n  /**\n   * Set basename (including extname) (`'index.min.js'`).\n   *\n   * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\\'`\n   * on windows).\n   * Cannot be nullified (use `file.path = file.dirname` instead).\n   */\n  set basename(basename) {\n    assertNonEmpty(basename, 'basename');\n    assertPart(basename, 'basename');\n    this.path = path.join(this.dirname || '', basename);\n  }\n\n  /**\n   * Get the extname (including dot) (example: `'.js'`).\n   */\n  get extname() {\n    return typeof this.path === 'string' ? path.extname(this.path) : undefined;\n  }\n\n  /**\n   * Set the extname (including dot) (example: `'.js'`).\n   *\n   * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\\'`\n   * on windows).\n   * Cannot be set if there’s no `path` yet.\n   */\n  set extname(extname) {\n    assertPart(extname, 'extname');\n    assertPath(this.dirname, 'extname');\n    if (extname) {\n      if (extname.charCodeAt(0) !== 46 /* `.` */) {\n        throw new Error('`extname` must start with `.`');\n      }\n      if (extname.includes('.', 1)) {\n        throw new Error('`extname` cannot contain multiple dots');\n      }\n    }\n    this.path = path.join(this.dirname, this.stem + (extname || ''));\n  }\n\n  /**\n   * Get the stem (basename w/o extname) (example: `'index.min'`).\n   */\n  get stem() {\n    return typeof this.path === 'string' ? path.basename(this.path, this.extname) : undefined;\n  }\n\n  /**\n   * Set the stem (basename w/o extname) (example: `'index.min'`).\n   *\n   * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\\'`\n   * on windows).\n   * Cannot be nullified (use `file.path = file.dirname` instead).\n   */\n  set stem(stem) {\n    assertNonEmpty(stem, 'stem');\n    assertPart(stem, 'stem');\n    this.path = path.join(this.dirname || '', stem + (this.extname || ''));\n  }\n\n  /**\n   * Serialize the file.\n   *\n   * @param {BufferEncoding | null | undefined} [encoding='utf8']\n   *   Character encoding to understand `value` as when it’s a `Buffer`\n   *   (default: `'utf8'`).\n   * @returns {string}\n   *   Serialized file.\n   */\n  toString(encoding) {\n    return (this.value || '').toString(encoding || undefined);\n  }\n\n  /**\n   * Create a warning message associated with the file.\n   *\n   * Its `fatal` is set to `false` and `file` is set to the current file path.\n   * Its added to `file.messages`.\n   *\n   * @param {string | Error | VFileMessage} reason\n   *   Reason for message, uses the stack and message of the error if given.\n   * @param {Node | NodeLike | Position | Point | null | undefined} [place]\n   *   Place in file where the message occurred.\n   * @param {string | null | undefined} [origin]\n   *   Place in code where the message originates (example:\n   *   `'my-package:my-rule'` or `'my-rule'`).\n   * @returns {VFileMessage}\n   *   Message.\n   */\n  message(reason, place, origin) {\n    const message = new VFileMessage(reason, place, origin);\n    if (this.path) {\n      message.name = this.path + ':' + message.name;\n      message.file = this.path;\n    }\n    message.fatal = false;\n    this.messages.push(message);\n    return message;\n  }\n\n  /**\n   * Create an info message associated with the file.\n   *\n   * Its `fatal` is set to `null` and `file` is set to the current file path.\n   * Its added to `file.messages`.\n   *\n   * @param {string | Error | VFileMessage} reason\n   *   Reason for message, uses the stack and message of the error if given.\n   * @param {Node | NodeLike | Position | Point | null | undefined} [place]\n   *   Place in file where the message occurred.\n   * @param {string | null | undefined} [origin]\n   *   Place in code where the message originates (example:\n   *   `'my-package:my-rule'` or `'my-rule'`).\n   * @returns {VFileMessage}\n   *   Message.\n   */\n  info(reason, place, origin) {\n    const message = this.message(reason, place, origin);\n    message.fatal = null;\n    return message;\n  }\n\n  /**\n   * Create a fatal error associated with the file.\n   *\n   * Its `fatal` is set to `true` and `file` is set to the current file path.\n   * Its added to `file.messages`.\n   *\n   * > 👉 **Note**: a fatal error means that a file is no longer processable.\n   *\n   * @param {string | Error | VFileMessage} reason\n   *   Reason for message, uses the stack and message of the error if given.\n   * @param {Node | NodeLike | Position | Point | null | undefined} [place]\n   *   Place in file where the message occurred.\n   * @param {string | null | undefined} [origin]\n   *   Place in code where the message originates (example:\n   *   `'my-package:my-rule'` or `'my-rule'`).\n   * @returns {never}\n   *   Message.\n   * @throws {VFileMessage}\n   *   Message.\n   */\n  fail(reason, place, origin) {\n    const message = this.message(reason, place, origin);\n    message.fatal = true;\n    throw message;\n  }\n}\n\n/**\n * Assert that `part` is not a path (as in, does not contain `path.sep`).\n *\n * @param {string | null | undefined} part\n *   File path part.\n * @param {string} name\n *   Part name.\n * @returns {void}\n *   Nothing.\n */\nfunction assertPart(part, name) {\n  if (part && part.includes(path.sep)) {\n    throw new Error('`' + name + '` cannot be a path: did not expect `' + path.sep + '`');\n  }\n}\n\n/**\n * Assert that `part` is not empty.\n *\n * @param {string | undefined} part\n *   Thing.\n * @param {string} name\n *   Part name.\n * @returns {asserts part is string}\n *   Nothing.\n */\nfunction assertNonEmpty(part, name) {\n  if (!part) {\n    throw new Error('`' + name + '` cannot be empty');\n  }\n}\n\n/**\n * Assert `path` exists.\n *\n * @param {string | undefined} path\n *   Path.\n * @param {string} name\n *   Dependency name.\n * @returns {asserts path is string}\n *   Nothing.\n */\nfunction assertPath(path, name) {\n  if (!path) {\n    throw new Error('Setting `' + name + '` requires `path` to be set too');\n  }\n}\n\n/**\n * Assert `value` is a buffer.\n *\n * @param {unknown} value\n *   thing.\n * @returns {value is Buffer}\n *   Whether `value` is a Node.js buffer.\n */\nfunction buffer(value) {\n  return bufferLike(value);\n}","/**\n * Throw a given error.\n *\n * @param {Error|null|undefined} [error]\n *   Maybe error.\n * @returns {asserts error is null|undefined}\n */\nexport function bail(error) {\n  if (error) {\n    throw error;\n  }\n}","export default function isPlainObject(value) {\n  if (typeof value !== 'object' || value === null) {\n    return false;\n  }\n  const prototype = Object.getPrototypeOf(value);\n  return (prototype === null || prototype === Object.prototype || Object.getPrototypeOf(prototype) === null) && !(Symbol.toStringTag in value) && !(Symbol.iterator in value);\n}","/**\n * @typedef {(error?: Error|null|undefined, ...output: Array<any>) => void} Callback\n * @typedef {(...input: Array<any>) => any} Middleware\n *\n * @typedef {(...input: Array<any>) => void} Run\n *   Call all middleware.\n * @typedef {(fn: Middleware) => Pipeline} Use\n *   Add `fn` (middleware) to the list.\n * @typedef {{run: Run, use: Use}} Pipeline\n *   Middleware.\n */\n\n/**\n * Create new middleware.\n *\n * @returns {Pipeline}\n */\nexport function trough() {\n  /** @type {Array<Middleware>} */\n  const fns = [];\n  /** @type {Pipeline} */\n  const pipeline = {\n    run,\n    use\n  };\n  return pipeline;\n\n  /** @type {Run} */\n  function run() {\n    for (var _len = arguments.length, values = new Array(_len), _key = 0; _key < _len; _key++) {\n      values[_key] = arguments[_key];\n    }\n    let middlewareIndex = -1;\n    /** @type {Callback} */\n    const callback = values.pop();\n    if (typeof callback !== 'function') {\n      throw new TypeError('Expected function as last argument, not ' + callback);\n    }\n    next(null, ...values);\n\n    /**\n     * Run the next `fn`, or we’re done.\n     *\n     * @param {Error|null|undefined} error\n     * @param {Array<any>} output\n     */\n    function next(error) {\n      const fn = fns[++middlewareIndex];\n      let index = -1;\n      if (error) {\n        callback(error);\n        return;\n      }\n\n      // Copy non-nullish input into values.\n      for (var _len2 = arguments.length, output = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n        output[_key2 - 1] = arguments[_key2];\n      }\n      while (++index < values.length) {\n        if (output[index] === null || output[index] === undefined) {\n          output[index] = values[index];\n        }\n      }\n\n      // Save the newly created `output` for the next call.\n      values = output;\n\n      // Next or done.\n      if (fn) {\n        wrap(fn, next)(...output);\n      } else {\n        callback(null, ...output);\n      }\n    }\n  }\n\n  /** @type {Use} */\n  function use(middelware) {\n    if (typeof middelware !== 'function') {\n      throw new TypeError('Expected `middelware` to be a function, not ' + middelware);\n    }\n    fns.push(middelware);\n    return pipeline;\n  }\n}\n\n/**\n * Wrap `middleware`.\n * Can be sync or async; return a promise, receive a callback, or return new\n * values and errors.\n *\n * @param {Middleware} middleware\n * @param {Callback} callback\n */\nexport function wrap(middleware, callback) {\n  /** @type {boolean} */\n  let called;\n  return wrapped;\n\n  /**\n   * Call `middleware`.\n   * @this {any}\n   * @param {Array<any>} parameters\n   * @returns {void}\n   */\n  function wrapped() {\n    for (var _len3 = arguments.length, parameters = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n      parameters[_key3] = arguments[_key3];\n    }\n    const fnExpectsCallback = middleware.length > parameters.length;\n    /** @type {any} */\n    let result;\n    if (fnExpectsCallback) {\n      parameters.push(done);\n    }\n    try {\n      result = middleware.apply(this, parameters);\n    } catch (error) {\n      const exception = /** @type {Error} */error;\n\n      // Well, this is quite the pickle.\n      // `middleware` received a callback and called it synchronously, but that\n      // threw an error.\n      // The only thing left to do is to throw the thing instead.\n      if (fnExpectsCallback && called) {\n        throw exception;\n      }\n      return done(exception);\n    }\n    if (!fnExpectsCallback) {\n      if (result instanceof Promise) {\n        result.then(then, done);\n      } else if (result instanceof Error) {\n        done(result);\n      } else {\n        then(result);\n      }\n    }\n  }\n\n  /**\n   * Call `callback`, only once.\n   * @type {Callback}\n   */\n  function done(error) {\n    if (!called) {\n      called = true;\n      for (var _len4 = arguments.length, output = new Array(_len4 > 1 ? _len4 - 1 : 0), _key4 = 1; _key4 < _len4; _key4++) {\n        output[_key4 - 1] = arguments[_key4];\n      }\n      callback(error, ...output);\n    }\n  }\n\n  /**\n   * Call `done` with one value.\n   *\n   * @param {any} [value]\n   */\n  function then(value) {\n    done(null, value);\n  }\n}","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('vfile').VFileCompatible} VFileCompatible\n * @typedef {import('vfile').VFileValue} VFileValue\n * @typedef {import('..').Processor} Processor\n * @typedef {import('..').Plugin} Plugin\n * @typedef {import('..').Preset} Preset\n * @typedef {import('..').Pluggable} Pluggable\n * @typedef {import('..').PluggableList} PluggableList\n * @typedef {import('..').Transformer} Transformer\n * @typedef {import('..').Parser} Parser\n * @typedef {import('..').Compiler} Compiler\n * @typedef {import('..').RunCallback} RunCallback\n * @typedef {import('..').ProcessCallback} ProcessCallback\n *\n * @typedef Context\n * @property {Node} tree\n * @property {VFile} file\n */\n\nimport { bail } from 'bail';\nimport isBuffer from 'is-buffer';\nimport extend from 'extend';\nimport isPlainObj from 'is-plain-obj';\nimport { trough } from 'trough';\nimport { VFile } from 'vfile';\n\n// Expose a frozen processor.\nexport const unified = base().freeze();\nconst own = {}.hasOwnProperty;\n\n// Function to create the first processor.\n/**\n * @returns {Processor}\n */\nfunction base() {\n  const transformers = trough();\n  /** @type {Processor['attachers']} */\n  const attachers = [];\n  /** @type {Record<string, unknown>} */\n  let namespace = {};\n  /** @type {boolean|undefined} */\n  let frozen;\n  let freezeIndex = -1;\n\n  // Data management.\n  // @ts-expect-error: overloads are handled.\n  processor.data = data;\n  processor.Parser = undefined;\n  processor.Compiler = undefined;\n\n  // Lock.\n  processor.freeze = freeze;\n\n  // Plugins.\n  processor.attachers = attachers;\n  // @ts-expect-error: overloads are handled.\n  processor.use = use;\n\n  // API.\n  processor.parse = parse;\n  processor.stringify = stringify;\n  // @ts-expect-error: overloads are handled.\n  processor.run = run;\n  processor.runSync = runSync;\n  // @ts-expect-error: overloads are handled.\n  processor.process = process;\n  processor.processSync = processSync;\n\n  // Expose.\n  return processor;\n\n  // Create a new processor based on the processor in the current scope.\n  /** @type {Processor} */\n  function processor() {\n    const destination = base();\n    let index = -1;\n    while (++index < attachers.length) {\n      destination.use(...attachers[index]);\n    }\n    destination.data(extend(true, {}, namespace));\n    return destination;\n  }\n\n  /**\n   * @param {string|Record<string, unknown>} [key]\n   * @param {unknown} [value]\n   * @returns {unknown}\n   */\n  function data(key, value) {\n    if (typeof key === 'string') {\n      // Set `key`.\n      if (arguments.length === 2) {\n        assertUnfrozen('data', frozen);\n        namespace[key] = value;\n        return processor;\n      }\n\n      // Get `key`.\n      return own.call(namespace, key) && namespace[key] || null;\n    }\n\n    // Set space.\n    if (key) {\n      assertUnfrozen('data', frozen);\n      namespace = key;\n      return processor;\n    }\n\n    // Get space.\n    return namespace;\n  }\n\n  /** @type {Processor['freeze']} */\n  function freeze() {\n    if (frozen) {\n      return processor;\n    }\n    while (++freezeIndex < attachers.length) {\n      const [attacher, ...options] = attachers[freezeIndex];\n      if (options[0] === false) {\n        continue;\n      }\n      if (options[0] === true) {\n        options[0] = undefined;\n      }\n\n      /** @type {Transformer|void} */\n      const transformer = attacher.call(processor, ...options);\n      if (typeof transformer === 'function') {\n        transformers.use(transformer);\n      }\n    }\n    frozen = true;\n    freezeIndex = Number.POSITIVE_INFINITY;\n    return processor;\n  }\n\n  /**\n   * @param {Pluggable|null|undefined} [value]\n   * @param {...unknown} options\n   * @returns {Processor}\n   */\n  function use(value) {\n    for (var _len = arguments.length, options = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      options[_key - 1] = arguments[_key];\n    }\n    /** @type {Record<string, unknown>|undefined} */\n    let settings;\n    assertUnfrozen('use', frozen);\n    if (value === null || value === undefined) {\n      // Empty.\n    } else if (typeof value === 'function') {\n      addPlugin(value, ...options);\n    } else if (typeof value === 'object') {\n      if (Array.isArray(value)) {\n        addList(value);\n      } else {\n        addPreset(value);\n      }\n    } else {\n      throw new TypeError('Expected usable value, not `' + value + '`');\n    }\n    if (settings) {\n      namespace.settings = Object.assign(namespace.settings || {}, settings);\n    }\n    return processor;\n\n    /**\n     * @param {import('..').Pluggable<unknown[]>} value\n     * @returns {void}\n     */\n    function add(value) {\n      if (typeof value === 'function') {\n        addPlugin(value);\n      } else if (typeof value === 'object') {\n        if (Array.isArray(value)) {\n          const [plugin, ...options] = value;\n          addPlugin(plugin, ...options);\n        } else {\n          addPreset(value);\n        }\n      } else {\n        throw new TypeError('Expected usable value, not `' + value + '`');\n      }\n    }\n\n    /**\n     * @param {Preset} result\n     * @returns {void}\n     */\n    function addPreset(result) {\n      addList(result.plugins);\n      if (result.settings) {\n        settings = Object.assign(settings || {}, result.settings);\n      }\n    }\n\n    /**\n     * @param {PluggableList|null|undefined} [plugins]\n     * @returns {void}\n     */\n    function addList(plugins) {\n      let index = -1;\n      if (plugins === null || plugins === undefined) {\n        // Empty.\n      } else if (Array.isArray(plugins)) {\n        while (++index < plugins.length) {\n          const thing = plugins[index];\n          add(thing);\n        }\n      } else {\n        throw new TypeError('Expected a list of plugins, not `' + plugins + '`');\n      }\n    }\n\n    /**\n     * @param {Plugin} plugin\n     * @param {...unknown} [value]\n     * @returns {void}\n     */\n    function addPlugin(plugin, value) {\n      let index = -1;\n      /** @type {Processor['attachers'][number]|undefined} */\n      let entry;\n      while (++index < attachers.length) {\n        if (attachers[index][0] === plugin) {\n          entry = attachers[index];\n          break;\n        }\n      }\n      if (entry) {\n        if (isPlainObj(entry[1]) && isPlainObj(value)) {\n          value = extend(true, entry[1], value);\n        }\n        entry[1] = value;\n      } else {\n        // @ts-expect-error: fine.\n        attachers.push([...arguments]);\n      }\n    }\n  }\n\n  /** @type {Processor['parse']} */\n  function parse(doc) {\n    processor.freeze();\n    const file = vfile(doc);\n    const Parser = processor.Parser;\n    assertParser('parse', Parser);\n    if (newable(Parser, 'parse')) {\n      // @ts-expect-error: `newable` checks this.\n      return new Parser(String(file), file).parse();\n    }\n\n    // @ts-expect-error: `newable` checks this.\n    return Parser(String(file), file); // eslint-disable-line new-cap\n  }\n\n  /** @type {Processor['stringify']} */\n  function stringify(node, doc) {\n    processor.freeze();\n    const file = vfile(doc);\n    const Compiler = processor.Compiler;\n    assertCompiler('stringify', Compiler);\n    assertNode(node);\n    if (newable(Compiler, 'compile')) {\n      // @ts-expect-error: `newable` checks this.\n      return new Compiler(node, file).compile();\n    }\n\n    // @ts-expect-error: `newable` checks this.\n    return Compiler(node, file); // eslint-disable-line new-cap\n  }\n\n  /**\n   * @param {Node} node\n   * @param {VFileCompatible|RunCallback} [doc]\n   * @param {RunCallback} [callback]\n   * @returns {Promise<Node>|void}\n   */\n  function run(node, doc, callback) {\n    assertNode(node);\n    processor.freeze();\n    if (!callback && typeof doc === 'function') {\n      callback = doc;\n      doc = undefined;\n    }\n    if (!callback) {\n      return new Promise(executor);\n    }\n    executor(null, callback);\n\n    /**\n     * @param {null|((node: Node) => void)} resolve\n     * @param {(error: Error) => void} reject\n     * @returns {void}\n     */\n    function executor(resolve, reject) {\n      // @ts-expect-error: `doc` can’t be a callback anymore, we checked.\n      transformers.run(node, vfile(doc), done);\n\n      /**\n       * @param {Error|null} error\n       * @param {Node} tree\n       * @param {VFile} file\n       * @returns {void}\n       */\n      function done(error, tree, file) {\n        tree = tree || node;\n        if (error) {\n          reject(error);\n        } else if (resolve) {\n          resolve(tree);\n        } else {\n          // @ts-expect-error: `callback` is defined if `resolve` is not.\n          callback(null, tree, file);\n        }\n      }\n    }\n  }\n\n  /** @type {Processor['runSync']} */\n  function runSync(node, file) {\n    /** @type {Node|undefined} */\n    let result;\n    /** @type {boolean|undefined} */\n    let complete;\n    processor.run(node, file, done);\n    assertDone('runSync', 'run', complete);\n\n    // @ts-expect-error: we either bailed on an error or have a tree.\n    return result;\n\n    /**\n     * @param {Error|null} [error]\n     * @param {Node} [tree]\n     * @returns {void}\n     */\n    function done(error, tree) {\n      bail(error);\n      result = tree;\n      complete = true;\n    }\n  }\n\n  /**\n   * @param {VFileCompatible} doc\n   * @param {ProcessCallback} [callback]\n   * @returns {Promise<VFile>|undefined}\n   */\n  function process(doc, callback) {\n    processor.freeze();\n    assertParser('process', processor.Parser);\n    assertCompiler('process', processor.Compiler);\n    if (!callback) {\n      return new Promise(executor);\n    }\n    executor(null, callback);\n\n    /**\n     * @param {null|((file: VFile) => void)} resolve\n     * @param {(error?: Error|null|undefined) => void} reject\n     * @returns {void}\n     */\n    function executor(resolve, reject) {\n      const file = vfile(doc);\n      processor.run(processor.parse(file), file, (error, tree, file) => {\n        if (error || !tree || !file) {\n          done(error);\n        } else {\n          /** @type {unknown} */\n          const result = processor.stringify(tree, file);\n          if (result === undefined || result === null) {\n            // Empty.\n          } else if (looksLikeAVFileValue(result)) {\n            file.value = result;\n          } else {\n            file.result = result;\n          }\n          done(error, file);\n        }\n      });\n\n      /**\n       * @param {Error|null|undefined} [error]\n       * @param {VFile|undefined} [file]\n       * @returns {void}\n       */\n      function done(error, file) {\n        if (error || !file) {\n          reject(error);\n        } else if (resolve) {\n          resolve(file);\n        } else {\n          // @ts-expect-error: `callback` is defined if `resolve` is not.\n          callback(null, file);\n        }\n      }\n    }\n  }\n\n  /** @type {Processor['processSync']} */\n  function processSync(doc) {\n    /** @type {boolean|undefined} */\n    let complete;\n    processor.freeze();\n    assertParser('processSync', processor.Parser);\n    assertCompiler('processSync', processor.Compiler);\n    const file = vfile(doc);\n    processor.process(file, done);\n    assertDone('processSync', 'process', complete);\n    return file;\n\n    /**\n     * @param {Error|null|undefined} [error]\n     * @returns {void}\n     */\n    function done(error) {\n      complete = true;\n      bail(error);\n    }\n  }\n}\n\n/**\n * Check if `value` is a constructor.\n *\n * @param {unknown} value\n * @param {string} name\n * @returns {boolean}\n */\nfunction newable(value, name) {\n  return typeof value === 'function' &&\n  // Prototypes do exist.\n  // type-coverage:ignore-next-line\n  value.prototype && (\n  // A function with keys in its prototype is probably a constructor.\n  // Classes’ prototype methods are not enumerable, so we check if some value\n  // exists in the prototype.\n  // type-coverage:ignore-next-line\n  keys(value.prototype) || name in value.prototype);\n}\n\n/**\n * Check if `value` is an object with keys.\n *\n * @param {Record<string, unknown>} value\n * @returns {boolean}\n */\nfunction keys(value) {\n  /** @type {string} */\n  let key;\n  for (key in value) {\n    if (own.call(value, key)) {\n      return true;\n    }\n  }\n  return false;\n}\n\n/**\n * Assert a parser is available.\n *\n * @param {string} name\n * @param {unknown} value\n * @returns {asserts value is Parser}\n */\nfunction assertParser(name, value) {\n  if (typeof value !== 'function') {\n    throw new TypeError('Cannot `' + name + '` without `Parser`');\n  }\n}\n\n/**\n * Assert a compiler is available.\n *\n * @param {string} name\n * @param {unknown} value\n * @returns {asserts value is Compiler}\n */\nfunction assertCompiler(name, value) {\n  if (typeof value !== 'function') {\n    throw new TypeError('Cannot `' + name + '` without `Compiler`');\n  }\n}\n\n/**\n * Assert the processor is not frozen.\n *\n * @param {string} name\n * @param {unknown} frozen\n * @returns {asserts frozen is false}\n */\nfunction assertUnfrozen(name, frozen) {\n  if (frozen) {\n    throw new Error('Cannot call `' + name + '` on a frozen processor.\\nCreate a new processor first, by calling it: use `processor()` instead of `processor`.');\n  }\n}\n\n/**\n * Assert `node` is a unist node.\n *\n * @param {unknown} node\n * @returns {asserts node is Node}\n */\nfunction assertNode(node) {\n  // `isPlainObj` unfortunately uses `any` instead of `unknown`.\n  // type-coverage:ignore-next-line\n  if (!isPlainObj(node) || typeof node.type !== 'string') {\n    throw new TypeError('Expected node, got `' + node + '`');\n    // Fine.\n  }\n}\n\n/**\n * Assert that `complete` is `true`.\n *\n * @param {string} name\n * @param {string} asyncName\n * @param {unknown} complete\n * @returns {asserts complete is true}\n */\nfunction assertDone(name, asyncName, complete) {\n  if (!complete) {\n    throw new Error('`' + name + '` finished async. Use `' + asyncName + '` instead');\n  }\n}\n\n/**\n * @param {VFileCompatible} [value]\n * @returns {VFile}\n */\nfunction vfile(value) {\n  return looksLikeAVFile(value) ? value : new VFile(value);\n}\n\n/**\n * @param {VFileCompatible} [value]\n * @returns {value is VFile}\n */\nfunction looksLikeAVFile(value) {\n  return Boolean(value && typeof value === 'object' && 'message' in value && 'messages' in value);\n}\n\n/**\n * @param {unknown} [value]\n * @returns {value is VFileValue}\n */\nfunction looksLikeAVFileValue(value) {\n  return typeof value === 'string' || isBuffer(value);\n}","/**\n * @typedef {import('mdast').Root|import('mdast').Content} Node\n *\n * @typedef Options\n *   Configuration (optional).\n * @property {boolean | null | undefined} [includeImageAlt=true]\n *   Whether to use `alt` for `image`s.\n * @property {boolean | null | undefined} [includeHtml=true]\n *   Whether to use `value` of HTML.\n */\n\n/** @type {Options} */\nconst emptyOptions = {};\n\n/**\n * Get the text content of a node or list of nodes.\n *\n * Prefers the node’s plain-text fields, otherwise serializes its children,\n * and if the given value is an array, serialize the nodes in it.\n *\n * @param {unknown} value\n *   Thing to serialize, typically `Node`.\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {string}\n *   Serialized `value`.\n */\nexport function toString(value, options) {\n  const settings = options || emptyOptions;\n  const includeImageAlt = typeof settings.includeImageAlt === 'boolean' ? settings.includeImageAlt : true;\n  const includeHtml = typeof settings.includeHtml === 'boolean' ? settings.includeHtml : true;\n  return one(value, includeImageAlt, includeHtml);\n}\n\n/**\n * One node or several nodes.\n *\n * @param {unknown} value\n *   Thing to serialize.\n * @param {boolean} includeImageAlt\n *   Include image `alt`s.\n * @param {boolean} includeHtml\n *   Include HTML.\n * @returns {string}\n *   Serialized node.\n */\nfunction one(value, includeImageAlt, includeHtml) {\n  if (node(value)) {\n    if ('value' in value) {\n      return value.type === 'html' && !includeHtml ? '' : value.value;\n    }\n    if (includeImageAlt && 'alt' in value && value.alt) {\n      return value.alt;\n    }\n    if ('children' in value) {\n      return all(value.children, includeImageAlt, includeHtml);\n    }\n  }\n  if (Array.isArray(value)) {\n    return all(value, includeImageAlt, includeHtml);\n  }\n  return '';\n}\n\n/**\n * Serialize a list of nodes.\n *\n * @param {Array<unknown>} values\n *   Thing to serialize.\n * @param {boolean} includeImageAlt\n *   Include image `alt`s.\n * @param {boolean} includeHtml\n *   Include HTML.\n * @returns {string}\n *   Serialized nodes.\n */\nfunction all(values, includeImageAlt, includeHtml) {\n  /** @type {Array<string>} */\n  const result = [];\n  let index = -1;\n  while (++index < values.length) {\n    result[index] = one(values[index], includeImageAlt, includeHtml);\n  }\n  return result.join('');\n}\n\n/**\n * Check if `value` looks like a node.\n *\n * @param {unknown} value\n *   Thing.\n * @returns {value is Node}\n *   Whether `value` is a node.\n */\nfunction node(value) {\n  return Boolean(value && typeof value === 'object');\n}","/**\n * Like `Array#splice`, but smarter for giant arrays.\n *\n * `Array#splice` takes all items to be inserted as individual argument which\n * causes a stack overflow in V8 when trying to insert 100k items for instance.\n *\n * Otherwise, this does not return the removed items, and takes `items` as an\n * array instead of rest parameters.\n *\n * @template {unknown} T\n *   Item type.\n * @param {Array<T>} list\n *   List to operate on.\n * @param {number} start\n *   Index to remove/insert at (can be negative).\n * @param {number} remove\n *   Number of items to remove.\n * @param {Array<T>} items\n *   Items to inject into `list`.\n * @returns {void}\n *   Nothing.\n */\nexport function splice(list, start, remove, items) {\n  const end = list.length;\n  let chunkStart = 0;\n  /** @type {Array<unknown>} */\n  let parameters;\n\n  // Make start between zero and `end` (included).\n  if (start < 0) {\n    start = -start > end ? 0 : end + start;\n  } else {\n    start = start > end ? end : start;\n  }\n  remove = remove > 0 ? remove : 0;\n\n  // No need to chunk the items if there’s only a couple (10k) items.\n  if (items.length < 10000) {\n    parameters = Array.from(items);\n    parameters.unshift(start, remove);\n    // @ts-expect-error Hush, it’s fine.\n    list.splice(...parameters);\n  } else {\n    // Delete `remove` items starting from `start`\n    if (remove) list.splice(start, remove);\n\n    // Insert the items in chunks to not cause stack overflows.\n    while (chunkStart < items.length) {\n      parameters = items.slice(chunkStart, chunkStart + 10000);\n      parameters.unshift(start, 0);\n      // @ts-expect-error Hush, it’s fine.\n      list.splice(...parameters);\n      chunkStart += 10000;\n      start += 10000;\n    }\n  }\n}\n\n/**\n * Append `items` (an array) at the end of `list` (another array).\n * When `list` was empty, returns `items` instead.\n *\n * This prevents a potentially expensive operation when `list` is empty,\n * and adds items in batches to prevent V8 from hanging.\n *\n * @template {unknown} T\n *   Item type.\n * @param {Array<T>} list\n *   List to operate on.\n * @param {Array<T>} items\n *   Items to add to `list`.\n * @returns {Array<T>}\n *   Either `list` or `items`.\n */\nexport function push(list, items) {\n  if (list.length > 0) {\n    splice(list, list.length, 0, items);\n    return list;\n  }\n  return items;\n}","/**\n * @typedef {import('micromark-util-types').Extension} Extension\n * @typedef {import('micromark-util-types').Handles} Handles\n * @typedef {import('micromark-util-types').HtmlExtension} HtmlExtension\n * @typedef {import('micromark-util-types').NormalizedExtension} NormalizedExtension\n */\n\nimport { splice } from 'micromark-util-chunked';\nconst hasOwnProperty = {}.hasOwnProperty;\n\n/**\n * Combine multiple syntax extensions into one.\n *\n * @param {Array<Extension>} extensions\n *   List of syntax extensions.\n * @returns {NormalizedExtension}\n *   A single combined extension.\n */\nexport function combineExtensions(extensions) {\n  /** @type {NormalizedExtension} */\n  const all = {};\n  let index = -1;\n  while (++index < extensions.length) {\n    syntaxExtension(all, extensions[index]);\n  }\n  return all;\n}\n\n/**\n * Merge `extension` into `all`.\n *\n * @param {NormalizedExtension} all\n *   Extension to merge into.\n * @param {Extension} extension\n *   Extension to merge.\n * @returns {void}\n */\nfunction syntaxExtension(all, extension) {\n  /** @type {keyof Extension} */\n  let hook;\n  for (hook in extension) {\n    const maybe = hasOwnProperty.call(all, hook) ? all[hook] : undefined;\n    /** @type {Record<string, unknown>} */\n    const left = maybe || (all[hook] = {});\n    /** @type {Record<string, unknown> | undefined} */\n    const right = extension[hook];\n    /** @type {string} */\n    let code;\n    if (right) {\n      for (code in right) {\n        if (!hasOwnProperty.call(left, code)) left[code] = [];\n        const value = right[code];\n        constructs(\n        // @ts-expect-error Looks like a list.\n        left[code], Array.isArray(value) ? value : value ? [value] : []);\n      }\n    }\n  }\n}\n\n/**\n * Merge `list` into `existing` (both lists of constructs).\n * Mutates `existing`.\n *\n * @param {Array<unknown>} existing\n * @param {Array<unknown>} list\n * @returns {void}\n */\nfunction constructs(existing, list) {\n  let index = -1;\n  /** @type {Array<unknown>} */\n  const before = [];\n  while (++index < list.length) {\n    // @ts-expect-error Looks like an object.\n    ;\n    (list[index].add === 'after' ? existing : before).push(list[index]);\n  }\n  splice(existing, 0, 0, before);\n}\n\n/**\n * Combine multiple HTML extensions into one.\n *\n * @param {Array<HtmlExtension>} htmlExtensions\n *   List of HTML extensions.\n * @returns {HtmlExtension}\n *   A single combined HTML extension.\n */\nexport function combineHtmlExtensions(htmlExtensions) {\n  /** @type {HtmlExtension} */\n  const handlers = {};\n  let index = -1;\n  while (++index < htmlExtensions.length) {\n    htmlExtension(handlers, htmlExtensions[index]);\n  }\n  return handlers;\n}\n\n/**\n * Merge `extension` into `all`.\n *\n * @param {HtmlExtension} all\n *   Extension to merge into.\n * @param {HtmlExtension} extension\n *   Extension to merge.\n * @returns {void}\n */\nfunction htmlExtension(all, extension) {\n  /** @type {keyof HtmlExtension} */\n  let hook;\n  for (hook in extension) {\n    const maybe = hasOwnProperty.call(all, hook) ? all[hook] : undefined;\n    const left = maybe || (all[hook] = {});\n    const right = extension[hook];\n    /** @type {keyof Handles} */\n    let type;\n    if (right) {\n      for (type in right) {\n        // @ts-expect-error assume document vs regular handler are managed correctly.\n        left[type] = right[type];\n      }\n    }\n  }\n}","// This module is generated by `script/`.\n//\n// CommonMark handles attention (emphasis, strong) markers based on what comes\n// before or after them.\n// One such difference is if those characters are Unicode punctuation.\n// This script is generated from the Unicode data.\n\n/**\n * Regular expression that matches a unicode punctuation character.\n */\nexport const unicodePunctuationRegex = /[!-\\/:-@\\[-`\\{-~\\xA1\\xA7\\xAB\\xB6\\xB7\\xBB\\xBF\\u037E\\u0387\\u055A-\\u055F\\u0589\\u058A\\u05BE\\u05C0\\u05C3\\u05C6\\u05F3\\u05F4\\u0609\\u060A\\u060C\\u060D\\u061B\\u061D-\\u061F\\u066A-\\u066D\\u06D4\\u0700-\\u070D\\u07F7-\\u07F9\\u0830-\\u083E\\u085E\\u0964\\u0965\\u0970\\u09FD\\u0A76\\u0AF0\\u0C77\\u0C84\\u0DF4\\u0E4F\\u0E5A\\u0E5B\\u0F04-\\u0F12\\u0F14\\u0F3A-\\u0F3D\\u0F85\\u0FD0-\\u0FD4\\u0FD9\\u0FDA\\u104A-\\u104F\\u10FB\\u1360-\\u1368\\u1400\\u166E\\u169B\\u169C\\u16EB-\\u16ED\\u1735\\u1736\\u17D4-\\u17D6\\u17D8-\\u17DA\\u1800-\\u180A\\u1944\\u1945\\u1A1E\\u1A1F\\u1AA0-\\u1AA6\\u1AA8-\\u1AAD\\u1B5A-\\u1B60\\u1B7D\\u1B7E\\u1BFC-\\u1BFF\\u1C3B-\\u1C3F\\u1C7E\\u1C7F\\u1CC0-\\u1CC7\\u1CD3\\u2010-\\u2027\\u2030-\\u2043\\u2045-\\u2051\\u2053-\\u205E\\u207D\\u207E\\u208D\\u208E\\u2308-\\u230B\\u2329\\u232A\\u2768-\\u2775\\u27C5\\u27C6\\u27E6-\\u27EF\\u2983-\\u2998\\u29D8-\\u29DB\\u29FC\\u29FD\\u2CF9-\\u2CFC\\u2CFE\\u2CFF\\u2D70\\u2E00-\\u2E2E\\u2E30-\\u2E4F\\u2E52-\\u2E5D\\u3001-\\u3003\\u3008-\\u3011\\u3014-\\u301F\\u3030\\u303D\\u30A0\\u30FB\\uA4FE\\uA4FF\\uA60D-\\uA60F\\uA673\\uA67E\\uA6F2-\\uA6F7\\uA874-\\uA877\\uA8CE\\uA8CF\\uA8F8-\\uA8FA\\uA8FC\\uA92E\\uA92F\\uA95F\\uA9C1-\\uA9CD\\uA9DE\\uA9DF\\uAA5C-\\uAA5F\\uAADE\\uAADF\\uAAF0\\uAAF1\\uABEB\\uFD3E\\uFD3F\\uFE10-\\uFE19\\uFE30-\\uFE52\\uFE54-\\uFE61\\uFE63\\uFE68\\uFE6A\\uFE6B\\uFF01-\\uFF03\\uFF05-\\uFF0A\\uFF0C-\\uFF0F\\uFF1A\\uFF1B\\uFF1F\\uFF20\\uFF3B-\\uFF3D\\uFF3F\\uFF5B\\uFF5D\\uFF5F-\\uFF65]/;","/**\n * @typedef {import('micromark-util-types').Code} Code\n */\n\nimport { unicodePunctuationRegex } from './lib/unicode-punctuation-regex.js';\n\n/**\n * Check whether the character code represents an ASCII alpha (`a` through `z`,\n * case insensitive).\n *\n * An **ASCII alpha** is an ASCII upper alpha or ASCII lower alpha.\n *\n * An **ASCII upper alpha** is a character in the inclusive range U+0041 (`A`)\n * to U+005A (`Z`).\n *\n * An **ASCII lower alpha** is a character in the inclusive range U+0061 (`a`)\n * to U+007A (`z`).\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const asciiAlpha = regexCheck(/[A-Za-z]/);\n\n/**\n * Check whether the character code represents an ASCII alphanumeric (`a`\n * through `z`, case insensitive, or `0` through `9`).\n *\n * An **ASCII alphanumeric** is an ASCII digit (see `asciiDigit`) or ASCII alpha\n * (see `asciiAlpha`).\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const asciiAlphanumeric = regexCheck(/[\\dA-Za-z]/);\n\n/**\n * Check whether the character code represents an ASCII atext.\n *\n * atext is an ASCII alphanumeric (see `asciiAlphanumeric`), or a character in\n * the inclusive ranges U+0023 NUMBER SIGN (`#`) to U+0027 APOSTROPHE (`'`),\n * U+002A ASTERISK (`*`), U+002B PLUS SIGN (`+`), U+002D DASH (`-`), U+002F\n * SLASH (`/`), U+003D EQUALS TO (`=`), U+003F QUESTION MARK (`?`), U+005E\n * CARET (`^`) to U+0060 GRAVE ACCENT (`` ` ``), or U+007B LEFT CURLY BRACE\n * (`{`) to U+007E TILDE (`~`).\n *\n * See:\n * **\\[RFC5322]**:\n * [Internet Message Format](https://tools.ietf.org/html/rfc5322).\n * P. Resnick.\n * IETF.\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const asciiAtext = regexCheck(/[#-'*+\\--9=?A-Z^-~]/);\n\n/**\n * Check whether a character code is an ASCII control character.\n *\n * An **ASCII control** is a character in the inclusive range U+0000 NULL (NUL)\n * to U+001F (US), or U+007F (DEL).\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function asciiControl(code) {\n  return (\n    // Special whitespace codes (which have negative values), C0 and Control\n    // character DEL\n    code !== null && (code < 32 || code === 127)\n  );\n}\n\n/**\n * Check whether the character code represents an ASCII digit (`0` through `9`).\n *\n * An **ASCII digit** is a character in the inclusive range U+0030 (`0`) to\n * U+0039 (`9`).\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const asciiDigit = regexCheck(/\\d/);\n\n/**\n * Check whether the character code represents an ASCII hex digit (`a` through\n * `f`, case insensitive, or `0` through `9`).\n *\n * An **ASCII hex digit** is an ASCII digit (see `asciiDigit`), ASCII upper hex\n * digit, or an ASCII lower hex digit.\n *\n * An **ASCII upper hex digit** is a character in the inclusive range U+0041\n * (`A`) to U+0046 (`F`).\n *\n * An **ASCII lower hex digit** is a character in the inclusive range U+0061\n * (`a`) to U+0066 (`f`).\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const asciiHexDigit = regexCheck(/[\\dA-Fa-f]/);\n\n/**\n * Check whether the character code represents ASCII punctuation.\n *\n * An **ASCII punctuation** is a character in the inclusive ranges U+0021\n * EXCLAMATION MARK (`!`) to U+002F SLASH (`/`), U+003A COLON (`:`) to U+0040 AT\n * SIGN (`@`), U+005B LEFT SQUARE BRACKET (`[`) to U+0060 GRAVE ACCENT\n * (`` ` ``), or U+007B LEFT CURLY BRACE (`{`) to U+007E TILDE (`~`).\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const asciiPunctuation = regexCheck(/[!-/:-@[-`{-~]/);\n\n/**\n * Check whether a character code is a markdown line ending.\n *\n * A **markdown line ending** is the virtual characters M-0003 CARRIAGE RETURN\n * LINE FEED (CRLF), M-0004 LINE FEED (LF) and M-0005 CARRIAGE RETURN (CR).\n *\n * In micromark, the actual character U+000A LINE FEED (LF) and U+000D CARRIAGE\n * RETURN (CR) are replaced by these virtual characters depending on whether\n * they occurred together.\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownLineEnding(code) {\n  return code !== null && code < -2;\n}\n\n/**\n * Check whether a character code is a markdown line ending (see\n * `markdownLineEnding`) or markdown space (see `markdownSpace`).\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownLineEndingOrSpace(code) {\n  return code !== null && (code < 0 || code === 32);\n}\n\n/**\n * Check whether a character code is a markdown space.\n *\n * A **markdown space** is the concrete character U+0020 SPACE (SP) and the\n * virtual characters M-0001 VIRTUAL SPACE (VS) and M-0002 HORIZONTAL TAB (HT).\n *\n * In micromark, the actual character U+0009 CHARACTER TABULATION (HT) is\n * replaced by one M-0002 HORIZONTAL TAB (HT) and between 0 and 3 M-0001 VIRTUAL\n * SPACE (VS) characters, depending on the column at which the tab occurred.\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownSpace(code) {\n  return code === -2 || code === -1 || code === 32;\n}\n\n// Size note: removing ASCII from the regex and using `asciiPunctuation` here\n// In fact adds to the bundle size.\n/**\n * Check whether the character code represents Unicode punctuation.\n *\n * A **Unicode punctuation** is a character in the Unicode `Pc` (Punctuation,\n * Connector), `Pd` (Punctuation, Dash), `Pe` (Punctuation, Close), `Pf`\n * (Punctuation, Final quote), `Pi` (Punctuation, Initial quote), `Po`\n * (Punctuation, Other), or `Ps` (Punctuation, Open) categories, or an ASCII\n * punctuation (see `asciiPunctuation`).\n *\n * See:\n * **\\[UNICODE]**:\n * [The Unicode Standard](https://www.unicode.org/versions/).\n * Unicode Consortium.\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const unicodePunctuation = regexCheck(unicodePunctuationRegex);\n\n/**\n * Check whether the character code represents Unicode whitespace.\n *\n * Note that this does handle micromark specific markdown whitespace characters.\n * See `markdownLineEndingOrSpace` to check that.\n *\n * A **Unicode whitespace** is a character in the Unicode `Zs` (Separator,\n * Space) category, or U+0009 CHARACTER TABULATION (HT), U+000A LINE FEED (LF),\n * U+000C (FF), or U+000D CARRIAGE RETURN (CR) (**\\[UNICODE]**).\n *\n * See:\n * **\\[UNICODE]**:\n * [The Unicode Standard](https://www.unicode.org/versions/).\n * Unicode Consortium.\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const unicodeWhitespace = regexCheck(/\\s/);\n\n/**\n * Create a code check from a regex.\n *\n * @param {RegExp} regex\n * @returns {(code: Code) => boolean}\n */\nfunction regexCheck(regex) {\n  return check;\n\n  /**\n   * Check whether a code matches the bound regex.\n   *\n   * @param {Code} code\n   *   Character code.\n   * @returns {boolean}\n   *   Whether the character code matches the bound regex.\n   */\n  function check(code) {\n    return code !== null && regex.test(String.fromCharCode(code));\n  }\n}","/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenType} TokenType\n */\n\nimport { markdownSpace } from 'micromark-util-character';\n\n// To do: implement `spaceOrTab`, `spaceOrTabMinMax`, `spaceOrTabWithOptions`.\n\n/**\n * Parse spaces and tabs.\n *\n * There is no `nok` parameter:\n *\n * *   spaces in markdown are often optional, in which case this factory can be\n *     used and `ok` will be switched to whether spaces were found or not\n * *   one line ending or space can be detected with `markdownSpace(code)` right\n *     before using `factorySpace`\n *\n * ###### Examples\n *\n * Where `␉` represents a tab (plus how much it expands) and `␠` represents a\n * single space.\n *\n * ```markdown\n * ␉\n * ␠␠␠␠\n * ␉␠\n * ```\n *\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @param {TokenType} type\n *   Type (`' \\t'`).\n * @param {number | undefined} [max=Infinity]\n *   Max (exclusive).\n * @returns\n *   Start state.\n */\nexport function factorySpace(effects, ok, type, max) {\n  const limit = max ? max - 1 : Number.POSITIVE_INFINITY;\n  let size = 0;\n  return start;\n\n  /** @type {State} */\n  function start(code) {\n    if (markdownSpace(code)) {\n      effects.enter(type);\n      return prefix(code);\n    }\n    return ok(code);\n  }\n\n  /** @type {State} */\n  function prefix(code) {\n    if (markdownSpace(code) && size++ < limit) {\n      effects.consume(code);\n      return prefix;\n    }\n    effects.exit(type);\n    return ok(code);\n  }\n}","/**\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').Initializer} Initializer\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding } from 'micromark-util-character';\n/** @type {InitialConstruct} */\nexport const content = {\n  tokenize: initializeContent\n};\n\n/**\n * @this {TokenizeContext}\n * @type {Initializer}\n */\nfunction initializeContent(effects) {\n  const contentStart = effects.attempt(this.parser.constructs.contentInitial, afterContentStartConstruct, paragraphInitial);\n  /** @type {Token} */\n  let previous;\n  return contentStart;\n\n  /** @type {State} */\n  function afterContentStartConstruct(code) {\n    if (code === null) {\n      effects.consume(code);\n      return;\n    }\n    effects.enter('lineEnding');\n    effects.consume(code);\n    effects.exit('lineEnding');\n    return factorySpace(effects, contentStart, 'linePrefix');\n  }\n\n  /** @type {State} */\n  function paragraphInitial(code) {\n    effects.enter('paragraph');\n    return lineStart(code);\n  }\n\n  /** @type {State} */\n  function lineStart(code) {\n    const token = effects.enter('chunkText', {\n      contentType: 'text',\n      previous\n    });\n    if (previous) {\n      previous.next = token;\n    }\n    previous = token;\n    return data(code);\n  }\n\n  /** @type {State} */\n  function data(code) {\n    if (code === null) {\n      effects.exit('chunkText');\n      effects.exit('paragraph');\n      effects.consume(code);\n      return;\n    }\n    if (markdownLineEnding(code)) {\n      effects.consume(code);\n      effects.exit('chunkText');\n      return lineStart;\n    }\n\n    // Data.\n    effects.consume(code);\n    return data;\n  }\n}","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').ContainerState} ContainerState\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').Initializer} Initializer\n * @typedef {import('micromark-util-types').Point} Point\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\n/**\n * @typedef {[Construct, ContainerState]} StackItem\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding } from 'micromark-util-character';\nimport { splice } from 'micromark-util-chunked';\n/** @type {InitialConstruct} */\nexport const document = {\n  tokenize: initializeDocument\n};\n\n/** @type {Construct} */\nconst containerConstruct = {\n  tokenize: tokenizeContainer\n};\n\n/**\n * @this {TokenizeContext}\n * @type {Initializer}\n */\nfunction initializeDocument(effects) {\n  const self = this;\n  /** @type {Array<StackItem>} */\n  const stack = [];\n  let continued = 0;\n  /** @type {TokenizeContext | undefined} */\n  let childFlow;\n  /** @type {Token | undefined} */\n  let childToken;\n  /** @type {number} */\n  let lineStartOffset;\n  return start;\n\n  /** @type {State} */\n  function start(code) {\n    // First we iterate through the open blocks, starting with the root\n    // document, and descending through last children down to the last open\n    // block.\n    // Each block imposes a condition that the line must satisfy if the block is\n    // to remain open.\n    // For example, a block quote requires a `>` character.\n    // A paragraph requires a non-blank line.\n    // In this phase we may match all or just some of the open blocks.\n    // But we cannot close unmatched blocks yet, because we may have a lazy\n    // continuation line.\n    if (continued < stack.length) {\n      const item = stack[continued];\n      self.containerState = item[1];\n      return effects.attempt(item[0].continuation, documentContinue, checkNewContainers)(code);\n    }\n\n    // Done.\n    return checkNewContainers(code);\n  }\n\n  /** @type {State} */\n  function documentContinue(code) {\n    continued++;\n\n    // Note: this field is called `_closeFlow` but it also closes containers.\n    // Perhaps a good idea to rename it but it’s already used in the wild by\n    // extensions.\n    if (self.containerState._closeFlow) {\n      self.containerState._closeFlow = undefined;\n      if (childFlow) {\n        closeFlow();\n      }\n\n      // Note: this algorithm for moving events around is similar to the\n      // algorithm when dealing with lazy lines in `writeToChild`.\n      const indexBeforeExits = self.events.length;\n      let indexBeforeFlow = indexBeforeExits;\n      /** @type {Point | undefined} */\n      let point;\n\n      // Find the flow chunk.\n      while (indexBeforeFlow--) {\n        if (self.events[indexBeforeFlow][0] === 'exit' && self.events[indexBeforeFlow][1].type === 'chunkFlow') {\n          point = self.events[indexBeforeFlow][1].end;\n          break;\n        }\n      }\n      exitContainers(continued);\n\n      // Fix positions.\n      let index = indexBeforeExits;\n      while (index < self.events.length) {\n        self.events[index][1].end = Object.assign({}, point);\n        index++;\n      }\n\n      // Inject the exits earlier (they’re still also at the end).\n      splice(self.events, indexBeforeFlow + 1, 0, self.events.slice(indexBeforeExits));\n\n      // Discard the duplicate exits.\n      self.events.length = index;\n      return checkNewContainers(code);\n    }\n    return start(code);\n  }\n\n  /** @type {State} */\n  function checkNewContainers(code) {\n    // Next, after consuming the continuation markers for existing blocks, we\n    // look for new block starts (e.g. `>` for a block quote).\n    // If we encounter a new block start, we close any blocks unmatched in\n    // step 1 before creating the new block as a child of the last matched\n    // block.\n    if (continued === stack.length) {\n      // No need to `check` whether there’s a container, of `exitContainers`\n      // would be moot.\n      // We can instead immediately `attempt` to parse one.\n      if (!childFlow) {\n        return documentContinued(code);\n      }\n\n      // If we have concrete content, such as block HTML or fenced code,\n      // we can’t have containers “pierce” into them, so we can immediately\n      // start.\n      if (childFlow.currentConstruct && childFlow.currentConstruct.concrete) {\n        return flowStart(code);\n      }\n\n      // If we do have flow, it could still be a blank line,\n      // but we’d be interrupting it w/ a new container if there’s a current\n      // construct.\n      // To do: next major: remove `_gfmTableDynamicInterruptHack` (no longer\n      // needed in micromark-extension-gfm-table@1.0.6).\n      self.interrupt = Boolean(childFlow.currentConstruct && !childFlow._gfmTableDynamicInterruptHack);\n    }\n\n    // Check if there is a new container.\n    self.containerState = {};\n    return effects.check(containerConstruct, thereIsANewContainer, thereIsNoNewContainer)(code);\n  }\n\n  /** @type {State} */\n  function thereIsANewContainer(code) {\n    if (childFlow) closeFlow();\n    exitContainers(continued);\n    return documentContinued(code);\n  }\n\n  /** @type {State} */\n  function thereIsNoNewContainer(code) {\n    self.parser.lazy[self.now().line] = continued !== stack.length;\n    lineStartOffset = self.now().offset;\n    return flowStart(code);\n  }\n\n  /** @type {State} */\n  function documentContinued(code) {\n    // Try new containers.\n    self.containerState = {};\n    return effects.attempt(containerConstruct, containerContinue, flowStart)(code);\n  }\n\n  /** @type {State} */\n  function containerContinue(code) {\n    continued++;\n    stack.push([self.currentConstruct, self.containerState]);\n    // Try another.\n    return documentContinued(code);\n  }\n\n  /** @type {State} */\n  function flowStart(code) {\n    if (code === null) {\n      if (childFlow) closeFlow();\n      exitContainers(0);\n      effects.consume(code);\n      return;\n    }\n    childFlow = childFlow || self.parser.flow(self.now());\n    effects.enter('chunkFlow', {\n      contentType: 'flow',\n      previous: childToken,\n      _tokenizer: childFlow\n    });\n    return flowContinue(code);\n  }\n\n  /** @type {State} */\n  function flowContinue(code) {\n    if (code === null) {\n      writeToChild(effects.exit('chunkFlow'), true);\n      exitContainers(0);\n      effects.consume(code);\n      return;\n    }\n    if (markdownLineEnding(code)) {\n      effects.consume(code);\n      writeToChild(effects.exit('chunkFlow'));\n      // Get ready for the next line.\n      continued = 0;\n      self.interrupt = undefined;\n      return start;\n    }\n    effects.consume(code);\n    return flowContinue;\n  }\n\n  /**\n   * @param {Token} token\n   * @param {boolean | undefined} [eof]\n   * @returns {void}\n   */\n  function writeToChild(token, eof) {\n    const stream = self.sliceStream(token);\n    if (eof) stream.push(null);\n    token.previous = childToken;\n    if (childToken) childToken.next = token;\n    childToken = token;\n    childFlow.defineSkip(token.start);\n    childFlow.write(stream);\n\n    // Alright, so we just added a lazy line:\n    //\n    // ```markdown\n    // > a\n    // b.\n    //\n    // Or:\n    //\n    // > ~~~c\n    // d\n    //\n    // Or:\n    //\n    // > | e |\n    // f\n    // ```\n    //\n    // The construct in the second example (fenced code) does not accept lazy\n    // lines, so it marked itself as done at the end of its first line, and\n    // then the content construct parses `d`.\n    // Most constructs in markdown match on the first line: if the first line\n    // forms a construct, a non-lazy line can’t “unmake” it.\n    //\n    // The construct in the third example is potentially a GFM table, and\n    // those are *weird*.\n    // It *could* be a table, from the first line, if the following line\n    // matches a condition.\n    // In this case, that second line is lazy, which “unmakes” the first line\n    // and turns the whole into one content block.\n    //\n    // We’ve now parsed the non-lazy and the lazy line, and can figure out\n    // whether the lazy line started a new flow block.\n    // If it did, we exit the current containers between the two flow blocks.\n    if (self.parser.lazy[token.start.line]) {\n      let index = childFlow.events.length;\n      while (index--) {\n        if (\n        // The token starts before the line ending…\n        childFlow.events[index][1].start.offset < lineStartOffset && (\n        // …and either is not ended yet…\n        !childFlow.events[index][1].end ||\n        // …or ends after it.\n        childFlow.events[index][1].end.offset > lineStartOffset)) {\n          // Exit: there’s still something open, which means it’s a lazy line\n          // part of something.\n          return;\n        }\n      }\n\n      // Note: this algorithm for moving events around is similar to the\n      // algorithm when closing flow in `documentContinue`.\n      const indexBeforeExits = self.events.length;\n      let indexBeforeFlow = indexBeforeExits;\n      /** @type {boolean | undefined} */\n      let seen;\n      /** @type {Point | undefined} */\n      let point;\n\n      // Find the previous chunk (the one before the lazy line).\n      while (indexBeforeFlow--) {\n        if (self.events[indexBeforeFlow][0] === 'exit' && self.events[indexBeforeFlow][1].type === 'chunkFlow') {\n          if (seen) {\n            point = self.events[indexBeforeFlow][1].end;\n            break;\n          }\n          seen = true;\n        }\n      }\n      exitContainers(continued);\n\n      // Fix positions.\n      index = indexBeforeExits;\n      while (index < self.events.length) {\n        self.events[index][1].end = Object.assign({}, point);\n        index++;\n      }\n\n      // Inject the exits earlier (they’re still also at the end).\n      splice(self.events, indexBeforeFlow + 1, 0, self.events.slice(indexBeforeExits));\n\n      // Discard the duplicate exits.\n      self.events.length = index;\n    }\n  }\n\n  /**\n   * @param {number} size\n   * @returns {void}\n   */\n  function exitContainers(size) {\n    let index = stack.length;\n\n    // Exit open containers.\n    while (index-- > size) {\n      const entry = stack[index];\n      self.containerState = entry[1];\n      entry[0].exit.call(self, effects);\n    }\n    stack.length = size;\n  }\n  function closeFlow() {\n    childFlow.write([null]);\n    childToken = undefined;\n    childFlow = undefined;\n    self.containerState._closeFlow = undefined;\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeContainer(effects, ok, nok) {\n  // Always populated by defaults.\n\n  return factorySpace(effects, effects.attempt(this.parser.constructs.document, ok, nok), 'linePrefix', this.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4);\n}","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding, markdownSpace } from 'micromark-util-character';\n/** @type {Construct} */\nexport const blankLine = {\n  tokenize: tokenizeBlankLine,\n  partial: true\n};\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeBlankLine(effects, ok, nok) {\n  return start;\n\n  /**\n   * Start of blank line.\n   *\n   * > 👉 **Note**: `␠` represents a space character.\n   *\n   * ```markdown\n   * > | ␠␠␊\n   *     ^\n   * > | ␊\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    return markdownSpace(code) ? factorySpace(effects, after, 'linePrefix')(code) : after(code);\n  }\n\n  /**\n   * At eof/eol, after optional whitespace.\n   *\n   * > 👉 **Note**: `␠` represents a space character.\n   *\n   * ```markdown\n   * > | ␠␠␊\n   *       ^\n   * > | ␊\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    return code === null || markdownLineEnding(code) ? ok(code) : nok(code);\n  }\n}","/**\n * @typedef {import('micromark-util-types').Chunk} Chunk\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Token} Token\n */\n\nimport { splice } from 'micromark-util-chunked';\n/**\n * Tokenize subcontent.\n *\n * @param {Array<Event>} events\n *   List of events.\n * @returns {boolean}\n *   Whether subtokens were found.\n */\nexport function subtokenize(events) {\n  /** @type {Record<string, number>} */\n  const jumps = {};\n  let index = -1;\n  /** @type {Event} */\n  let event;\n  /** @type {number | undefined} */\n  let lineIndex;\n  /** @type {number} */\n  let otherIndex;\n  /** @type {Event} */\n  let otherEvent;\n  /** @type {Array<Event>} */\n  let parameters;\n  /** @type {Array<Event>} */\n  let subevents;\n  /** @type {boolean | undefined} */\n  let more;\n  while (++index < events.length) {\n    while (index in jumps) {\n      index = jumps[index];\n    }\n    event = events[index];\n\n    // Add a hook for the GFM tasklist extension, which needs to know if text\n    // is in the first content of a list item.\n    if (index && event[1].type === 'chunkFlow' && events[index - 1][1].type === 'listItemPrefix') {\n      subevents = event[1]._tokenizer.events;\n      otherIndex = 0;\n      if (otherIndex < subevents.length && subevents[otherIndex][1].type === 'lineEndingBlank') {\n        otherIndex += 2;\n      }\n      if (otherIndex < subevents.length && subevents[otherIndex][1].type === 'content') {\n        while (++otherIndex < subevents.length) {\n          if (subevents[otherIndex][1].type === 'content') {\n            break;\n          }\n          if (subevents[otherIndex][1].type === 'chunkText') {\n            subevents[otherIndex][1]._isInFirstContentOfListItem = true;\n            otherIndex++;\n          }\n        }\n      }\n    }\n\n    // Enter.\n    if (event[0] === 'enter') {\n      if (event[1].contentType) {\n        Object.assign(jumps, subcontent(events, index));\n        index = jumps[index];\n        more = true;\n      }\n    }\n    // Exit.\n    else if (event[1]._container) {\n      otherIndex = index;\n      lineIndex = undefined;\n      while (otherIndex--) {\n        otherEvent = events[otherIndex];\n        if (otherEvent[1].type === 'lineEnding' || otherEvent[1].type === 'lineEndingBlank') {\n          if (otherEvent[0] === 'enter') {\n            if (lineIndex) {\n              events[lineIndex][1].type = 'lineEndingBlank';\n            }\n            otherEvent[1].type = 'lineEnding';\n            lineIndex = otherIndex;\n          }\n        } else {\n          break;\n        }\n      }\n      if (lineIndex) {\n        // Fix position.\n        event[1].end = Object.assign({}, events[lineIndex][1].start);\n\n        // Switch container exit w/ line endings.\n        parameters = events.slice(lineIndex, index);\n        parameters.unshift(event);\n        splice(events, lineIndex, index - lineIndex + 1, parameters);\n      }\n    }\n  }\n  return !more;\n}\n\n/**\n * Tokenize embedded tokens.\n *\n * @param {Array<Event>} events\n * @param {number} eventIndex\n * @returns {Record<string, number>}\n */\nfunction subcontent(events, eventIndex) {\n  const token = events[eventIndex][1];\n  const context = events[eventIndex][2];\n  let startPosition = eventIndex - 1;\n  /** @type {Array<number>} */\n  const startPositions = [];\n  const tokenizer = token._tokenizer || context.parser[token.contentType](token.start);\n  const childEvents = tokenizer.events;\n  /** @type {Array<[number, number]>} */\n  const jumps = [];\n  /** @type {Record<string, number>} */\n  const gaps = {};\n  /** @type {Array<Chunk>} */\n  let stream;\n  /** @type {Token | undefined} */\n  let previous;\n  let index = -1;\n  /** @type {Token | undefined} */\n  let current = token;\n  let adjust = 0;\n  let start = 0;\n  const breaks = [start];\n\n  // Loop forward through the linked tokens to pass them in order to the\n  // subtokenizer.\n  while (current) {\n    // Find the position of the event for this token.\n    while (events[++startPosition][1] !== current) {\n      // Empty.\n    }\n    startPositions.push(startPosition);\n    if (!current._tokenizer) {\n      stream = context.sliceStream(current);\n      if (!current.next) {\n        stream.push(null);\n      }\n      if (previous) {\n        tokenizer.defineSkip(current.start);\n      }\n      if (current._isInFirstContentOfListItem) {\n        tokenizer._gfmTasklistFirstContentOfListItem = true;\n      }\n      tokenizer.write(stream);\n      if (current._isInFirstContentOfListItem) {\n        tokenizer._gfmTasklistFirstContentOfListItem = undefined;\n      }\n    }\n\n    // Unravel the next token.\n    previous = current;\n    current = current.next;\n  }\n\n  // Now, loop back through all events (and linked tokens), to figure out which\n  // parts belong where.\n  current = token;\n  while (++index < childEvents.length) {\n    if (\n    // Find a void token that includes a break.\n    childEvents[index][0] === 'exit' && childEvents[index - 1][0] === 'enter' && childEvents[index][1].type === childEvents[index - 1][1].type && childEvents[index][1].start.line !== childEvents[index][1].end.line) {\n      start = index + 1;\n      breaks.push(start);\n      // Help GC.\n      current._tokenizer = undefined;\n      current.previous = undefined;\n      current = current.next;\n    }\n  }\n\n  // Help GC.\n  tokenizer.events = [];\n\n  // If there’s one more token (which is the cases for lines that end in an\n  // EOF), that’s perfect: the last point we found starts it.\n  // If there isn’t then make sure any remaining content is added to it.\n  if (current) {\n    // Help GC.\n    current._tokenizer = undefined;\n    current.previous = undefined;\n  } else {\n    breaks.pop();\n  }\n\n  // Now splice the events from the subtokenizer into the current events,\n  // moving back to front so that splice indices aren’t affected.\n  index = breaks.length;\n  while (index--) {\n    const slice = childEvents.slice(breaks[index], breaks[index + 1]);\n    const start = startPositions.pop();\n    jumps.unshift([start, start + slice.length - 1]);\n    splice(events, start, 2, slice);\n  }\n  index = -1;\n  while (++index < jumps.length) {\n    gaps[adjust + jumps[index][0]] = adjust + jumps[index][1];\n    adjust += jumps[index][1] - jumps[index][0] - 1;\n  }\n  return gaps;\n}","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding } from 'micromark-util-character';\nimport { subtokenize } from 'micromark-util-subtokenize';\n/**\n * No name because it must not be turned off.\n * @type {Construct}\n */\nexport const content = {\n  tokenize: tokenizeContent,\n  resolve: resolveContent\n};\n\n/** @type {Construct} */\nconst continuationConstruct = {\n  tokenize: tokenizeContinuation,\n  partial: true\n};\n\n/**\n * Content is transparent: it’s parsed right now. That way, definitions are also\n * parsed right now: before text in paragraphs (specifically, media) are parsed.\n *\n * @type {Resolver}\n */\nfunction resolveContent(events) {\n  subtokenize(events);\n  return events;\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeContent(effects, ok) {\n  /** @type {Token | undefined} */\n  let previous;\n  return chunkStart;\n\n  /**\n   * Before a content chunk.\n   *\n   * ```markdown\n   * > | abc\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function chunkStart(code) {\n    effects.enter('content');\n    previous = effects.enter('chunkContent', {\n      contentType: 'content'\n    });\n    return chunkInside(code);\n  }\n\n  /**\n   * In a content chunk.\n   *\n   * ```markdown\n   * > | abc\n   *     ^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function chunkInside(code) {\n    if (code === null) {\n      return contentEnd(code);\n    }\n\n    // To do: in `markdown-rs`, each line is parsed on its own, and everything\n    // is stitched together resolving.\n    if (markdownLineEnding(code)) {\n      return effects.check(continuationConstruct, contentContinue, contentEnd)(code);\n    }\n\n    // Data.\n    effects.consume(code);\n    return chunkInside;\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function contentEnd(code) {\n    effects.exit('chunkContent');\n    effects.exit('content');\n    return ok(code);\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function contentContinue(code) {\n    effects.consume(code);\n    effects.exit('chunkContent');\n    previous.next = effects.enter('chunkContent', {\n      contentType: 'content',\n      previous\n    });\n    previous = previous.next;\n    return chunkInside;\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeContinuation(effects, ok, nok) {\n  const self = this;\n  return startLookahead;\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function startLookahead(code) {\n    effects.exit('chunkContent');\n    effects.enter('lineEnding');\n    effects.consume(code);\n    effects.exit('lineEnding');\n    return factorySpace(effects, prefixed, 'linePrefix');\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function prefixed(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return nok(code);\n    }\n\n    // Always populated by defaults.\n\n    const tail = self.events[self.events.length - 1];\n    if (!self.parser.constructs.disable.null.includes('codeIndented') && tail && tail[1].type === 'linePrefix' && tail[2].sliceSerialize(tail[1], true).length >= 4) {\n      return ok(code);\n    }\n    return effects.interrupt(self.parser.constructs.flow, nok, ok)(code);\n  }\n}","/**\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').Initializer} Initializer\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n */\n\nimport { blankLine, content } from 'micromark-core-commonmark';\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding } from 'micromark-util-character';\n/** @type {InitialConstruct} */\nexport const flow = {\n  tokenize: initializeFlow\n};\n\n/**\n * @this {TokenizeContext}\n * @type {Initializer}\n */\nfunction initializeFlow(effects) {\n  const self = this;\n  const initial = effects.attempt(\n  // Try to parse a blank line.\n  blankLine, atBlankEnding,\n  // Try to parse initial flow (essentially, only code).\n  effects.attempt(this.parser.constructs.flowInitial, afterConstruct, factorySpace(effects, effects.attempt(this.parser.constructs.flow, afterConstruct, effects.attempt(content, afterConstruct)), 'linePrefix')));\n  return initial;\n\n  /** @type {State} */\n  function atBlankEnding(code) {\n    if (code === null) {\n      effects.consume(code);\n      return;\n    }\n    effects.enter('lineEndingBlank');\n    effects.consume(code);\n    effects.exit('lineEndingBlank');\n    self.currentConstruct = undefined;\n    return initial;\n  }\n\n  /** @type {State} */\n  function afterConstruct(code) {\n    if (code === null) {\n      effects.consume(code);\n      return;\n    }\n    effects.enter('lineEnding');\n    effects.consume(code);\n    effects.exit('lineEnding');\n    self.currentConstruct = undefined;\n    return initial;\n  }\n}","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').Initializer} Initializer\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n */\n\nexport const resolver = {\n  resolveAll: createResolver()\n};\nexport const string = initializeFactory('string');\nexport const text = initializeFactory('text');\n\n/**\n * @param {'string' | 'text'} field\n * @returns {InitialConstruct}\n */\nfunction initializeFactory(field) {\n  return {\n    tokenize: initializeText,\n    resolveAll: createResolver(field === 'text' ? resolveAllLineSuffixes : undefined)\n  };\n\n  /**\n   * @this {TokenizeContext}\n   * @type {Initializer}\n   */\n  function initializeText(effects) {\n    const self = this;\n    const constructs = this.parser.constructs[field];\n    const text = effects.attempt(constructs, start, notText);\n    return start;\n\n    /** @type {State} */\n    function start(code) {\n      return atBreak(code) ? text(code) : notText(code);\n    }\n\n    /** @type {State} */\n    function notText(code) {\n      if (code === null) {\n        effects.consume(code);\n        return;\n      }\n      effects.enter('data');\n      effects.consume(code);\n      return data;\n    }\n\n    /** @type {State} */\n    function data(code) {\n      if (atBreak(code)) {\n        effects.exit('data');\n        return text(code);\n      }\n\n      // Data.\n      effects.consume(code);\n      return data;\n    }\n\n    /**\n     * @param {Code} code\n     * @returns {boolean}\n     */\n    function atBreak(code) {\n      if (code === null) {\n        return true;\n      }\n      const list = constructs[code];\n      let index = -1;\n      if (list) {\n        // Always populated by defaults.\n\n        while (++index < list.length) {\n          const item = list[index];\n          if (!item.previous || item.previous.call(self, self.previous)) {\n            return true;\n          }\n        }\n      }\n      return false;\n    }\n  }\n}\n\n/**\n * @param {Resolver | undefined} [extraResolver]\n * @returns {Resolver}\n */\nfunction createResolver(extraResolver) {\n  return resolveAllText;\n\n  /** @type {Resolver} */\n  function resolveAllText(events, context) {\n    let index = -1;\n    /** @type {number | undefined} */\n    let enter;\n\n    // A rather boring computation (to merge adjacent `data` events) which\n    // improves mm performance by 29%.\n    while (++index <= events.length) {\n      if (enter === undefined) {\n        if (events[index] && events[index][1].type === 'data') {\n          enter = index;\n          index++;\n        }\n      } else if (!events[index] || events[index][1].type !== 'data') {\n        // Don’t do anything if there is one data token.\n        if (index !== enter + 2) {\n          events[enter][1].end = events[index - 1][1].end;\n          events.splice(enter + 2, index - enter - 2);\n          index = enter + 2;\n        }\n        enter = undefined;\n      }\n    }\n    return extraResolver ? extraResolver(events, context) : events;\n  }\n}\n\n/**\n * A rather ugly set of instructions which again looks at chunks in the input\n * stream.\n * The reason to do this here is that it is *much* faster to parse in reverse.\n * And that we can’t hook into `null` to split the line suffix before an EOF.\n * To do: figure out if we can make this into a clean utility, or even in core.\n * As it will be useful for GFMs literal autolink extension (and maybe even\n * tables?)\n *\n * @type {Resolver}\n */\nfunction resolveAllLineSuffixes(events, context) {\n  let eventIndex = 0; // Skip first.\n\n  while (++eventIndex <= events.length) {\n    if ((eventIndex === events.length || events[eventIndex][1].type === 'lineEnding') && events[eventIndex - 1][1].type === 'data') {\n      const data = events[eventIndex - 1][1];\n      const chunks = context.sliceStream(data);\n      let index = chunks.length;\n      let bufferIndex = -1;\n      let size = 0;\n      /** @type {boolean | undefined} */\n      let tabs;\n      while (index--) {\n        const chunk = chunks[index];\n        if (typeof chunk === 'string') {\n          bufferIndex = chunk.length;\n          while (chunk.charCodeAt(bufferIndex - 1) === 32) {\n            size++;\n            bufferIndex--;\n          }\n          if (bufferIndex) break;\n          bufferIndex = -1;\n        }\n        // Number\n        else if (chunk === -2) {\n          tabs = true;\n          size++;\n        } else if (chunk === -1) {\n          // Empty\n        } else {\n          // Replacement character, exit.\n          index++;\n          break;\n        }\n      }\n      if (size) {\n        const token = {\n          type: eventIndex === events.length || tabs || size < 2 ? 'lineSuffix' : 'hardBreakTrailing',\n          start: {\n            line: data.end.line,\n            column: data.end.column - size,\n            offset: data.end.offset - size,\n            _index: data.start._index + index,\n            _bufferIndex: index ? bufferIndex : data.start._bufferIndex + bufferIndex\n          },\n          end: Object.assign({}, data.end)\n        };\n        data.end = Object.assign({}, token.start);\n        if (data.start.offset === data.end.offset) {\n          Object.assign(data, token);\n        } else {\n          events.splice(eventIndex, 0, ['enter', token, context], ['exit', token, context]);\n          eventIndex += 2;\n        }\n      }\n      eventIndex++;\n    }\n  }\n  return events;\n}","/**\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n */\n\n/**\n * Call all `resolveAll`s.\n *\n * @param {Array<{resolveAll?: Resolver | undefined}>} constructs\n *   List of constructs, optionally with `resolveAll`s.\n * @param {Array<Event>} events\n *   List of events.\n * @param {TokenizeContext} context\n *   Context used by `tokenize`.\n * @returns {Array<Event>}\n *   Changed events.\n */\nexport function resolveAll(constructs, events, context) {\n  /** @type {Array<Resolver>} */\n  const called = [];\n  let index = -1;\n  while (++index < constructs.length) {\n    const resolve = constructs[index].resolveAll;\n    if (resolve && !called.includes(resolve)) {\n      events = resolve(events, context);\n      called.push(resolve);\n    }\n  }\n  return events;\n}","/**\n * @typedef {import('micromark-util-types').Chunk} Chunk\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').ConstructRecord} ConstructRecord\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').ParseContext} ParseContext\n * @typedef {import('micromark-util-types').Point} Point\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenType} TokenType\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n */\n\n/**\n * @callback Restore\n * @returns {void}\n *\n * @typedef Info\n * @property {Restore} restore\n * @property {number} from\n *\n * @callback ReturnHandle\n *   Handle a successful run.\n * @param {Construct} construct\n * @param {Info} info\n * @returns {void}\n */\n\nimport { markdownLineEnding } from 'micromark-util-character';\nimport { push, splice } from 'micromark-util-chunked';\nimport { resolveAll } from 'micromark-util-resolve-all';\n/**\n * Create a tokenizer.\n * Tokenizers deal with one type of data (e.g., containers, flow, text).\n * The parser is the object dealing with it all.\n * `initialize` works like other constructs, except that only its `tokenize`\n * function is used, in which case it doesn’t receive an `ok` or `nok`.\n * `from` can be given to set the point before the first character, although\n * when further lines are indented, they must be set with `defineSkip`.\n *\n * @param {ParseContext} parser\n * @param {InitialConstruct} initialize\n * @param {Omit<Point, '_bufferIndex' | '_index'> | undefined} [from]\n * @returns {TokenizeContext}\n */\nexport function createTokenizer(parser, initialize, from) {\n  /** @type {Point} */\n  let point = Object.assign(from ? Object.assign({}, from) : {\n    line: 1,\n    column: 1,\n    offset: 0\n  }, {\n    _index: 0,\n    _bufferIndex: -1\n  });\n  /** @type {Record<string, number>} */\n  const columnStart = {};\n  /** @type {Array<Construct>} */\n  const resolveAllConstructs = [];\n  /** @type {Array<Chunk>} */\n  let chunks = [];\n  /** @type {Array<Token>} */\n  let stack = [];\n  /** @type {boolean | undefined} */\n  let consumed = true;\n\n  /**\n   * Tools used for tokenizing.\n   *\n   * @type {Effects}\n   */\n  const effects = {\n    consume,\n    enter,\n    exit,\n    attempt: constructFactory(onsuccessfulconstruct),\n    check: constructFactory(onsuccessfulcheck),\n    interrupt: constructFactory(onsuccessfulcheck, {\n      interrupt: true\n    })\n  };\n\n  /**\n   * State and tools for resolving and serializing.\n   *\n   * @type {TokenizeContext}\n   */\n  const context = {\n    previous: null,\n    code: null,\n    containerState: {},\n    events: [],\n    parser,\n    sliceStream,\n    sliceSerialize,\n    now,\n    defineSkip,\n    write\n  };\n\n  /**\n   * The state function.\n   *\n   * @type {State | void}\n   */\n  let state = initialize.tokenize.call(context, effects);\n\n  /**\n   * Track which character we expect to be consumed, to catch bugs.\n   *\n   * @type {Code}\n   */\n  let expectedCode;\n  if (initialize.resolveAll) {\n    resolveAllConstructs.push(initialize);\n  }\n  return context;\n\n  /** @type {TokenizeContext['write']} */\n  function write(slice) {\n    chunks = push(chunks, slice);\n    main();\n\n    // Exit if we’re not done, resolve might change stuff.\n    if (chunks[chunks.length - 1] !== null) {\n      return [];\n    }\n    addResult(initialize, 0);\n\n    // Otherwise, resolve, and exit.\n    context.events = resolveAll(resolveAllConstructs, context.events, context);\n    return context.events;\n  }\n\n  //\n  // Tools.\n  //\n\n  /** @type {TokenizeContext['sliceSerialize']} */\n  function sliceSerialize(token, expandTabs) {\n    return serializeChunks(sliceStream(token), expandTabs);\n  }\n\n  /** @type {TokenizeContext['sliceStream']} */\n  function sliceStream(token) {\n    return sliceChunks(chunks, token);\n  }\n\n  /** @type {TokenizeContext['now']} */\n  function now() {\n    // This is a hot path, so we clone manually instead of `Object.assign({}, point)`\n    const {\n      line,\n      column,\n      offset,\n      _index,\n      _bufferIndex\n    } = point;\n    return {\n      line,\n      column,\n      offset,\n      _index,\n      _bufferIndex\n    };\n  }\n\n  /** @type {TokenizeContext['defineSkip']} */\n  function defineSkip(value) {\n    columnStart[value.line] = value.column;\n    accountForPotentialSkip();\n  }\n\n  //\n  // State management.\n  //\n\n  /**\n   * Main loop (note that `_index` and `_bufferIndex` in `point` are modified by\n   * `consume`).\n   * Here is where we walk through the chunks, which either include strings of\n   * several characters, or numerical character codes.\n   * The reason to do this in a loop instead of a call is so the stack can\n   * drain.\n   *\n   * @returns {void}\n   */\n  function main() {\n    /** @type {number} */\n    let chunkIndex;\n    while (point._index < chunks.length) {\n      const chunk = chunks[point._index];\n\n      // If we’re in a buffer chunk, loop through it.\n      if (typeof chunk === 'string') {\n        chunkIndex = point._index;\n        if (point._bufferIndex < 0) {\n          point._bufferIndex = 0;\n        }\n        while (point._index === chunkIndex && point._bufferIndex < chunk.length) {\n          go(chunk.charCodeAt(point._bufferIndex));\n        }\n      } else {\n        go(chunk);\n      }\n    }\n  }\n\n  /**\n   * Deal with one code.\n   *\n   * @param {Code} code\n   * @returns {void}\n   */\n  function go(code) {\n    consumed = undefined;\n    expectedCode = code;\n    state = state(code);\n  }\n\n  /** @type {Effects['consume']} */\n  function consume(code) {\n    if (markdownLineEnding(code)) {\n      point.line++;\n      point.column = 1;\n      point.offset += code === -3 ? 2 : 1;\n      accountForPotentialSkip();\n    } else if (code !== -1) {\n      point.column++;\n      point.offset++;\n    }\n\n    // Not in a string chunk.\n    if (point._bufferIndex < 0) {\n      point._index++;\n    } else {\n      point._bufferIndex++;\n\n      // At end of string chunk.\n      // @ts-expect-error Points w/ non-negative `_bufferIndex` reference\n      // strings.\n      if (point._bufferIndex === chunks[point._index].length) {\n        point._bufferIndex = -1;\n        point._index++;\n      }\n    }\n\n    // Expose the previous character.\n    context.previous = code;\n\n    // Mark as consumed.\n    consumed = true;\n  }\n\n  /** @type {Effects['enter']} */\n  function enter(type, fields) {\n    /** @type {Token} */\n    // @ts-expect-error Patch instead of assign required fields to help GC.\n    const token = fields || {};\n    token.type = type;\n    token.start = now();\n    context.events.push(['enter', token, context]);\n    stack.push(token);\n    return token;\n  }\n\n  /** @type {Effects['exit']} */\n  function exit(type) {\n    const token = stack.pop();\n    token.end = now();\n    context.events.push(['exit', token, context]);\n    return token;\n  }\n\n  /**\n   * Use results.\n   *\n   * @type {ReturnHandle}\n   */\n  function onsuccessfulconstruct(construct, info) {\n    addResult(construct, info.from);\n  }\n\n  /**\n   * Discard results.\n   *\n   * @type {ReturnHandle}\n   */\n  function onsuccessfulcheck(_, info) {\n    info.restore();\n  }\n\n  /**\n   * Factory to attempt/check/interrupt.\n   *\n   * @param {ReturnHandle} onreturn\n   * @param {{interrupt?: boolean | undefined} | undefined} [fields]\n   */\n  function constructFactory(onreturn, fields) {\n    return hook;\n\n    /**\n     * Handle either an object mapping codes to constructs, a list of\n     * constructs, or a single construct.\n     *\n     * @param {Array<Construct> | Construct | ConstructRecord} constructs\n     * @param {State} returnState\n     * @param {State | undefined} [bogusState]\n     * @returns {State}\n     */\n    function hook(constructs, returnState, bogusState) {\n      /** @type {Array<Construct>} */\n      let listOfConstructs;\n      /** @type {number} */\n      let constructIndex;\n      /** @type {Construct} */\n      let currentConstruct;\n      /** @type {Info} */\n      let info;\n      return Array.isArray(constructs) /* c8 ignore next 1 */ ? handleListOfConstructs(constructs) : 'tokenize' in constructs ?\n      // @ts-expect-error Looks like a construct.\n      handleListOfConstructs([constructs]) : handleMapOfConstructs(constructs);\n\n      /**\n       * Handle a list of construct.\n       *\n       * @param {ConstructRecord} map\n       * @returns {State}\n       */\n      function handleMapOfConstructs(map) {\n        return start;\n\n        /** @type {State} */\n        function start(code) {\n          const def = code !== null && map[code];\n          const all = code !== null && map.null;\n          const list = [\n          // To do: add more extension tests.\n          /* c8 ignore next 2 */\n          ...(Array.isArray(def) ? def : def ? [def] : []), ...(Array.isArray(all) ? all : all ? [all] : [])];\n          return handleListOfConstructs(list)(code);\n        }\n      }\n\n      /**\n       * Handle a list of construct.\n       *\n       * @param {Array<Construct>} list\n       * @returns {State}\n       */\n      function handleListOfConstructs(list) {\n        listOfConstructs = list;\n        constructIndex = 0;\n        if (list.length === 0) {\n          return bogusState;\n        }\n        return handleConstruct(list[constructIndex]);\n      }\n\n      /**\n       * Handle a single construct.\n       *\n       * @param {Construct} construct\n       * @returns {State}\n       */\n      function handleConstruct(construct) {\n        return start;\n\n        /** @type {State} */\n        function start(code) {\n          // To do: not needed to store if there is no bogus state, probably?\n          // Currently doesn’t work because `inspect` in document does a check\n          // w/o a bogus, which doesn’t make sense. But it does seem to help perf\n          // by not storing.\n          info = store();\n          currentConstruct = construct;\n          if (!construct.partial) {\n            context.currentConstruct = construct;\n          }\n\n          // Always populated by defaults.\n\n          if (construct.name && context.parser.constructs.disable.null.includes(construct.name)) {\n            return nok(code);\n          }\n          return construct.tokenize.call(\n          // If we do have fields, create an object w/ `context` as its\n          // prototype.\n          // This allows a “live binding”, which is needed for `interrupt`.\n          fields ? Object.assign(Object.create(context), fields) : context, effects, ok, nok)(code);\n        }\n      }\n\n      /** @type {State} */\n      function ok(code) {\n        consumed = true;\n        onreturn(currentConstruct, info);\n        return returnState;\n      }\n\n      /** @type {State} */\n      function nok(code) {\n        consumed = true;\n        info.restore();\n        if (++constructIndex < listOfConstructs.length) {\n          return handleConstruct(listOfConstructs[constructIndex]);\n        }\n        return bogusState;\n      }\n    }\n  }\n\n  /**\n   * @param {Construct} construct\n   * @param {number} from\n   * @returns {void}\n   */\n  function addResult(construct, from) {\n    if (construct.resolveAll && !resolveAllConstructs.includes(construct)) {\n      resolveAllConstructs.push(construct);\n    }\n    if (construct.resolve) {\n      splice(context.events, from, context.events.length - from, construct.resolve(context.events.slice(from), context));\n    }\n    if (construct.resolveTo) {\n      context.events = construct.resolveTo(context.events, context);\n    }\n  }\n\n  /**\n   * Store state.\n   *\n   * @returns {Info}\n   */\n  function store() {\n    const startPoint = now();\n    const startPrevious = context.previous;\n    const startCurrentConstruct = context.currentConstruct;\n    const startEventsIndex = context.events.length;\n    const startStack = Array.from(stack);\n    return {\n      restore,\n      from: startEventsIndex\n    };\n\n    /**\n     * Restore state.\n     *\n     * @returns {void}\n     */\n    function restore() {\n      point = startPoint;\n      context.previous = startPrevious;\n      context.currentConstruct = startCurrentConstruct;\n      context.events.length = startEventsIndex;\n      stack = startStack;\n      accountForPotentialSkip();\n    }\n  }\n\n  /**\n   * Move the current point a bit forward in the line when it’s on a column\n   * skip.\n   *\n   * @returns {void}\n   */\n  function accountForPotentialSkip() {\n    if (point.line in columnStart && point.column < 2) {\n      point.column = columnStart[point.line];\n      point.offset += columnStart[point.line] - 1;\n    }\n  }\n}\n\n/**\n * Get the chunks from a slice of chunks in the range of a token.\n *\n * @param {Array<Chunk>} chunks\n * @param {Pick<Token, 'end' | 'start'>} token\n * @returns {Array<Chunk>}\n */\nfunction sliceChunks(chunks, token) {\n  const startIndex = token.start._index;\n  const startBufferIndex = token.start._bufferIndex;\n  const endIndex = token.end._index;\n  const endBufferIndex = token.end._bufferIndex;\n  /** @type {Array<Chunk>} */\n  let view;\n  if (startIndex === endIndex) {\n    // @ts-expect-error `_bufferIndex` is used on string chunks.\n    view = [chunks[startIndex].slice(startBufferIndex, endBufferIndex)];\n  } else {\n    view = chunks.slice(startIndex, endIndex);\n    if (startBufferIndex > -1) {\n      const head = view[0];\n      if (typeof head === 'string') {\n        view[0] = head.slice(startBufferIndex);\n      } else {\n        view.shift();\n      }\n    }\n    if (endBufferIndex > 0) {\n      // @ts-expect-error `_bufferIndex` is used on string chunks.\n      view.push(chunks[endIndex].slice(0, endBufferIndex));\n    }\n  }\n  return view;\n}\n\n/**\n * Get the string value of a slice of chunks.\n *\n * @param {Array<Chunk>} chunks\n * @param {boolean | undefined} [expandTabs=false]\n * @returns {string}\n */\nfunction serializeChunks(chunks, expandTabs) {\n  let index = -1;\n  /** @type {Array<string>} */\n  const result = [];\n  /** @type {boolean | undefined} */\n  let atTab;\n  while (++index < chunks.length) {\n    const chunk = chunks[index];\n    /** @type {string} */\n    let value;\n    if (typeof chunk === 'string') {\n      value = chunk;\n    } else switch (chunk) {\n      case -5:\n        {\n          value = '\\r';\n          break;\n        }\n      case -4:\n        {\n          value = '\\n';\n          break;\n        }\n      case -3:\n        {\n          value = '\\r' + '\\n';\n          break;\n        }\n      case -2:\n        {\n          value = expandTabs ? ' ' : '\\t';\n          break;\n        }\n      case -1:\n        {\n          if (!expandTabs && atTab) continue;\n          value = ' ';\n          break;\n        }\n      default:\n        {\n          // Currently only replacement character.\n          value = String.fromCharCode(chunk);\n        }\n    }\n    atTab = chunk === -2;\n    result.push(value);\n  }\n  return result.join('');\n}","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding, markdownSpace } from 'micromark-util-character';\n/** @type {Construct} */\nexport const thematicBreak = {\n  name: 'thematicBreak',\n  tokenize: tokenizeThematicBreak\n};\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeThematicBreak(effects, ok, nok) {\n  let size = 0;\n  /** @type {NonNullable<Code>} */\n  let marker;\n  return start;\n\n  /**\n   * Start of thematic break.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('thematicBreak');\n    // To do: parse indent like `markdown-rs`.\n    return before(code);\n  }\n\n  /**\n   * After optional whitespace, at marker.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    marker = code;\n    return atBreak(code);\n  }\n\n  /**\n   * After something, before something else.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (code === marker) {\n      effects.enter('thematicBreakSequence');\n      return sequence(code);\n    }\n    if (size >= 3 && (code === null || markdownLineEnding(code))) {\n      effects.exit('thematicBreak');\n      return ok(code);\n    }\n    return nok(code);\n  }\n\n  /**\n   * In sequence.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequence(code) {\n    if (code === marker) {\n      effects.consume(code);\n      size++;\n      return sequence;\n    }\n    effects.exit('thematicBreakSequence');\n    return markdownSpace(code) ? factorySpace(effects, atBreak, 'whitespace')(code) : atBreak(code);\n  }\n}","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').ContainerState} ContainerState\n * @typedef {import('micromark-util-types').Exiter} Exiter\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { asciiDigit, markdownSpace } from 'micromark-util-character';\nimport { blankLine } from './blank-line.js';\nimport { thematicBreak } from './thematic-break.js';\n\n/** @type {Construct} */\nexport const list = {\n  name: 'list',\n  tokenize: tokenizeListStart,\n  continuation: {\n    tokenize: tokenizeListContinuation\n  },\n  exit: tokenizeListEnd\n};\n\n/** @type {Construct} */\nconst listItemPrefixWhitespaceConstruct = {\n  tokenize: tokenizeListItemPrefixWhitespace,\n  partial: true\n};\n\n/** @type {Construct} */\nconst indentConstruct = {\n  tokenize: tokenizeIndent,\n  partial: true\n};\n\n// To do: `markdown-rs` parses list items on their own and later stitches them\n// together.\n\n/**\n * @type {Tokenizer}\n * @this {TokenizeContext}\n */\nfunction tokenizeListStart(effects, ok, nok) {\n  const self = this;\n  const tail = self.events[self.events.length - 1];\n  let initialSize = tail && tail[1].type === 'linePrefix' ? tail[2].sliceSerialize(tail[1], true).length : 0;\n  let size = 0;\n  return start;\n\n  /** @type {State} */\n  function start(code) {\n    const kind = self.containerState.type || (code === 42 || code === 43 || code === 45 ? 'listUnordered' : 'listOrdered');\n    if (kind === 'listUnordered' ? !self.containerState.marker || code === self.containerState.marker : asciiDigit(code)) {\n      if (!self.containerState.type) {\n        self.containerState.type = kind;\n        effects.enter(kind, {\n          _container: true\n        });\n      }\n      if (kind === 'listUnordered') {\n        effects.enter('listItemPrefix');\n        return code === 42 || code === 45 ? effects.check(thematicBreak, nok, atMarker)(code) : atMarker(code);\n      }\n      if (!self.interrupt || code === 49) {\n        effects.enter('listItemPrefix');\n        effects.enter('listItemValue');\n        return inside(code);\n      }\n    }\n    return nok(code);\n  }\n\n  /** @type {State} */\n  function inside(code) {\n    if (asciiDigit(code) && ++size < 10) {\n      effects.consume(code);\n      return inside;\n    }\n    if ((!self.interrupt || size < 2) && (self.containerState.marker ? code === self.containerState.marker : code === 41 || code === 46)) {\n      effects.exit('listItemValue');\n      return atMarker(code);\n    }\n    return nok(code);\n  }\n\n  /**\n   * @type {State}\n   **/\n  function atMarker(code) {\n    effects.enter('listItemMarker');\n    effects.consume(code);\n    effects.exit('listItemMarker');\n    self.containerState.marker = self.containerState.marker || code;\n    return effects.check(blankLine,\n    // Can’t be empty when interrupting.\n    self.interrupt ? nok : onBlank, effects.attempt(listItemPrefixWhitespaceConstruct, endOfPrefix, otherPrefix));\n  }\n\n  /** @type {State} */\n  function onBlank(code) {\n    self.containerState.initialBlankLine = true;\n    initialSize++;\n    return endOfPrefix(code);\n  }\n\n  /** @type {State} */\n  function otherPrefix(code) {\n    if (markdownSpace(code)) {\n      effects.enter('listItemPrefixWhitespace');\n      effects.consume(code);\n      effects.exit('listItemPrefixWhitespace');\n      return endOfPrefix;\n    }\n    return nok(code);\n  }\n\n  /** @type {State} */\n  function endOfPrefix(code) {\n    self.containerState.size = initialSize + self.sliceSerialize(effects.exit('listItemPrefix'), true).length;\n    return ok(code);\n  }\n}\n\n/**\n * @type {Tokenizer}\n * @this {TokenizeContext}\n */\nfunction tokenizeListContinuation(effects, ok, nok) {\n  const self = this;\n  self.containerState._closeFlow = undefined;\n  return effects.check(blankLine, onBlank, notBlank);\n\n  /** @type {State} */\n  function onBlank(code) {\n    self.containerState.furtherBlankLines = self.containerState.furtherBlankLines || self.containerState.initialBlankLine;\n\n    // We have a blank line.\n    // Still, try to consume at most the items size.\n    return factorySpace(effects, ok, 'listItemIndent', self.containerState.size + 1)(code);\n  }\n\n  /** @type {State} */\n  function notBlank(code) {\n    if (self.containerState.furtherBlankLines || !markdownSpace(code)) {\n      self.containerState.furtherBlankLines = undefined;\n      self.containerState.initialBlankLine = undefined;\n      return notInCurrentItem(code);\n    }\n    self.containerState.furtherBlankLines = undefined;\n    self.containerState.initialBlankLine = undefined;\n    return effects.attempt(indentConstruct, ok, notInCurrentItem)(code);\n  }\n\n  /** @type {State} */\n  function notInCurrentItem(code) {\n    // While we do continue, we signal that the flow should be closed.\n    self.containerState._closeFlow = true;\n    // As we’re closing flow, we’re no longer interrupting.\n    self.interrupt = undefined;\n    // Always populated by defaults.\n\n    return factorySpace(effects, effects.attempt(list, ok, nok), 'linePrefix', self.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4)(code);\n  }\n}\n\n/**\n * @type {Tokenizer}\n * @this {TokenizeContext}\n */\nfunction tokenizeIndent(effects, ok, nok) {\n  const self = this;\n  return factorySpace(effects, afterPrefix, 'listItemIndent', self.containerState.size + 1);\n\n  /** @type {State} */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1];\n    return tail && tail[1].type === 'listItemIndent' && tail[2].sliceSerialize(tail[1], true).length === self.containerState.size ? ok(code) : nok(code);\n  }\n}\n\n/**\n * @type {Exiter}\n * @this {TokenizeContext}\n */\nfunction tokenizeListEnd(effects) {\n  effects.exit(this.containerState.type);\n}\n\n/**\n * @type {Tokenizer}\n * @this {TokenizeContext}\n */\nfunction tokenizeListItemPrefixWhitespace(effects, ok, nok) {\n  const self = this;\n\n  // Always populated by defaults.\n\n  return factorySpace(effects, afterPrefix, 'listItemPrefixWhitespace', self.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4 + 1);\n\n  /** @type {State} */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1];\n    return !markdownSpace(code) && tail && tail[1].type === 'listItemPrefixWhitespace' ? ok(code) : nok(code);\n  }\n}","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Exiter} Exiter\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownSpace } from 'micromark-util-character';\n/** @type {Construct} */\nexport const blockQuote = {\n  name: 'blockQuote',\n  tokenize: tokenizeBlockQuoteStart,\n  continuation: {\n    tokenize: tokenizeBlockQuoteContinuation\n  },\n  exit\n};\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeBlockQuoteStart(effects, ok, nok) {\n  const self = this;\n  return start;\n\n  /**\n   * Start of block quote.\n   *\n   * ```markdown\n   * > | > a\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (code === 62) {\n      const state = self.containerState;\n      if (!state.open) {\n        effects.enter('blockQuote', {\n          _container: true\n        });\n        state.open = true;\n      }\n      effects.enter('blockQuotePrefix');\n      effects.enter('blockQuoteMarker');\n      effects.consume(code);\n      effects.exit('blockQuoteMarker');\n      return after;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After `>`, before optional whitespace.\n   *\n   * ```markdown\n   * > | > a\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    if (markdownSpace(code)) {\n      effects.enter('blockQuotePrefixWhitespace');\n      effects.consume(code);\n      effects.exit('blockQuotePrefixWhitespace');\n      effects.exit('blockQuotePrefix');\n      return ok;\n    }\n    effects.exit('blockQuotePrefix');\n    return ok(code);\n  }\n}\n\n/**\n * Start of block quote continuation.\n *\n * ```markdown\n *   | > a\n * > | > b\n *     ^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeBlockQuoteContinuation(effects, ok, nok) {\n  const self = this;\n  return contStart;\n\n  /**\n   * Start of block quote continuation.\n   *\n   * Also used to parse the first block quote opening.\n   *\n   * ```markdown\n   *   | > a\n   * > | > b\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function contStart(code) {\n    if (markdownSpace(code)) {\n      // Always populated by defaults.\n\n      return factorySpace(effects, contBefore, 'linePrefix', self.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4)(code);\n    }\n    return contBefore(code);\n  }\n\n  /**\n   * At `>`, after optional whitespace.\n   *\n   * Also used to parse the first block quote opening.\n   *\n   * ```markdown\n   *   | > a\n   * > | > b\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function contBefore(code) {\n    return effects.attempt(blockQuote, ok, nok)(code);\n  }\n}\n\n/** @type {Exiter} */\nfunction exit(effects) {\n  effects.exit('blockQuote');\n}","/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenType} TokenType\n */\n\nimport { asciiControl, markdownLineEndingOrSpace, markdownLineEnding } from 'micromark-util-character';\n/**\n * Parse destinations.\n *\n * ###### Examples\n *\n * ```markdown\n * <a>\n * <a\\>b>\n * <a b>\n * <a)>\n * a\n * a\\)b\n * a(b)c\n * a(b)\n * ```\n *\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @param {State} nok\n *   State switched to when unsuccessful.\n * @param {TokenType} type\n *   Type for whole (`<a>` or `b`).\n * @param {TokenType} literalType\n *   Type when enclosed (`<a>`).\n * @param {TokenType} literalMarkerType\n *   Type for enclosing (`<` and `>`).\n * @param {TokenType} rawType\n *   Type when not enclosed (`b`).\n * @param {TokenType} stringType\n *   Type for the value (`a` or `b`).\n * @param {number | undefined} [max=Infinity]\n *   Depth of nested parens (inclusive).\n * @returns {State}\n *   Start state.\n */ // eslint-disable-next-line max-params\nexport function factoryDestination(effects, ok, nok, type, literalType, literalMarkerType, rawType, stringType, max) {\n  const limit = max || Number.POSITIVE_INFINITY;\n  let balance = 0;\n  return start;\n\n  /**\n   * Start of destination.\n   *\n   * ```markdown\n   * > | <aa>\n   *     ^\n   * > | aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (code === 60) {\n      effects.enter(type);\n      effects.enter(literalType);\n      effects.enter(literalMarkerType);\n      effects.consume(code);\n      effects.exit(literalMarkerType);\n      return enclosedBefore;\n    }\n\n    // ASCII control, space, closing paren.\n    if (code === null || code === 32 || code === 41 || asciiControl(code)) {\n      return nok(code);\n    }\n    effects.enter(type);\n    effects.enter(rawType);\n    effects.enter(stringType);\n    effects.enter('chunkString', {\n      contentType: 'string'\n    });\n    return raw(code);\n  }\n\n  /**\n   * After `<`, at an enclosed destination.\n   *\n   * ```markdown\n   * > | <aa>\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function enclosedBefore(code) {\n    if (code === 62) {\n      effects.enter(literalMarkerType);\n      effects.consume(code);\n      effects.exit(literalMarkerType);\n      effects.exit(literalType);\n      effects.exit(type);\n      return ok;\n    }\n    effects.enter(stringType);\n    effects.enter('chunkString', {\n      contentType: 'string'\n    });\n    return enclosed(code);\n  }\n\n  /**\n   * In enclosed destination.\n   *\n   * ```markdown\n   * > | <aa>\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function enclosed(code) {\n    if (code === 62) {\n      effects.exit('chunkString');\n      effects.exit(stringType);\n      return enclosedBefore(code);\n    }\n    if (code === null || code === 60 || markdownLineEnding(code)) {\n      return nok(code);\n    }\n    effects.consume(code);\n    return code === 92 ? enclosedEscape : enclosed;\n  }\n\n  /**\n   * After `\\`, at a special character.\n   *\n   * ```markdown\n   * > | <a\\*a>\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function enclosedEscape(code) {\n    if (code === 60 || code === 62 || code === 92) {\n      effects.consume(code);\n      return enclosed;\n    }\n    return enclosed(code);\n  }\n\n  /**\n   * In raw destination.\n   *\n   * ```markdown\n   * > | aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function raw(code) {\n    if (!balance && (code === null || code === 41 || markdownLineEndingOrSpace(code))) {\n      effects.exit('chunkString');\n      effects.exit(stringType);\n      effects.exit(rawType);\n      effects.exit(type);\n      return ok(code);\n    }\n    if (balance < limit && code === 40) {\n      effects.consume(code);\n      balance++;\n      return raw;\n    }\n    if (code === 41) {\n      effects.consume(code);\n      balance--;\n      return raw;\n    }\n\n    // ASCII control (but *not* `\\0`) and space and `(`.\n    // Note: in `markdown-rs`, `\\0` exists in codes, in `micromark-js` it\n    // doesn’t.\n    if (code === null || code === 32 || code === 40 || asciiControl(code)) {\n      return nok(code);\n    }\n    effects.consume(code);\n    return code === 92 ? rawEscape : raw;\n  }\n\n  /**\n   * After `\\`, at special character.\n   *\n   * ```markdown\n   * > | a\\*a\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function rawEscape(code) {\n    if (code === 40 || code === 41 || code === 92) {\n      effects.consume(code);\n      return raw;\n    }\n    return raw(code);\n  }\n}","/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').TokenType} TokenType\n */\n\nimport { markdownLineEnding, markdownSpace } from 'micromark-util-character';\n/**\n * Parse labels.\n *\n * > 👉 **Note**: labels in markdown are capped at 999 characters in the string.\n *\n * ###### Examples\n *\n * ```markdown\n * [a]\n * [a\n * b]\n * [a\\]b]\n * ```\n *\n * @this {TokenizeContext}\n *   Tokenize context.\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @param {State} nok\n *   State switched to when unsuccessful.\n * @param {TokenType} type\n *   Type of the whole label (`[a]`).\n * @param {TokenType} markerType\n *   Type for the markers (`[` and `]`).\n * @param {TokenType} stringType\n *   Type for the identifier (`a`).\n * @returns {State}\n *   Start state.\n */ // eslint-disable-next-line max-params\nexport function factoryLabel(effects, ok, nok, type, markerType, stringType) {\n  const self = this;\n  let size = 0;\n  /** @type {boolean} */\n  let seen;\n  return start;\n\n  /**\n   * Start of label.\n   *\n   * ```markdown\n   * > | [a]\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(type);\n    effects.enter(markerType);\n    effects.consume(code);\n    effects.exit(markerType);\n    effects.enter(stringType);\n    return atBreak;\n  }\n\n  /**\n   * In label, at something, before something else.\n   *\n   * ```markdown\n   * > | [a]\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (size > 999 || code === null || code === 91 || code === 93 && !seen ||\n    // To do: remove in the future once we’ve switched from\n    // `micromark-extension-footnote` to `micromark-extension-gfm-footnote`,\n    // which doesn’t need this.\n    // Hidden footnotes hook.\n    /* c8 ignore next 3 */\n    code === 94 && !size && '_hiddenFootnoteSupport' in self.parser.constructs) {\n      return nok(code);\n    }\n    if (code === 93) {\n      effects.exit(stringType);\n      effects.enter(markerType);\n      effects.consume(code);\n      effects.exit(markerType);\n      effects.exit(type);\n      return ok;\n    }\n\n    // To do: indent? Link chunks and EOLs together?\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding');\n      effects.consume(code);\n      effects.exit('lineEnding');\n      return atBreak;\n    }\n    effects.enter('chunkString', {\n      contentType: 'string'\n    });\n    return labelInside(code);\n  }\n\n  /**\n   * In label, in text.\n   *\n   * ```markdown\n   * > | [a]\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelInside(code) {\n    if (code === null || code === 91 || code === 93 || markdownLineEnding(code) || size++ > 999) {\n      effects.exit('chunkString');\n      return atBreak(code);\n    }\n    effects.consume(code);\n    if (!seen) seen = !markdownSpace(code);\n    return code === 92 ? labelEscape : labelInside;\n  }\n\n  /**\n   * After `\\`, at a special character.\n   *\n   * ```markdown\n   * > | [a\\*a]\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelEscape(code) {\n    if (code === 91 || code === 92 || code === 93) {\n      effects.consume(code);\n      size++;\n      return labelInside;\n    }\n    return labelInside(code);\n  }\n}","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenType} TokenType\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding } from 'micromark-util-character';\n/**\n * Parse titles.\n *\n * ###### Examples\n *\n * ```markdown\n * \"a\"\n * 'b'\n * (c)\n * \"a\n * b\"\n * 'a\n *     b'\n * (a\\)b)\n * ```\n *\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @param {State} nok\n *   State switched to when unsuccessful.\n * @param {TokenType} type\n *   Type of the whole title (`\"a\"`, `'b'`, `(c)`).\n * @param {TokenType} markerType\n *   Type for the markers (`\"`, `'`, `(`, and `)`).\n * @param {TokenType} stringType\n *   Type for the value (`a`).\n * @returns {State}\n *   Start state.\n */ // eslint-disable-next-line max-params\nexport function factoryTitle(effects, ok, nok, type, markerType, stringType) {\n  /** @type {NonNullable<Code>} */\n  let marker;\n  return start;\n\n  /**\n   * Start of title.\n   *\n   * ```markdown\n   * > | \"a\"\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (code === 34 || code === 39 || code === 40) {\n      effects.enter(type);\n      effects.enter(markerType);\n      effects.consume(code);\n      effects.exit(markerType);\n      marker = code === 40 ? 41 : code;\n      return begin;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After opening marker.\n   *\n   * This is also used at the closing marker.\n   *\n   * ```markdown\n   * > | \"a\"\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function begin(code) {\n    if (code === marker) {\n      effects.enter(markerType);\n      effects.consume(code);\n      effects.exit(markerType);\n      effects.exit(type);\n      return ok;\n    }\n    effects.enter(stringType);\n    return atBreak(code);\n  }\n\n  /**\n   * At something, before something else.\n   *\n   * ```markdown\n   * > | \"a\"\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (code === marker) {\n      effects.exit(stringType);\n      return begin(marker);\n    }\n    if (code === null) {\n      return nok(code);\n    }\n\n    // Note: blank lines can’t exist in content.\n    if (markdownLineEnding(code)) {\n      // To do: use `space_or_tab_eol_with_options`, connect.\n      effects.enter('lineEnding');\n      effects.consume(code);\n      effects.exit('lineEnding');\n      return factorySpace(effects, atBreak, 'linePrefix');\n    }\n    effects.enter('chunkString', {\n      contentType: 'string'\n    });\n    return inside(code);\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    if (code === marker || code === null || markdownLineEnding(code)) {\n      effects.exit('chunkString');\n      return atBreak(code);\n    }\n    effects.consume(code);\n    return code === 92 ? escape : inside;\n  }\n\n  /**\n   * After `\\`, at a special character.\n   *\n   * ```markdown\n   * > | \"a\\*b\"\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function escape(code) {\n    if (code === marker || code === 92) {\n      effects.consume(code);\n      return inside;\n    }\n    return inside(code);\n  }\n}","/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding, markdownSpace } from 'micromark-util-character';\n/**\n * Parse spaces and tabs.\n *\n * There is no `nok` parameter:\n *\n * *   line endings or spaces in markdown are often optional, in which case this\n *     factory can be used and `ok` will be switched to whether spaces were found\n *     or not\n * *   one line ending or space can be detected with\n *     `markdownLineEndingOrSpace(code)` right before using `factoryWhitespace`\n *\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @returns\n *   Start state.\n */\nexport function factoryWhitespace(effects, ok) {\n  /** @type {boolean} */\n  let seen;\n  return start;\n\n  /** @type {State} */\n  function start(code) {\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding');\n      effects.consume(code);\n      effects.exit('lineEnding');\n      seen = true;\n      return start;\n    }\n    if (markdownSpace(code)) {\n      return factorySpace(effects, start, seen ? 'linePrefix' : 'lineSuffix')(code);\n    }\n    return ok(code);\n  }\n}","/**\n * Normalize an identifier (as found in references, definitions).\n *\n * Collapses markdown whitespace, trim, and then lower- and uppercase.\n *\n * Some characters are considered “uppercase”, such as U+03F4 (`ϴ`), but if their\n * lowercase counterpart (U+03B8 (`θ`)) is uppercased will result in a different\n * uppercase character (U+0398 (`Θ`)).\n * So, to get a canonical form, we perform both lower- and uppercase.\n *\n * Using uppercase last makes sure keys will never interact with default\n * prototypal values (such as `constructor`): nothing in the prototype of\n * `Object` is uppercase.\n *\n * @param {string} value\n *   Identifier to normalize.\n * @returns {string}\n *   Normalized identifier.\n */\nexport function normalizeIdentifier(value) {\n  return value\n  // Collapse markdown whitespace.\n  .replace(/[\\t\\n\\r ]+/g, ' ')\n  // Trim.\n  .replace(/^ | $/g, '')\n  // Some characters are considered “uppercase”, but if their lowercase\n  // counterpart is uppercased will result in a different uppercase\n  // character.\n  // Hence, to get that form, we perform both lower- and uppercase.\n  // Upper case makes sure keys will not interact with default prototypal\n  // methods: no method is uppercase.\n  .toLowerCase().toUpperCase();\n}","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport { factoryDestination } from 'micromark-factory-destination';\nimport { factoryLabel } from 'micromark-factory-label';\nimport { factorySpace } from 'micromark-factory-space';\nimport { factoryTitle } from 'micromark-factory-title';\nimport { factoryWhitespace } from 'micromark-factory-whitespace';\nimport { markdownLineEnding, markdownLineEndingOrSpace, markdownSpace } from 'micromark-util-character';\nimport { normalizeIdentifier } from 'micromark-util-normalize-identifier';\n/** @type {Construct} */\nexport const definition = {\n  name: 'definition',\n  tokenize: tokenizeDefinition\n};\n\n/** @type {Construct} */\nconst titleBefore = {\n  tokenize: tokenizeTitleBefore,\n  partial: true\n};\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeDefinition(effects, ok, nok) {\n  const self = this;\n  /** @type {string} */\n  let identifier;\n  return start;\n\n  /**\n   * At start of a definition.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // Do not interrupt paragraphs (but do follow definitions).\n    // To do: do `interrupt` the way `markdown-rs` does.\n    // To do: parse whitespace the way `markdown-rs` does.\n    effects.enter('definition');\n    return before(code);\n  }\n\n  /**\n   * After optional whitespace, at `[`.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    // To do: parse whitespace the way `markdown-rs` does.\n\n    return factoryLabel.call(self, effects, labelAfter,\n    // Note: we don’t need to reset the way `markdown-rs` does.\n    nok, 'definitionLabel', 'definitionLabelMarker', 'definitionLabelString')(code);\n  }\n\n  /**\n   * After label.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelAfter(code) {\n    identifier = normalizeIdentifier(self.sliceSerialize(self.events[self.events.length - 1][1]).slice(1, -1));\n    if (code === 58) {\n      effects.enter('definitionMarker');\n      effects.consume(code);\n      effects.exit('definitionMarker');\n      return markerAfter;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After marker.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function markerAfter(code) {\n    // Note: whitespace is optional.\n    return markdownLineEndingOrSpace(code) ? factoryWhitespace(effects, destinationBefore)(code) : destinationBefore(code);\n  }\n\n  /**\n   * Before destination.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function destinationBefore(code) {\n    return factoryDestination(effects, destinationAfter,\n    // Note: we don’t need to reset the way `markdown-rs` does.\n    nok, 'definitionDestination', 'definitionDestinationLiteral', 'definitionDestinationLiteralMarker', 'definitionDestinationRaw', 'definitionDestinationString')(code);\n  }\n\n  /**\n   * After destination.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function destinationAfter(code) {\n    return effects.attempt(titleBefore, after, after)(code);\n  }\n\n  /**\n   * After definition.\n   *\n   * ```markdown\n   * > | [a]: b\n   *           ^\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    return markdownSpace(code) ? factorySpace(effects, afterWhitespace, 'whitespace')(code) : afterWhitespace(code);\n  }\n\n  /**\n   * After definition, after optional whitespace.\n   *\n   * ```markdown\n   * > | [a]: b\n   *           ^\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function afterWhitespace(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('definition');\n\n      // Note: we don’t care about uniqueness.\n      // It’s likely that that doesn’t happen very frequently.\n      // It is more likely that it wastes precious time.\n      self.parser.defined.push(identifier);\n\n      // To do: `markdown-rs` interrupt.\n      // // You’d be interrupting.\n      // tokenizer.interrupt = true\n      return ok(code);\n    }\n    return nok(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeTitleBefore(effects, ok, nok) {\n  return titleBefore;\n\n  /**\n   * After destination, at whitespace.\n   *\n   * ```markdown\n   * > | [a]: b\n   *           ^\n   * > | [a]: b \"c\"\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function titleBefore(code) {\n    return markdownLineEndingOrSpace(code) ? factoryWhitespace(effects, beforeMarker)(code) : nok(code);\n  }\n\n  /**\n   * At title.\n   *\n   * ```markdown\n   *   | [a]: b\n   * > | \"c\"\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function beforeMarker(code) {\n    return factoryTitle(effects, titleAfter, nok, 'definitionTitle', 'definitionTitleMarker', 'definitionTitleString')(code);\n  }\n\n  /**\n   * After title.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function titleAfter(code) {\n    return markdownSpace(code) ? factorySpace(effects, titleAfterOptionalWhitespace, 'whitespace')(code) : titleAfterOptionalWhitespace(code);\n  }\n\n  /**\n   * After title, after optional whitespace.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function titleAfterOptionalWhitespace(code) {\n    return code === null || markdownLineEnding(code) ? ok(code) : nok(code);\n  }\n}","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding, markdownSpace } from 'micromark-util-character';\n/** @type {Construct} */\nexport const codeIndented = {\n  name: 'codeIndented',\n  tokenize: tokenizeCodeIndented\n};\n\n/** @type {Construct} */\nconst furtherStart = {\n  tokenize: tokenizeFurtherStart,\n  partial: true\n};\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeCodeIndented(effects, ok, nok) {\n  const self = this;\n  return start;\n\n  /**\n   * Start of code (indented).\n   *\n   * > **Parsing note**: it is not needed to check if this first line is a\n   * > filled line (that it has a non-whitespace character), because blank lines\n   * > are parsed already, so we never run into that.\n   *\n   * ```markdown\n   * > |     aaa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // To do: manually check if interrupting like `markdown-rs`.\n\n    effects.enter('codeIndented');\n    // To do: use an improved `space_or_tab` function like `markdown-rs`,\n    // so that we can drop the next state.\n    return factorySpace(effects, afterPrefix, 'linePrefix', 4 + 1)(code);\n  }\n\n  /**\n   * At start, after 1 or 4 spaces.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1];\n    return tail && tail[1].type === 'linePrefix' && tail[2].sliceSerialize(tail[1], true).length >= 4 ? atBreak(code) : nok(code);\n  }\n\n  /**\n   * At a break.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^  ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (code === null) {\n      return after(code);\n    }\n    if (markdownLineEnding(code)) {\n      return effects.attempt(furtherStart, atBreak, after)(code);\n    }\n    effects.enter('codeFlowValue');\n    return inside(code);\n  }\n\n  /**\n   * In code content.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('codeFlowValue');\n      return atBreak(code);\n    }\n    effects.consume(code);\n    return inside;\n  }\n\n  /** @type {State} */\n  function after(code) {\n    effects.exit('codeIndented');\n    // To do: allow interrupting like `markdown-rs`.\n    // Feel free to interrupt.\n    // tokenizer.interrupt = false\n    return ok(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeFurtherStart(effects, ok, nok) {\n  const self = this;\n  return furtherStart;\n\n  /**\n   * At eol, trying to parse another indent.\n   *\n   * ```markdown\n   * > |     aaa\n   *            ^\n   *   |     bbb\n   * ```\n   *\n   * @type {State}\n   */\n  function furtherStart(code) {\n    // To do: improve `lazy` / `pierce` handling.\n    // If this is a lazy line, it can’t be code.\n    if (self.parser.lazy[self.now().line]) {\n      return nok(code);\n    }\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding');\n      effects.consume(code);\n      effects.exit('lineEnding');\n      return furtherStart;\n    }\n\n    // To do: the code here in `micromark-js` is a bit different from\n    // `markdown-rs` because there it can attempt spaces.\n    // We can’t yet.\n    //\n    // To do: use an improved `space_or_tab` function like `markdown-rs`,\n    // so that we can drop the next state.\n    return factorySpace(effects, afterPrefix, 'linePrefix', 4 + 1)(code);\n  }\n\n  /**\n   * At start, after 1 or 4 spaces.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1];\n    return tail && tail[1].type === 'linePrefix' && tail[2].sliceSerialize(tail[1], true).length >= 4 ? ok(code) : markdownLineEnding(code) ? furtherStart(code) : nok(code);\n  }\n}","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding, markdownLineEndingOrSpace, markdownSpace } from 'micromark-util-character';\nimport { splice } from 'micromark-util-chunked';\n/** @type {Construct} */\nexport const headingAtx = {\n  name: 'headingAtx',\n  tokenize: tokenizeHeadingAtx,\n  resolve: resolveHeadingAtx\n};\n\n/** @type {Resolver} */\nfunction resolveHeadingAtx(events, context) {\n  let contentEnd = events.length - 2;\n  let contentStart = 3;\n  /** @type {Token} */\n  let content;\n  /** @type {Token} */\n  let text;\n\n  // Prefix whitespace, part of the opening.\n  if (events[contentStart][1].type === 'whitespace') {\n    contentStart += 2;\n  }\n\n  // Suffix whitespace, part of the closing.\n  if (contentEnd - 2 > contentStart && events[contentEnd][1].type === 'whitespace') {\n    contentEnd -= 2;\n  }\n  if (events[contentEnd][1].type === 'atxHeadingSequence' && (contentStart === contentEnd - 1 || contentEnd - 4 > contentStart && events[contentEnd - 2][1].type === 'whitespace')) {\n    contentEnd -= contentStart + 1 === contentEnd ? 2 : 4;\n  }\n  if (contentEnd > contentStart) {\n    content = {\n      type: 'atxHeadingText',\n      start: events[contentStart][1].start,\n      end: events[contentEnd][1].end\n    };\n    text = {\n      type: 'chunkText',\n      start: events[contentStart][1].start,\n      end: events[contentEnd][1].end,\n      contentType: 'text'\n    };\n    splice(events, contentStart, contentEnd - contentStart + 1, [['enter', content, context], ['enter', text, context], ['exit', text, context], ['exit', content, context]]);\n  }\n  return events;\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeHeadingAtx(effects, ok, nok) {\n  let size = 0;\n  return start;\n\n  /**\n   * Start of a heading (atx).\n   *\n   * ```markdown\n   * > | ## aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // To do: parse indent like `markdown-rs`.\n    effects.enter('atxHeading');\n    return before(code);\n  }\n\n  /**\n   * After optional whitespace, at `#`.\n   *\n   * ```markdown\n   * > | ## aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    effects.enter('atxHeadingSequence');\n    return sequenceOpen(code);\n  }\n\n  /**\n   * In opening sequence.\n   *\n   * ```markdown\n   * > | ## aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceOpen(code) {\n    if (code === 35 && size++ < 6) {\n      effects.consume(code);\n      return sequenceOpen;\n    }\n\n    // Always at least one `#`.\n    if (code === null || markdownLineEndingOrSpace(code)) {\n      effects.exit('atxHeadingSequence');\n      return atBreak(code);\n    }\n    return nok(code);\n  }\n\n  /**\n   * After something, before something else.\n   *\n   * ```markdown\n   * > | ## aa\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (code === 35) {\n      effects.enter('atxHeadingSequence');\n      return sequenceFurther(code);\n    }\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('atxHeading');\n      // To do: interrupt like `markdown-rs`.\n      // // Feel free to interrupt.\n      // tokenizer.interrupt = false\n      return ok(code);\n    }\n    if (markdownSpace(code)) {\n      return factorySpace(effects, atBreak, 'whitespace')(code);\n    }\n\n    // To do: generate `data` tokens, add the `text` token later.\n    // Needs edit map, see: `markdown.rs`.\n    effects.enter('atxHeadingText');\n    return data(code);\n  }\n\n  /**\n   * In further sequence (after whitespace).\n   *\n   * Could be normal “visible” hashes in the heading or a final sequence.\n   *\n   * ```markdown\n   * > | ## aa ##\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceFurther(code) {\n    if (code === 35) {\n      effects.consume(code);\n      return sequenceFurther;\n    }\n    effects.exit('atxHeadingSequence');\n    return atBreak(code);\n  }\n\n  /**\n   * In text.\n   *\n   * ```markdown\n   * > | ## aa\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function data(code) {\n    if (code === null || code === 35 || markdownLineEndingOrSpace(code)) {\n      effects.exit('atxHeadingText');\n      return atBreak(code);\n    }\n    effects.consume(code);\n    return data;\n  }\n}","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding, markdownSpace } from 'micromark-util-character';\n/** @type {Construct} */\nexport const setextUnderline = {\n  name: 'setextUnderline',\n  tokenize: tokenizeSetextUnderline,\n  resolveTo: resolveToSetextUnderline\n};\n\n/** @type {Resolver} */\nfunction resolveToSetextUnderline(events, context) {\n  // To do: resolve like `markdown-rs`.\n  let index = events.length;\n  /** @type {number | undefined} */\n  let content;\n  /** @type {number | undefined} */\n  let text;\n  /** @type {number | undefined} */\n  let definition;\n\n  // Find the opening of the content.\n  // It’ll always exist: we don’t tokenize if it isn’t there.\n  while (index--) {\n    if (events[index][0] === 'enter') {\n      if (events[index][1].type === 'content') {\n        content = index;\n        break;\n      }\n      if (events[index][1].type === 'paragraph') {\n        text = index;\n      }\n    }\n    // Exit\n    else {\n      if (events[index][1].type === 'content') {\n        // Remove the content end (if needed we’ll add it later)\n        events.splice(index, 1);\n      }\n      if (!definition && events[index][1].type === 'definition') {\n        definition = index;\n      }\n    }\n  }\n  const heading = {\n    type: 'setextHeading',\n    start: Object.assign({}, events[text][1].start),\n    end: Object.assign({}, events[events.length - 1][1].end)\n  };\n\n  // Change the paragraph to setext heading text.\n  events[text][1].type = 'setextHeadingText';\n\n  // If we have definitions in the content, we’ll keep on having content,\n  // but we need move it.\n  if (definition) {\n    events.splice(text, 0, ['enter', heading, context]);\n    events.splice(definition + 1, 0, ['exit', events[content][1], context]);\n    events[content][1].end = Object.assign({}, events[definition][1].end);\n  } else {\n    events[content][1] = heading;\n  }\n\n  // Add the heading exit at the end.\n  events.push(['exit', heading, context]);\n  return events;\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeSetextUnderline(effects, ok, nok) {\n  const self = this;\n  /** @type {NonNullable<Code>} */\n  let marker;\n  return start;\n\n  /**\n   * At start of heading (setext) underline.\n   *\n   * ```markdown\n   *   | aa\n   * > | ==\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    let index = self.events.length;\n    /** @type {boolean | undefined} */\n    let paragraph;\n    // Find an opening.\n    while (index--) {\n      // Skip enter/exit of line ending, line prefix, and content.\n      // We can now either have a definition or a paragraph.\n      if (self.events[index][1].type !== 'lineEnding' && self.events[index][1].type !== 'linePrefix' && self.events[index][1].type !== 'content') {\n        paragraph = self.events[index][1].type === 'paragraph';\n        break;\n      }\n    }\n\n    // To do: handle lazy/pierce like `markdown-rs`.\n    // To do: parse indent like `markdown-rs`.\n    if (!self.parser.lazy[self.now().line] && (self.interrupt || paragraph)) {\n      effects.enter('setextHeadingLine');\n      marker = code;\n      return before(code);\n    }\n    return nok(code);\n  }\n\n  /**\n   * After optional whitespace, at `-` or `=`.\n   *\n   * ```markdown\n   *   | aa\n   * > | ==\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    effects.enter('setextHeadingLineSequence');\n    return inside(code);\n  }\n\n  /**\n   * In sequence.\n   *\n   * ```markdown\n   *   | aa\n   * > | ==\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    if (code === marker) {\n      effects.consume(code);\n      return inside;\n    }\n    effects.exit('setextHeadingLineSequence');\n    return markdownSpace(code) ? factorySpace(effects, after, 'lineSuffix')(code) : after(code);\n  }\n\n  /**\n   * After sequence, after optional whitespace.\n   *\n   * ```markdown\n   *   | aa\n   * > | ==\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('setextHeadingLine');\n      return ok(code);\n    }\n    return nok(code);\n  }\n}","/**\n * List of lowercase HTML “block” tag names.\n *\n * The list, when parsing HTML (flow), results in more relaxed rules (condition\n * 6).\n * Because they are known blocks, the HTML-like syntax doesn’t have to be\n * strictly parsed.\n * For tag names not in this list, a more strict algorithm (condition 7) is used\n * to detect whether the HTML-like syntax is seen as HTML (flow) or not.\n *\n * This is copied from:\n * <https://spec.commonmark.org/0.30/#html-blocks>.\n *\n * > 👉 **Note**: `search` was added in `CommonMark@0.31`.\n */\nexport const htmlBlockNames = ['address', 'article', 'aside', 'base', 'basefont', 'blockquote', 'body', 'caption', 'center', 'col', 'colgroup', 'dd', 'details', 'dialog', 'dir', 'div', 'dl', 'dt', 'fieldset', 'figcaption', 'figure', 'footer', 'form', 'frame', 'frameset', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'head', 'header', 'hr', 'html', 'iframe', 'legend', 'li', 'link', 'main', 'menu', 'menuitem', 'nav', 'noframes', 'ol', 'optgroup', 'option', 'p', 'param', 'search', 'section', 'summary', 'table', 'tbody', 'td', 'tfoot', 'th', 'thead', 'title', 'tr', 'track', 'ul'];\n\n/**\n * List of lowercase HTML “raw” tag names.\n *\n * The list, when parsing HTML (flow), results in HTML that can include lines\n * without exiting, until a closing tag also in this list is found (condition\n * 1).\n *\n * This module is copied from:\n * <https://spec.commonmark.org/0.30/#html-blocks>.\n *\n * > 👉 **Note**: `textarea` was added in `CommonMark@0.30`.\n */\nexport const htmlRawNames = ['pre', 'script', 'style', 'textarea'];","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport { asciiAlpha, asciiAlphanumeric, markdownLineEnding, markdownLineEndingOrSpace, markdownSpace } from 'micromark-util-character';\nimport { htmlBlockNames, htmlRawNames } from 'micromark-util-html-tag-name';\nimport { blankLine } from './blank-line.js';\n\n/** @type {Construct} */\nexport const htmlFlow = {\n  name: 'htmlFlow',\n  tokenize: tokenizeHtmlFlow,\n  resolveTo: resolveToHtmlFlow,\n  concrete: true\n};\n\n/** @type {Construct} */\nconst blankLineBefore = {\n  tokenize: tokenizeBlankLineBefore,\n  partial: true\n};\nconst nonLazyContinuationStart = {\n  tokenize: tokenizeNonLazyContinuationStart,\n  partial: true\n};\n\n/** @type {Resolver} */\nfunction resolveToHtmlFlow(events) {\n  let index = events.length;\n  while (index--) {\n    if (events[index][0] === 'enter' && events[index][1].type === 'htmlFlow') {\n      break;\n    }\n  }\n  if (index > 1 && events[index - 2][1].type === 'linePrefix') {\n    // Add the prefix start to the HTML token.\n    events[index][1].start = events[index - 2][1].start;\n    // Add the prefix start to the HTML line token.\n    events[index + 1][1].start = events[index - 2][1].start;\n    // Remove the line prefix.\n    events.splice(index - 2, 2);\n  }\n  return events;\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeHtmlFlow(effects, ok, nok) {\n  const self = this;\n  /** @type {number} */\n  let marker;\n  /** @type {boolean} */\n  let closingTag;\n  /** @type {string} */\n  let buffer;\n  /** @type {number} */\n  let index;\n  /** @type {Code} */\n  let markerB;\n  return start;\n\n  /**\n   * Start of HTML (flow).\n   *\n   * ```markdown\n   * > | <x />\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // To do: parse indent like `markdown-rs`.\n    return before(code);\n  }\n\n  /**\n   * At `<`, after optional whitespace.\n   *\n   * ```markdown\n   * > | <x />\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    effects.enter('htmlFlow');\n    effects.enter('htmlFlowData');\n    effects.consume(code);\n    return open;\n  }\n\n  /**\n   * After `<`, at tag name or other stuff.\n   *\n   * ```markdown\n   * > | <x />\n   *      ^\n   * > | <!doctype>\n   *      ^\n   * > | <!--xxx-->\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (code === 33) {\n      effects.consume(code);\n      return declarationOpen;\n    }\n    if (code === 47) {\n      effects.consume(code);\n      closingTag = true;\n      return tagCloseStart;\n    }\n    if (code === 63) {\n      effects.consume(code);\n      marker = 3;\n      // To do:\n      // tokenizer.concrete = true\n      // To do: use `markdown-rs` style interrupt.\n      // While we’re in an instruction instead of a declaration, we’re on a `?`\n      // right now, so we do need to search for `>`, similar to declarations.\n      return self.interrupt ? ok : continuationDeclarationInside;\n    }\n\n    // ASCII alphabetical.\n    if (asciiAlpha(code)) {\n      effects.consume(code);\n      // @ts-expect-error: not null.\n      buffer = String.fromCharCode(code);\n      return tagName;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After `<!`, at declaration, comment, or CDATA.\n   *\n   * ```markdown\n   * > | <!doctype>\n   *       ^\n   * > | <!--xxx-->\n   *       ^\n   * > | <![CDATA[>&<]]>\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function declarationOpen(code) {\n    if (code === 45) {\n      effects.consume(code);\n      marker = 2;\n      return commentOpenInside;\n    }\n    if (code === 91) {\n      effects.consume(code);\n      marker = 5;\n      index = 0;\n      return cdataOpenInside;\n    }\n\n    // ASCII alphabetical.\n    if (asciiAlpha(code)) {\n      effects.consume(code);\n      marker = 4;\n      // // Do not form containers.\n      // tokenizer.concrete = true\n      return self.interrupt ? ok : continuationDeclarationInside;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After `<!-`, inside a comment, at another `-`.\n   *\n   * ```markdown\n   * > | <!--xxx-->\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function commentOpenInside(code) {\n    if (code === 45) {\n      effects.consume(code);\n      // // Do not form containers.\n      // tokenizer.concrete = true\n      return self.interrupt ? ok : continuationDeclarationInside;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After `<![`, inside CDATA, expecting `CDATA[`.\n   *\n   * ```markdown\n   * > | <![CDATA[>&<]]>\n   *        ^^^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdataOpenInside(code) {\n    const value = 'CDATA[';\n    if (code === value.charCodeAt(index++)) {\n      effects.consume(code);\n      if (index === value.length) {\n        // // Do not form containers.\n        // tokenizer.concrete = true\n        return self.interrupt ? ok : continuation;\n      }\n      return cdataOpenInside;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After `</`, in closing tag, at tag name.\n   *\n   * ```markdown\n   * > | </x>\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagCloseStart(code) {\n    if (asciiAlpha(code)) {\n      effects.consume(code);\n      // @ts-expect-error: not null.\n      buffer = String.fromCharCode(code);\n      return tagName;\n    }\n    return nok(code);\n  }\n\n  /**\n   * In tag name.\n   *\n   * ```markdown\n   * > | <ab>\n   *      ^^\n   * > | </ab>\n   *       ^^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagName(code) {\n    if (code === null || code === 47 || code === 62 || markdownLineEndingOrSpace(code)) {\n      const slash = code === 47;\n      const name = buffer.toLowerCase();\n      if (!slash && !closingTag && htmlRawNames.includes(name)) {\n        marker = 1;\n        // // Do not form containers.\n        // tokenizer.concrete = true\n        return self.interrupt ? ok(code) : continuation(code);\n      }\n      if (htmlBlockNames.includes(buffer.toLowerCase())) {\n        marker = 6;\n        if (slash) {\n          effects.consume(code);\n          return basicSelfClosing;\n        }\n\n        // // Do not form containers.\n        // tokenizer.concrete = true\n        return self.interrupt ? ok(code) : continuation(code);\n      }\n      marker = 7;\n      // Do not support complete HTML when interrupting.\n      return self.interrupt && !self.parser.lazy[self.now().line] ? nok(code) : closingTag ? completeClosingTagAfter(code) : completeAttributeNameBefore(code);\n    }\n\n    // ASCII alphanumerical and `-`.\n    if (code === 45 || asciiAlphanumeric(code)) {\n      effects.consume(code);\n      buffer += String.fromCharCode(code);\n      return tagName;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After closing slash of a basic tag name.\n   *\n   * ```markdown\n   * > | <div/>\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function basicSelfClosing(code) {\n    if (code === 62) {\n      effects.consume(code);\n      // // Do not form containers.\n      // tokenizer.concrete = true\n      return self.interrupt ? ok : continuation;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After closing slash of a complete tag name.\n   *\n   * ```markdown\n   * > | <x/>\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeClosingTagAfter(code) {\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return completeClosingTagAfter;\n    }\n    return completeEnd(code);\n  }\n\n  /**\n   * At an attribute name.\n   *\n   * At first, this state is used after a complete tag name, after whitespace,\n   * where it expects optional attributes or the end of the tag.\n   * It is also reused after attributes, when expecting more optional\n   * attributes.\n   *\n   * ```markdown\n   * > | <a />\n   *        ^\n   * > | <a :b>\n   *        ^\n   * > | <a _b>\n   *        ^\n   * > | <a b>\n   *        ^\n   * > | <a >\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeNameBefore(code) {\n    if (code === 47) {\n      effects.consume(code);\n      return completeEnd;\n    }\n\n    // ASCII alphanumerical and `:` and `_`.\n    if (code === 58 || code === 95 || asciiAlpha(code)) {\n      effects.consume(code);\n      return completeAttributeName;\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return completeAttributeNameBefore;\n    }\n    return completeEnd(code);\n  }\n\n  /**\n   * In attribute name.\n   *\n   * ```markdown\n   * > | <a :b>\n   *         ^\n   * > | <a _b>\n   *         ^\n   * > | <a b>\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeName(code) {\n    // ASCII alphanumerical and `-`, `.`, `:`, and `_`.\n    if (code === 45 || code === 46 || code === 58 || code === 95 || asciiAlphanumeric(code)) {\n      effects.consume(code);\n      return completeAttributeName;\n    }\n    return completeAttributeNameAfter(code);\n  }\n\n  /**\n   * After attribute name, at an optional initializer, the end of the tag, or\n   * whitespace.\n   *\n   * ```markdown\n   * > | <a b>\n   *         ^\n   * > | <a b=c>\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeNameAfter(code) {\n    if (code === 61) {\n      effects.consume(code);\n      return completeAttributeValueBefore;\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return completeAttributeNameAfter;\n    }\n    return completeAttributeNameBefore(code);\n  }\n\n  /**\n   * Before unquoted, double quoted, or single quoted attribute value, allowing\n   * whitespace.\n   *\n   * ```markdown\n   * > | <a b=c>\n   *          ^\n   * > | <a b=\"c\">\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeValueBefore(code) {\n    if (code === null || code === 60 || code === 61 || code === 62 || code === 96) {\n      return nok(code);\n    }\n    if (code === 34 || code === 39) {\n      effects.consume(code);\n      markerB = code;\n      return completeAttributeValueQuoted;\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return completeAttributeValueBefore;\n    }\n    return completeAttributeValueUnquoted(code);\n  }\n\n  /**\n   * In double or single quoted attribute value.\n   *\n   * ```markdown\n   * > | <a b=\"c\">\n   *           ^\n   * > | <a b='c'>\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeValueQuoted(code) {\n    if (code === markerB) {\n      effects.consume(code);\n      markerB = null;\n      return completeAttributeValueQuotedAfter;\n    }\n    if (code === null || markdownLineEnding(code)) {\n      return nok(code);\n    }\n    effects.consume(code);\n    return completeAttributeValueQuoted;\n  }\n\n  /**\n   * In unquoted attribute value.\n   *\n   * ```markdown\n   * > | <a b=c>\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeValueUnquoted(code) {\n    if (code === null || code === 34 || code === 39 || code === 47 || code === 60 || code === 61 || code === 62 || code === 96 || markdownLineEndingOrSpace(code)) {\n      return completeAttributeNameAfter(code);\n    }\n    effects.consume(code);\n    return completeAttributeValueUnquoted;\n  }\n\n  /**\n   * After double or single quoted attribute value, before whitespace or the\n   * end of the tag.\n   *\n   * ```markdown\n   * > | <a b=\"c\">\n   *            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeValueQuotedAfter(code) {\n    if (code === 47 || code === 62 || markdownSpace(code)) {\n      return completeAttributeNameBefore(code);\n    }\n    return nok(code);\n  }\n\n  /**\n   * In certain circumstances of a complete tag where only an `>` is allowed.\n   *\n   * ```markdown\n   * > | <a b=\"c\">\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeEnd(code) {\n    if (code === 62) {\n      effects.consume(code);\n      return completeAfter;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After `>` in a complete tag.\n   *\n   * ```markdown\n   * > | <x>\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAfter(code) {\n    if (code === null || markdownLineEnding(code)) {\n      // // Do not form containers.\n      // tokenizer.concrete = true\n      return continuation(code);\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return completeAfter;\n    }\n    return nok(code);\n  }\n\n  /**\n   * In continuation of any HTML kind.\n   *\n   * ```markdown\n   * > | <!--xxx-->\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuation(code) {\n    if (code === 45 && marker === 2) {\n      effects.consume(code);\n      return continuationCommentInside;\n    }\n    if (code === 60 && marker === 1) {\n      effects.consume(code);\n      return continuationRawTagOpen;\n    }\n    if (code === 62 && marker === 4) {\n      effects.consume(code);\n      return continuationClose;\n    }\n    if (code === 63 && marker === 3) {\n      effects.consume(code);\n      return continuationDeclarationInside;\n    }\n    if (code === 93 && marker === 5) {\n      effects.consume(code);\n      return continuationCdataInside;\n    }\n    if (markdownLineEnding(code) && (marker === 6 || marker === 7)) {\n      effects.exit('htmlFlowData');\n      return effects.check(blankLineBefore, continuationAfter, continuationStart)(code);\n    }\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('htmlFlowData');\n      return continuationStart(code);\n    }\n    effects.consume(code);\n    return continuation;\n  }\n\n  /**\n   * In continuation, at eol.\n   *\n   * ```markdown\n   * > | <x>\n   *        ^\n   *   | asd\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationStart(code) {\n    return effects.check(nonLazyContinuationStart, continuationStartNonLazy, continuationAfter)(code);\n  }\n\n  /**\n   * In continuation, at eol, before non-lazy content.\n   *\n   * ```markdown\n   * > | <x>\n   *        ^\n   *   | asd\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationStartNonLazy(code) {\n    effects.enter('lineEnding');\n    effects.consume(code);\n    effects.exit('lineEnding');\n    return continuationBefore;\n  }\n\n  /**\n   * In continuation, before non-lazy content.\n   *\n   * ```markdown\n   *   | <x>\n   * > | asd\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationBefore(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return continuationStart(code);\n    }\n    effects.enter('htmlFlowData');\n    return continuation(code);\n  }\n\n  /**\n   * In comment continuation, after one `-`, expecting another.\n   *\n   * ```markdown\n   * > | <!--xxx-->\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationCommentInside(code) {\n    if (code === 45) {\n      effects.consume(code);\n      return continuationDeclarationInside;\n    }\n    return continuation(code);\n  }\n\n  /**\n   * In raw continuation, after `<`, at `/`.\n   *\n   * ```markdown\n   * > | <script>console.log(1)</script>\n   *                            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationRawTagOpen(code) {\n    if (code === 47) {\n      effects.consume(code);\n      buffer = '';\n      return continuationRawEndTag;\n    }\n    return continuation(code);\n  }\n\n  /**\n   * In raw continuation, after `</`, in a raw tag name.\n   *\n   * ```markdown\n   * > | <script>console.log(1)</script>\n   *                             ^^^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationRawEndTag(code) {\n    if (code === 62) {\n      const name = buffer.toLowerCase();\n      if (htmlRawNames.includes(name)) {\n        effects.consume(code);\n        return continuationClose;\n      }\n      return continuation(code);\n    }\n    if (asciiAlpha(code) && buffer.length < 8) {\n      effects.consume(code);\n      // @ts-expect-error: not null.\n      buffer += String.fromCharCode(code);\n      return continuationRawEndTag;\n    }\n    return continuation(code);\n  }\n\n  /**\n   * In cdata continuation, after `]`, expecting `]>`.\n   *\n   * ```markdown\n   * > | <![CDATA[>&<]]>\n   *                  ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationCdataInside(code) {\n    if (code === 93) {\n      effects.consume(code);\n      return continuationDeclarationInside;\n    }\n    return continuation(code);\n  }\n\n  /**\n   * In declaration or instruction continuation, at `>`.\n   *\n   * ```markdown\n   * > | <!-->\n   *         ^\n   * > | <?>\n   *       ^\n   * > | <!q>\n   *        ^\n   * > | <!--ab-->\n   *             ^\n   * > | <![CDATA[>&<]]>\n   *                   ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationDeclarationInside(code) {\n    if (code === 62) {\n      effects.consume(code);\n      return continuationClose;\n    }\n\n    // More dashes.\n    if (code === 45 && marker === 2) {\n      effects.consume(code);\n      return continuationDeclarationInside;\n    }\n    return continuation(code);\n  }\n\n  /**\n   * In closed continuation: everything we get until the eol/eof is part of it.\n   *\n   * ```markdown\n   * > | <!doctype>\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationClose(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('htmlFlowData');\n      return continuationAfter(code);\n    }\n    effects.consume(code);\n    return continuationClose;\n  }\n\n  /**\n   * Done.\n   *\n   * ```markdown\n   * > | <!doctype>\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationAfter(code) {\n    effects.exit('htmlFlow');\n    // // Feel free to interrupt.\n    // tokenizer.interrupt = false\n    // // No longer concrete.\n    // tokenizer.concrete = false\n    return ok(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeNonLazyContinuationStart(effects, ok, nok) {\n  const self = this;\n  return start;\n\n  /**\n   * At eol, before continuation.\n   *\n   * ```markdown\n   * > | * ```js\n   *            ^\n   *   | b\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding');\n      effects.consume(code);\n      effects.exit('lineEnding');\n      return after;\n    }\n    return nok(code);\n  }\n\n  /**\n   * A continuation.\n   *\n   * ```markdown\n   *   | * ```js\n   * > | b\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    return self.parser.lazy[self.now().line] ? nok(code) : ok(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeBlankLineBefore(effects, ok, nok) {\n  return start;\n\n  /**\n   * Before eol, expecting blank line.\n   *\n   * ```markdown\n   * > | <div>\n   *          ^\n   *   |\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('lineEnding');\n    effects.consume(code);\n    effects.exit('lineEnding');\n    return effects.attempt(blankLine, ok, nok);\n  }\n}","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding, markdownSpace } from 'micromark-util-character';\n/** @type {Construct} */\nconst nonLazyContinuation = {\n  tokenize: tokenizeNonLazyContinuation,\n  partial: true\n};\n\n/** @type {Construct} */\nexport const codeFenced = {\n  name: 'codeFenced',\n  tokenize: tokenizeCodeFenced,\n  concrete: true\n};\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeCodeFenced(effects, ok, nok) {\n  const self = this;\n  /** @type {Construct} */\n  const closeStart = {\n    tokenize: tokenizeCloseStart,\n    partial: true\n  };\n  let initialPrefix = 0;\n  let sizeOpen = 0;\n  /** @type {NonNullable<Code>} */\n  let marker;\n  return start;\n\n  /**\n   * Start of code.\n   *\n   * ```markdown\n   * > | ~~~js\n   *     ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // To do: parse whitespace like `markdown-rs`.\n    return beforeSequenceOpen(code);\n  }\n\n  /**\n   * In opening fence, after prefix, at sequence.\n   *\n   * ```markdown\n   * > | ~~~js\n   *     ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function beforeSequenceOpen(code) {\n    const tail = self.events[self.events.length - 1];\n    initialPrefix = tail && tail[1].type === 'linePrefix' ? tail[2].sliceSerialize(tail[1], true).length : 0;\n    marker = code;\n    effects.enter('codeFenced');\n    effects.enter('codeFencedFence');\n    effects.enter('codeFencedFenceSequence');\n    return sequenceOpen(code);\n  }\n\n  /**\n   * In opening fence sequence.\n   *\n   * ```markdown\n   * > | ~~~js\n   *      ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceOpen(code) {\n    if (code === marker) {\n      sizeOpen++;\n      effects.consume(code);\n      return sequenceOpen;\n    }\n    if (sizeOpen < 3) {\n      return nok(code);\n    }\n    effects.exit('codeFencedFenceSequence');\n    return markdownSpace(code) ? factorySpace(effects, infoBefore, 'whitespace')(code) : infoBefore(code);\n  }\n\n  /**\n   * In opening fence, after the sequence (and optional whitespace), before info.\n   *\n   * ```markdown\n   * > | ~~~js\n   *        ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function infoBefore(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('codeFencedFence');\n      return self.interrupt ? ok(code) : effects.check(nonLazyContinuation, atNonLazyBreak, after)(code);\n    }\n    effects.enter('codeFencedFenceInfo');\n    effects.enter('chunkString', {\n      contentType: 'string'\n    });\n    return info(code);\n  }\n\n  /**\n   * In info.\n   *\n   * ```markdown\n   * > | ~~~js\n   *        ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function info(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('chunkString');\n      effects.exit('codeFencedFenceInfo');\n      return infoBefore(code);\n    }\n    if (markdownSpace(code)) {\n      effects.exit('chunkString');\n      effects.exit('codeFencedFenceInfo');\n      return factorySpace(effects, metaBefore, 'whitespace')(code);\n    }\n    if (code === 96 && code === marker) {\n      return nok(code);\n    }\n    effects.consume(code);\n    return info;\n  }\n\n  /**\n   * In opening fence, after info and whitespace, before meta.\n   *\n   * ```markdown\n   * > | ~~~js eval\n   *           ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function metaBefore(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return infoBefore(code);\n    }\n    effects.enter('codeFencedFenceMeta');\n    effects.enter('chunkString', {\n      contentType: 'string'\n    });\n    return meta(code);\n  }\n\n  /**\n   * In meta.\n   *\n   * ```markdown\n   * > | ~~~js eval\n   *           ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function meta(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('chunkString');\n      effects.exit('codeFencedFenceMeta');\n      return infoBefore(code);\n    }\n    if (code === 96 && code === marker) {\n      return nok(code);\n    }\n    effects.consume(code);\n    return meta;\n  }\n\n  /**\n   * At eol/eof in code, before a non-lazy closing fence or content.\n   *\n   * ```markdown\n   * > | ~~~js\n   *          ^\n   * > | alert(1)\n   *             ^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function atNonLazyBreak(code) {\n    return effects.attempt(closeStart, after, contentBefore)(code);\n  }\n\n  /**\n   * Before code content, not a closing fence, at eol.\n   *\n   * ```markdown\n   *   | ~~~js\n   * > | alert(1)\n   *             ^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function contentBefore(code) {\n    effects.enter('lineEnding');\n    effects.consume(code);\n    effects.exit('lineEnding');\n    return contentStart;\n  }\n\n  /**\n   * Before code content, not a closing fence.\n   *\n   * ```markdown\n   *   | ~~~js\n   * > | alert(1)\n   *     ^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function contentStart(code) {\n    return initialPrefix > 0 && markdownSpace(code) ? factorySpace(effects, beforeContentChunk, 'linePrefix', initialPrefix + 1)(code) : beforeContentChunk(code);\n  }\n\n  /**\n   * Before code content, after optional prefix.\n   *\n   * ```markdown\n   *   | ~~~js\n   * > | alert(1)\n   *     ^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function beforeContentChunk(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return effects.check(nonLazyContinuation, atNonLazyBreak, after)(code);\n    }\n    effects.enter('codeFlowValue');\n    return contentChunk(code);\n  }\n\n  /**\n   * In code content.\n   *\n   * ```markdown\n   *   | ~~~js\n   * > | alert(1)\n   *     ^^^^^^^^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function contentChunk(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('codeFlowValue');\n      return beforeContentChunk(code);\n    }\n    effects.consume(code);\n    return contentChunk;\n  }\n\n  /**\n   * After code.\n   *\n   * ```markdown\n   *   | ~~~js\n   *   | alert(1)\n   * > | ~~~\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    effects.exit('codeFenced');\n    return ok(code);\n  }\n\n  /**\n   * @this {TokenizeContext}\n   * @type {Tokenizer}\n   */\n  function tokenizeCloseStart(effects, ok, nok) {\n    let size = 0;\n    return startBefore;\n\n    /**\n     *\n     *\n     * @type {State}\n     */\n    function startBefore(code) {\n      effects.enter('lineEnding');\n      effects.consume(code);\n      effects.exit('lineEnding');\n      return start;\n    }\n\n    /**\n     * Before closing fence, at optional whitespace.\n     *\n     * ```markdown\n     *   | ~~~js\n     *   | alert(1)\n     * > | ~~~\n     *     ^\n     * ```\n     *\n     * @type {State}\n     */\n    function start(code) {\n      // Always populated by defaults.\n\n      // To do: `enter` here or in next state?\n      effects.enter('codeFencedFence');\n      return markdownSpace(code) ? factorySpace(effects, beforeSequenceClose, 'linePrefix', self.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4)(code) : beforeSequenceClose(code);\n    }\n\n    /**\n     * In closing fence, after optional whitespace, at sequence.\n     *\n     * ```markdown\n     *   | ~~~js\n     *   | alert(1)\n     * > | ~~~\n     *     ^\n     * ```\n     *\n     * @type {State}\n     */\n    function beforeSequenceClose(code) {\n      if (code === marker) {\n        effects.enter('codeFencedFenceSequence');\n        return sequenceClose(code);\n      }\n      return nok(code);\n    }\n\n    /**\n     * In closing fence sequence.\n     *\n     * ```markdown\n     *   | ~~~js\n     *   | alert(1)\n     * > | ~~~\n     *     ^\n     * ```\n     *\n     * @type {State}\n     */\n    function sequenceClose(code) {\n      if (code === marker) {\n        size++;\n        effects.consume(code);\n        return sequenceClose;\n      }\n      if (size >= sizeOpen) {\n        effects.exit('codeFencedFenceSequence');\n        return markdownSpace(code) ? factorySpace(effects, sequenceCloseAfter, 'whitespace')(code) : sequenceCloseAfter(code);\n      }\n      return nok(code);\n    }\n\n    /**\n     * After closing fence sequence, after optional whitespace.\n     *\n     * ```markdown\n     *   | ~~~js\n     *   | alert(1)\n     * > | ~~~\n     *        ^\n     * ```\n     *\n     * @type {State}\n     */\n    function sequenceCloseAfter(code) {\n      if (code === null || markdownLineEnding(code)) {\n        effects.exit('codeFencedFence');\n        return ok(code);\n      }\n      return nok(code);\n    }\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeNonLazyContinuation(effects, ok, nok) {\n  const self = this;\n  return start;\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (code === null) {\n      return nok(code);\n    }\n    effects.enter('lineEnding');\n    effects.consume(code);\n    effects.exit('lineEnding');\n    return lineStart;\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function lineStart(code) {\n    return self.parser.lazy[self.now().line] ? nok(code) : ok(code);\n  }\n}","/// <reference lib=\"dom\" />\n\n/* eslint-env browser */\n\nconst element = document.createElement('i');\n\n/**\n * @param {string} value\n * @returns {string|false}\n */\nexport function decodeNamedCharacterReference(value) {\n  const characterReference = '&' + value + ';';\n  element.innerHTML = characterReference;\n  const char = element.textContent;\n\n  // Some named character references do not require the closing semicolon\n  // (`&not`, for instance), which leads to situations where parsing the assumed\n  // named reference of `&notit;` will result in the string `¬it;`.\n  // When we encounter a trailing semicolon after parsing, and the character\n  // reference to decode was not a semicolon (`&semi;`), we can assume that the\n  // matching was not complete.\n  // @ts-expect-error: TypeScript is wrong that `textContent` on elements can\n  // yield `null`.\n  if (char.charCodeAt(char.length - 1) === 59 /* `;` */ && value !== 'semi') {\n    return false;\n  }\n\n  // If the decoded string is equal to the input, the character reference was\n  // not valid.\n  // @ts-expect-error: TypeScript is wrong that `textContent` on elements can\n  // yield `null`.\n  return char === characterReference ? false : char;\n}","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport { decodeNamedCharacterReference } from 'decode-named-character-reference';\nimport { asciiAlphanumeric, asciiDigit, asciiHexDigit } from 'micromark-util-character';\n/** @type {Construct} */\nexport const characterReference = {\n  name: 'characterReference',\n  tokenize: tokenizeCharacterReference\n};\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeCharacterReference(effects, ok, nok) {\n  const self = this;\n  let size = 0;\n  /** @type {number} */\n  let max;\n  /** @type {(code: Code) => boolean} */\n  let test;\n  return start;\n\n  /**\n   * Start of character reference.\n   *\n   * ```markdown\n   * > | a&amp;b\n   *      ^\n   * > | a&#123;b\n   *      ^\n   * > | a&#x9;b\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('characterReference');\n    effects.enter('characterReferenceMarker');\n    effects.consume(code);\n    effects.exit('characterReferenceMarker');\n    return open;\n  }\n\n  /**\n   * After `&`, at `#` for numeric references or alphanumeric for named\n   * references.\n   *\n   * ```markdown\n   * > | a&amp;b\n   *       ^\n   * > | a&#123;b\n   *       ^\n   * > | a&#x9;b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (code === 35) {\n      effects.enter('characterReferenceMarkerNumeric');\n      effects.consume(code);\n      effects.exit('characterReferenceMarkerNumeric');\n      return numeric;\n    }\n    effects.enter('characterReferenceValue');\n    max = 31;\n    test = asciiAlphanumeric;\n    return value(code);\n  }\n\n  /**\n   * After `#`, at `x` for hexadecimals or digit for decimals.\n   *\n   * ```markdown\n   * > | a&#123;b\n   *        ^\n   * > | a&#x9;b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function numeric(code) {\n    if (code === 88 || code === 120) {\n      effects.enter('characterReferenceMarkerHexadecimal');\n      effects.consume(code);\n      effects.exit('characterReferenceMarkerHexadecimal');\n      effects.enter('characterReferenceValue');\n      max = 6;\n      test = asciiHexDigit;\n      return value;\n    }\n    effects.enter('characterReferenceValue');\n    max = 7;\n    test = asciiDigit;\n    return value(code);\n  }\n\n  /**\n   * After markers (`&#x`, `&#`, or `&`), in value, before `;`.\n   *\n   * The character reference kind defines what and how many characters are\n   * allowed.\n   *\n   * ```markdown\n   * > | a&amp;b\n   *       ^^^\n   * > | a&#123;b\n   *        ^^^\n   * > | a&#x9;b\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function value(code) {\n    if (code === 59 && size) {\n      const token = effects.exit('characterReferenceValue');\n      if (test === asciiAlphanumeric && !decodeNamedCharacterReference(self.sliceSerialize(token))) {\n        return nok(code);\n      }\n\n      // To do: `markdown-rs` uses a different name:\n      // `CharacterReferenceMarkerSemi`.\n      effects.enter('characterReferenceMarker');\n      effects.consume(code);\n      effects.exit('characterReferenceMarker');\n      effects.exit('characterReference');\n      return ok;\n    }\n    if (test(code) && size++ < max) {\n      effects.consume(code);\n      return value;\n    }\n    return nok(code);\n  }\n}","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport { asciiPunctuation } from 'micromark-util-character';\n/** @type {Construct} */\nexport const characterEscape = {\n  name: 'characterEscape',\n  tokenize: tokenizeCharacterEscape\n};\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeCharacterEscape(effects, ok, nok) {\n  return start;\n\n  /**\n   * Start of character escape.\n   *\n   * ```markdown\n   * > | a\\*b\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('characterEscape');\n    effects.enter('escapeMarker');\n    effects.consume(code);\n    effects.exit('escapeMarker');\n    return inside;\n  }\n\n  /**\n   * After `\\`, at punctuation.\n   *\n   * ```markdown\n   * > | a\\*b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    // ASCII punctuation.\n    if (asciiPunctuation(code)) {\n      effects.enter('characterEscapeValue');\n      effects.consume(code);\n      effects.exit('characterEscapeValue');\n      effects.exit('characterEscape');\n      return ok;\n    }\n    return nok(code);\n  }\n}","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding } from 'micromark-util-character';\n/** @type {Construct} */\nexport const lineEnding = {\n  name: 'lineEnding',\n  tokenize: tokenizeLineEnding\n};\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeLineEnding(effects, ok) {\n  return start;\n\n  /** @type {State} */\n  function start(code) {\n    effects.enter('lineEnding');\n    effects.consume(code);\n    effects.exit('lineEnding');\n    return factorySpace(effects, ok, 'linePrefix');\n  }\n}","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport { factoryDestination } from 'micromark-factory-destination';\nimport { factoryLabel } from 'micromark-factory-label';\nimport { factoryTitle } from 'micromark-factory-title';\nimport { factoryWhitespace } from 'micromark-factory-whitespace';\nimport { markdownLineEndingOrSpace } from 'micromark-util-character';\nimport { push, splice } from 'micromark-util-chunked';\nimport { normalizeIdentifier } from 'micromark-util-normalize-identifier';\nimport { resolveAll } from 'micromark-util-resolve-all';\n/** @type {Construct} */\nexport const labelEnd = {\n  name: 'labelEnd',\n  tokenize: tokenizeLabelEnd,\n  resolveTo: resolveToLabelEnd,\n  resolveAll: resolveAllLabelEnd\n};\n\n/** @type {Construct} */\nconst resourceConstruct = {\n  tokenize: tokenizeResource\n};\n/** @type {Construct} */\nconst referenceFullConstruct = {\n  tokenize: tokenizeReferenceFull\n};\n/** @type {Construct} */\nconst referenceCollapsedConstruct = {\n  tokenize: tokenizeReferenceCollapsed\n};\n\n/** @type {Resolver} */\nfunction resolveAllLabelEnd(events) {\n  let index = -1;\n  while (++index < events.length) {\n    const token = events[index][1];\n    if (token.type === 'labelImage' || token.type === 'labelLink' || token.type === 'labelEnd') {\n      // Remove the marker.\n      events.splice(index + 1, token.type === 'labelImage' ? 4 : 2);\n      token.type = 'data';\n      index++;\n    }\n  }\n  return events;\n}\n\n/** @type {Resolver} */\nfunction resolveToLabelEnd(events, context) {\n  let index = events.length;\n  let offset = 0;\n  /** @type {Token} */\n  let token;\n  /** @type {number | undefined} */\n  let open;\n  /** @type {number | undefined} */\n  let close;\n  /** @type {Array<Event>} */\n  let media;\n\n  // Find an opening.\n  while (index--) {\n    token = events[index][1];\n    if (open) {\n      // If we see another link, or inactive link label, we’ve been here before.\n      if (token.type === 'link' || token.type === 'labelLink' && token._inactive) {\n        break;\n      }\n\n      // Mark other link openings as inactive, as we can’t have links in\n      // links.\n      if (events[index][0] === 'enter' && token.type === 'labelLink') {\n        token._inactive = true;\n      }\n    } else if (close) {\n      if (events[index][0] === 'enter' && (token.type === 'labelImage' || token.type === 'labelLink') && !token._balanced) {\n        open = index;\n        if (token.type !== 'labelLink') {\n          offset = 2;\n          break;\n        }\n      }\n    } else if (token.type === 'labelEnd') {\n      close = index;\n    }\n  }\n  const group = {\n    type: events[open][1].type === 'labelLink' ? 'link' : 'image',\n    start: Object.assign({}, events[open][1].start),\n    end: Object.assign({}, events[events.length - 1][1].end)\n  };\n  const label = {\n    type: 'label',\n    start: Object.assign({}, events[open][1].start),\n    end: Object.assign({}, events[close][1].end)\n  };\n  const text = {\n    type: 'labelText',\n    start: Object.assign({}, events[open + offset + 2][1].end),\n    end: Object.assign({}, events[close - 2][1].start)\n  };\n  media = [['enter', group, context], ['enter', label, context]];\n\n  // Opening marker.\n  media = push(media, events.slice(open + 1, open + offset + 3));\n\n  // Text open.\n  media = push(media, [['enter', text, context]]);\n\n  // Always populated by defaults.\n\n  // Between.\n  media = push(media, resolveAll(context.parser.constructs.insideSpan.null, events.slice(open + offset + 4, close - 3), context));\n\n  // Text close, marker close, label close.\n  media = push(media, [['exit', text, context], events[close - 2], events[close - 1], ['exit', label, context]]);\n\n  // Reference, resource, or so.\n  media = push(media, events.slice(close + 1));\n\n  // Media close.\n  media = push(media, [['exit', group, context]]);\n  splice(events, open, events.length, media);\n  return events;\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeLabelEnd(effects, ok, nok) {\n  const self = this;\n  let index = self.events.length;\n  /** @type {Token} */\n  let labelStart;\n  /** @type {boolean} */\n  let defined;\n\n  // Find an opening.\n  while (index--) {\n    if ((self.events[index][1].type === 'labelImage' || self.events[index][1].type === 'labelLink') && !self.events[index][1]._balanced) {\n      labelStart = self.events[index][1];\n      break;\n    }\n  }\n  return start;\n\n  /**\n   * Start of label end.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *       ^\n   * > | [a][b] c\n   *       ^\n   * > | [a][] b\n   *       ^\n   * > | [a] b\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // If there is not an okay opening.\n    if (!labelStart) {\n      return nok(code);\n    }\n\n    // If the corresponding label (link) start is marked as inactive,\n    // it means we’d be wrapping a link, like this:\n    //\n    // ```markdown\n    // > | a [b [c](d) e](f) g.\n    //                  ^\n    // ```\n    //\n    // We can’t have that, so it’s just balanced brackets.\n    if (labelStart._inactive) {\n      return labelEndNok(code);\n    }\n    defined = self.parser.defined.includes(normalizeIdentifier(self.sliceSerialize({\n      start: labelStart.end,\n      end: self.now()\n    })));\n    effects.enter('labelEnd');\n    effects.enter('labelMarker');\n    effects.consume(code);\n    effects.exit('labelMarker');\n    effects.exit('labelEnd');\n    return after;\n  }\n\n  /**\n   * After `]`.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *       ^\n   * > | [a][b] c\n   *       ^\n   * > | [a][] b\n   *       ^\n   * > | [a] b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    // Note: `markdown-rs` also parses GFM footnotes here, which for us is in\n    // an extension.\n\n    // Resource (`[asd](fgh)`)?\n    if (code === 40) {\n      return effects.attempt(resourceConstruct, labelEndOk, defined ? labelEndOk : labelEndNok)(code);\n    }\n\n    // Full (`[asd][fgh]`) or collapsed (`[asd][]`) reference?\n    if (code === 91) {\n      return effects.attempt(referenceFullConstruct, labelEndOk, defined ? referenceNotFull : labelEndNok)(code);\n    }\n\n    // Shortcut (`[asd]`) reference?\n    return defined ? labelEndOk(code) : labelEndNok(code);\n  }\n\n  /**\n   * After `]`, at `[`, but not at a full reference.\n   *\n   * > 👉 **Note**: we only get here if the label is defined.\n   *\n   * ```markdown\n   * > | [a][] b\n   *        ^\n   * > | [a] b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceNotFull(code) {\n    return effects.attempt(referenceCollapsedConstruct, labelEndOk, labelEndNok)(code);\n  }\n\n  /**\n   * Done, we found something.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *           ^\n   * > | [a][b] c\n   *           ^\n   * > | [a][] b\n   *          ^\n   * > | [a] b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelEndOk(code) {\n    // Note: `markdown-rs` does a bunch of stuff here.\n    return ok(code);\n  }\n\n  /**\n   * Done, it’s nothing.\n   *\n   * There was an okay opening, but we didn’t match anything.\n   *\n   * ```markdown\n   * > | [a](b c\n   *        ^\n   * > | [a][b c\n   *        ^\n   * > | [a] b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelEndNok(code) {\n    labelStart._balanced = true;\n    return nok(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeResource(effects, ok, nok) {\n  return resourceStart;\n\n  /**\n   * At a resource.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceStart(code) {\n    effects.enter('resource');\n    effects.enter('resourceMarker');\n    effects.consume(code);\n    effects.exit('resourceMarker');\n    return resourceBefore;\n  }\n\n  /**\n   * In resource, after `(`, at optional whitespace.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceBefore(code) {\n    return markdownLineEndingOrSpace(code) ? factoryWhitespace(effects, resourceOpen)(code) : resourceOpen(code);\n  }\n\n  /**\n   * In resource, after optional whitespace, at `)` or a destination.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceOpen(code) {\n    if (code === 41) {\n      return resourceEnd(code);\n    }\n    return factoryDestination(effects, resourceDestinationAfter, resourceDestinationMissing, 'resourceDestination', 'resourceDestinationLiteral', 'resourceDestinationLiteralMarker', 'resourceDestinationRaw', 'resourceDestinationString', 32)(code);\n  }\n\n  /**\n   * In resource, after destination, at optional whitespace.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceDestinationAfter(code) {\n    return markdownLineEndingOrSpace(code) ? factoryWhitespace(effects, resourceBetween)(code) : resourceEnd(code);\n  }\n\n  /**\n   * At invalid destination.\n   *\n   * ```markdown\n   * > | [a](<<) b\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceDestinationMissing(code) {\n    return nok(code);\n  }\n\n  /**\n   * In resource, after destination and whitespace, at `(` or title.\n   *\n   * ```markdown\n   * > | [a](b ) c\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceBetween(code) {\n    if (code === 34 || code === 39 || code === 40) {\n      return factoryTitle(effects, resourceTitleAfter, nok, 'resourceTitle', 'resourceTitleMarker', 'resourceTitleString')(code);\n    }\n    return resourceEnd(code);\n  }\n\n  /**\n   * In resource, after title, at optional whitespace.\n   *\n   * ```markdown\n   * > | [a](b \"c\") d\n   *              ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceTitleAfter(code) {\n    return markdownLineEndingOrSpace(code) ? factoryWhitespace(effects, resourceEnd)(code) : resourceEnd(code);\n  }\n\n  /**\n   * In resource, at `)`.\n   *\n   * ```markdown\n   * > | [a](b) d\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceEnd(code) {\n    if (code === 41) {\n      effects.enter('resourceMarker');\n      effects.consume(code);\n      effects.exit('resourceMarker');\n      effects.exit('resource');\n      return ok;\n    }\n    return nok(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeReferenceFull(effects, ok, nok) {\n  const self = this;\n  return referenceFull;\n\n  /**\n   * In a reference (full), at the `[`.\n   *\n   * ```markdown\n   * > | [a][b] d\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceFull(code) {\n    return factoryLabel.call(self, effects, referenceFullAfter, referenceFullMissing, 'reference', 'referenceMarker', 'referenceString')(code);\n  }\n\n  /**\n   * In a reference (full), after `]`.\n   *\n   * ```markdown\n   * > | [a][b] d\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceFullAfter(code) {\n    return self.parser.defined.includes(normalizeIdentifier(self.sliceSerialize(self.events[self.events.length - 1][1]).slice(1, -1))) ? ok(code) : nok(code);\n  }\n\n  /**\n   * In reference (full) that was missing.\n   *\n   * ```markdown\n   * > | [a][b d\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceFullMissing(code) {\n    return nok(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeReferenceCollapsed(effects, ok, nok) {\n  return referenceCollapsedStart;\n\n  /**\n   * In reference (collapsed), at `[`.\n   *\n   * > 👉 **Note**: we only get here if the label is defined.\n   *\n   * ```markdown\n   * > | [a][] d\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceCollapsedStart(code) {\n    // We only attempt a collapsed label if there’s a `[`.\n\n    effects.enter('reference');\n    effects.enter('referenceMarker');\n    effects.consume(code);\n    effects.exit('referenceMarker');\n    return referenceCollapsedOpen;\n  }\n\n  /**\n   * In reference (collapsed), at `]`.\n   *\n   * > 👉 **Note**: we only get here if the label is defined.\n   *\n   * ```markdown\n   * > | [a][] d\n   *         ^\n   * ```\n   *\n   *  @type {State}\n   */\n  function referenceCollapsedOpen(code) {\n    if (code === 93) {\n      effects.enter('referenceMarker');\n      effects.consume(code);\n      effects.exit('referenceMarker');\n      effects.exit('reference');\n      return ok;\n    }\n    return nok(code);\n  }\n}","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport { labelEnd } from './label-end.js';\n\n/** @type {Construct} */\nexport const labelStartImage = {\n  name: 'labelStartImage',\n  tokenize: tokenizeLabelStartImage,\n  resolveAll: labelEnd.resolveAll\n};\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeLabelStartImage(effects, ok, nok) {\n  const self = this;\n  return start;\n\n  /**\n   * Start of label (image) start.\n   *\n   * ```markdown\n   * > | a ![b] c\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('labelImage');\n    effects.enter('labelImageMarker');\n    effects.consume(code);\n    effects.exit('labelImageMarker');\n    return open;\n  }\n\n  /**\n   * After `!`, at `[`.\n   *\n   * ```markdown\n   * > | a ![b] c\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (code === 91) {\n      effects.enter('labelMarker');\n      effects.consume(code);\n      effects.exit('labelMarker');\n      effects.exit('labelImage');\n      return after;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After `![`.\n   *\n   * ```markdown\n   * > | a ![b] c\n   *         ^\n   * ```\n   *\n   * This is needed in because, when GFM footnotes are enabled, images never\n   * form when started with a `^`.\n   * Instead, links form:\n   *\n   * ```markdown\n   * ![^a](b)\n   *\n   * ![^a][b]\n   *\n   * [b]: c\n   * ```\n   *\n   * ```html\n   * <p>!<a href=\\\"b\\\">^a</a></p>\n   * <p>!<a href=\\\"c\\\">^a</a></p>\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    // To do: use a new field to do this, this is still needed for\n    // `micromark-extension-gfm-footnote`, but the `label-start-link`\n    // behavior isn’t.\n    // Hidden footnotes hook.\n    /* c8 ignore next 3 */\n    return code === 94 && '_hiddenFootnoteSupport' in self.parser.constructs ? nok(code) : ok(code);\n  }\n}","/**\n * @typedef {import('micromark-util-types').Code} Code\n */\n\nimport { markdownLineEndingOrSpace, unicodePunctuation, unicodeWhitespace } from 'micromark-util-character';\n/**\n * Classify whether a code represents whitespace, punctuation, or something\n * else.\n *\n * Used for attention (emphasis, strong), whose sequences can open or close\n * based on the class of surrounding characters.\n *\n * > 👉 **Note**: eof (`null`) is seen as whitespace.\n *\n * @param {Code} code\n *   Code.\n * @returns {typeof constants.characterGroupWhitespace | typeof constants.characterGroupPunctuation | undefined}\n *   Group.\n */\nexport function classifyCharacter(code) {\n  if (code === null || markdownLineEndingOrSpace(code) || unicodeWhitespace(code)) {\n    return 1;\n  }\n  if (unicodePunctuation(code)) {\n    return 2;\n  }\n}","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Point} Point\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport { push, splice } from 'micromark-util-chunked';\nimport { classifyCharacter } from 'micromark-util-classify-character';\nimport { resolveAll } from 'micromark-util-resolve-all';\n/** @type {Construct} */\nexport const attention = {\n  name: 'attention',\n  tokenize: tokenizeAttention,\n  resolveAll: resolveAllAttention\n};\n\n/**\n * Take all events and resolve attention to emphasis or strong.\n *\n * @type {Resolver}\n */\nfunction resolveAllAttention(events, context) {\n  let index = -1;\n  /** @type {number} */\n  let open;\n  /** @type {Token} */\n  let group;\n  /** @type {Token} */\n  let text;\n  /** @type {Token} */\n  let openingSequence;\n  /** @type {Token} */\n  let closingSequence;\n  /** @type {number} */\n  let use;\n  /** @type {Array<Event>} */\n  let nextEvents;\n  /** @type {number} */\n  let offset;\n\n  // Walk through all events.\n  //\n  // Note: performance of this is fine on an mb of normal markdown, but it’s\n  // a bottleneck for malicious stuff.\n  while (++index < events.length) {\n    // Find a token that can close.\n    if (events[index][0] === 'enter' && events[index][1].type === 'attentionSequence' && events[index][1]._close) {\n      open = index;\n\n      // Now walk back to find an opener.\n      while (open--) {\n        // Find a token that can open the closer.\n        if (events[open][0] === 'exit' && events[open][1].type === 'attentionSequence' && events[open][1]._open &&\n        // If the markers are the same:\n        context.sliceSerialize(events[open][1]).charCodeAt(0) === context.sliceSerialize(events[index][1]).charCodeAt(0)) {\n          // If the opening can close or the closing can open,\n          // and the close size *is not* a multiple of three,\n          // but the sum of the opening and closing size *is* multiple of three,\n          // then don’t match.\n          if ((events[open][1]._close || events[index][1]._open) && (events[index][1].end.offset - events[index][1].start.offset) % 3 && !((events[open][1].end.offset - events[open][1].start.offset + events[index][1].end.offset - events[index][1].start.offset) % 3)) {\n            continue;\n          }\n\n          // Number of markers to use from the sequence.\n          use = events[open][1].end.offset - events[open][1].start.offset > 1 && events[index][1].end.offset - events[index][1].start.offset > 1 ? 2 : 1;\n          const start = Object.assign({}, events[open][1].end);\n          const end = Object.assign({}, events[index][1].start);\n          movePoint(start, -use);\n          movePoint(end, use);\n          openingSequence = {\n            type: use > 1 ? 'strongSequence' : 'emphasisSequence',\n            start,\n            end: Object.assign({}, events[open][1].end)\n          };\n          closingSequence = {\n            type: use > 1 ? 'strongSequence' : 'emphasisSequence',\n            start: Object.assign({}, events[index][1].start),\n            end\n          };\n          text = {\n            type: use > 1 ? 'strongText' : 'emphasisText',\n            start: Object.assign({}, events[open][1].end),\n            end: Object.assign({}, events[index][1].start)\n          };\n          group = {\n            type: use > 1 ? 'strong' : 'emphasis',\n            start: Object.assign({}, openingSequence.start),\n            end: Object.assign({}, closingSequence.end)\n          };\n          events[open][1].end = Object.assign({}, openingSequence.start);\n          events[index][1].start = Object.assign({}, closingSequence.end);\n          nextEvents = [];\n\n          // If there are more markers in the opening, add them before.\n          if (events[open][1].end.offset - events[open][1].start.offset) {\n            nextEvents = push(nextEvents, [['enter', events[open][1], context], ['exit', events[open][1], context]]);\n          }\n\n          // Opening.\n          nextEvents = push(nextEvents, [['enter', group, context], ['enter', openingSequence, context], ['exit', openingSequence, context], ['enter', text, context]]);\n\n          // Always populated by defaults.\n\n          // Between.\n          nextEvents = push(nextEvents, resolveAll(context.parser.constructs.insideSpan.null, events.slice(open + 1, index), context));\n\n          // Closing.\n          nextEvents = push(nextEvents, [['exit', text, context], ['enter', closingSequence, context], ['exit', closingSequence, context], ['exit', group, context]]);\n\n          // If there are more markers in the closing, add them after.\n          if (events[index][1].end.offset - events[index][1].start.offset) {\n            offset = 2;\n            nextEvents = push(nextEvents, [['enter', events[index][1], context], ['exit', events[index][1], context]]);\n          } else {\n            offset = 0;\n          }\n          splice(events, open - 1, index - open + 3, nextEvents);\n          index = open + nextEvents.length - offset - 2;\n          break;\n        }\n      }\n    }\n  }\n\n  // Remove remaining sequences.\n  index = -1;\n  while (++index < events.length) {\n    if (events[index][1].type === 'attentionSequence') {\n      events[index][1].type = 'data';\n    }\n  }\n  return events;\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeAttention(effects, ok) {\n  const attentionMarkers = this.parser.constructs.attentionMarkers.null;\n  const previous = this.previous;\n  const before = classifyCharacter(previous);\n\n  /** @type {NonNullable<Code>} */\n  let marker;\n  return start;\n\n  /**\n   * Before a sequence.\n   *\n   * ```markdown\n   * > | **\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    marker = code;\n    effects.enter('attentionSequence');\n    return inside(code);\n  }\n\n  /**\n   * In a sequence.\n   *\n   * ```markdown\n   * > | **\n   *     ^^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    if (code === marker) {\n      effects.consume(code);\n      return inside;\n    }\n    const token = effects.exit('attentionSequence');\n\n    // To do: next major: move this to resolver, just like `markdown-rs`.\n    const after = classifyCharacter(code);\n\n    // Always populated by defaults.\n\n    const open = !after || after === 2 && before || attentionMarkers.includes(code);\n    const close = !before || before === 2 && after || attentionMarkers.includes(previous);\n    token._open = Boolean(marker === 42 ? open : open && (before || !close));\n    token._close = Boolean(marker === 42 ? close : close && (after || !open));\n    return ok(code);\n  }\n}\n\n/**\n * Move a point a bit.\n *\n * Note: `move` only works inside lines! It’s not possible to move past other\n * chunks (replacement characters, tabs, or line endings).\n *\n * @param {Point} point\n * @param {number} offset\n * @returns {void}\n */\nfunction movePoint(point, offset) {\n  point.column += offset;\n  point.offset += offset;\n  point._bufferIndex += offset;\n}","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport { asciiAlpha, asciiAlphanumeric, asciiAtext, asciiControl } from 'micromark-util-character';\n/** @type {Construct} */\nexport const autolink = {\n  name: 'autolink',\n  tokenize: tokenizeAutolink\n};\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeAutolink(effects, ok, nok) {\n  let size = 0;\n  return start;\n\n  /**\n   * Start of an autolink.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *      ^\n   * > | a<user@example.com>b\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('autolink');\n    effects.enter('autolinkMarker');\n    effects.consume(code);\n    effects.exit('autolinkMarker');\n    effects.enter('autolinkProtocol');\n    return open;\n  }\n\n  /**\n   * After `<`, at protocol or atext.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *       ^\n   * > | a<user@example.com>b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (asciiAlpha(code)) {\n      effects.consume(code);\n      return schemeOrEmailAtext;\n    }\n    return emailAtext(code);\n  }\n\n  /**\n   * At second byte of protocol or atext.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *        ^\n   * > | a<user@example.com>b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function schemeOrEmailAtext(code) {\n    // ASCII alphanumeric and `+`, `-`, and `.`.\n    if (code === 43 || code === 45 || code === 46 || asciiAlphanumeric(code)) {\n      // Count the previous alphabetical from `open` too.\n      size = 1;\n      return schemeInsideOrEmailAtext(code);\n    }\n    return emailAtext(code);\n  }\n\n  /**\n   * In ambiguous protocol or atext.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *        ^\n   * > | a<user@example.com>b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function schemeInsideOrEmailAtext(code) {\n    if (code === 58) {\n      effects.consume(code);\n      size = 0;\n      return urlInside;\n    }\n\n    // ASCII alphanumeric and `+`, `-`, and `.`.\n    if ((code === 43 || code === 45 || code === 46 || asciiAlphanumeric(code)) && size++ < 32) {\n      effects.consume(code);\n      return schemeInsideOrEmailAtext;\n    }\n    size = 0;\n    return emailAtext(code);\n  }\n\n  /**\n   * After protocol, in URL.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function urlInside(code) {\n    if (code === 62) {\n      effects.exit('autolinkProtocol');\n      effects.enter('autolinkMarker');\n      effects.consume(code);\n      effects.exit('autolinkMarker');\n      effects.exit('autolink');\n      return ok;\n    }\n\n    // ASCII control, space, or `<`.\n    if (code === null || code === 32 || code === 60 || asciiControl(code)) {\n      return nok(code);\n    }\n    effects.consume(code);\n    return urlInside;\n  }\n\n  /**\n   * In email atext.\n   *\n   * ```markdown\n   * > | a<user.name@example.com>b\n   *              ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailAtext(code) {\n    if (code === 64) {\n      effects.consume(code);\n      return emailAtSignOrDot;\n    }\n    if (asciiAtext(code)) {\n      effects.consume(code);\n      return emailAtext;\n    }\n    return nok(code);\n  }\n\n  /**\n   * In label, after at-sign or dot.\n   *\n   * ```markdown\n   * > | a<user.name@example.com>b\n   *                 ^       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailAtSignOrDot(code) {\n    return asciiAlphanumeric(code) ? emailLabel(code) : nok(code);\n  }\n\n  /**\n   * In label, where `.` and `>` are allowed.\n   *\n   * ```markdown\n   * > | a<user.name@example.com>b\n   *                   ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailLabel(code) {\n    if (code === 46) {\n      effects.consume(code);\n      size = 0;\n      return emailAtSignOrDot;\n    }\n    if (code === 62) {\n      // Exit, then change the token type.\n      effects.exit('autolinkProtocol').type = 'autolinkEmail';\n      effects.enter('autolinkMarker');\n      effects.consume(code);\n      effects.exit('autolinkMarker');\n      effects.exit('autolink');\n      return ok;\n    }\n    return emailValue(code);\n  }\n\n  /**\n   * In label, where `.` and `>` are *not* allowed.\n   *\n   * Though, this is also used in `emailLabel` to parse other values.\n   *\n   * ```markdown\n   * > | a<user.name@ex-ample.com>b\n   *                    ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailValue(code) {\n    // ASCII alphanumeric or `-`.\n    if ((code === 45 || asciiAlphanumeric(code)) && size++ < 63) {\n      const next = code === 45 ? emailValue : emailLabel;\n      effects.consume(code);\n      return next;\n    }\n    return nok(code);\n  }\n}","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { asciiAlpha, asciiAlphanumeric, markdownLineEnding, markdownLineEndingOrSpace, markdownSpace } from 'micromark-util-character';\n/** @type {Construct} */\nexport const htmlText = {\n  name: 'htmlText',\n  tokenize: tokenizeHtmlText\n};\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeHtmlText(effects, ok, nok) {\n  const self = this;\n  /** @type {NonNullable<Code> | undefined} */\n  let marker;\n  /** @type {number} */\n  let index;\n  /** @type {State} */\n  let returnState;\n  return start;\n\n  /**\n   * Start of HTML (text).\n   *\n   * ```markdown\n   * > | a <b> c\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('htmlText');\n    effects.enter('htmlTextData');\n    effects.consume(code);\n    return open;\n  }\n\n  /**\n   * After `<`, at tag name or other stuff.\n   *\n   * ```markdown\n   * > | a <b> c\n   *        ^\n   * > | a <!doctype> c\n   *        ^\n   * > | a <!--b--> c\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (code === 33) {\n      effects.consume(code);\n      return declarationOpen;\n    }\n    if (code === 47) {\n      effects.consume(code);\n      return tagCloseStart;\n    }\n    if (code === 63) {\n      effects.consume(code);\n      return instruction;\n    }\n\n    // ASCII alphabetical.\n    if (asciiAlpha(code)) {\n      effects.consume(code);\n      return tagOpen;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After `<!`, at declaration, comment, or CDATA.\n   *\n   * ```markdown\n   * > | a <!doctype> c\n   *         ^\n   * > | a <!--b--> c\n   *         ^\n   * > | a <![CDATA[>&<]]> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function declarationOpen(code) {\n    if (code === 45) {\n      effects.consume(code);\n      return commentOpenInside;\n    }\n    if (code === 91) {\n      effects.consume(code);\n      index = 0;\n      return cdataOpenInside;\n    }\n    if (asciiAlpha(code)) {\n      effects.consume(code);\n      return declaration;\n    }\n    return nok(code);\n  }\n\n  /**\n   * In a comment, after `<!-`, at another `-`.\n   *\n   * ```markdown\n   * > | a <!--b--> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function commentOpenInside(code) {\n    if (code === 45) {\n      effects.consume(code);\n      return commentEnd;\n    }\n    return nok(code);\n  }\n\n  /**\n   * In comment.\n   *\n   * ```markdown\n   * > | a <!--b--> c\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function comment(code) {\n    if (code === null) {\n      return nok(code);\n    }\n    if (code === 45) {\n      effects.consume(code);\n      return commentClose;\n    }\n    if (markdownLineEnding(code)) {\n      returnState = comment;\n      return lineEndingBefore(code);\n    }\n    effects.consume(code);\n    return comment;\n  }\n\n  /**\n   * In comment, after `-`.\n   *\n   * ```markdown\n   * > | a <!--b--> c\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function commentClose(code) {\n    if (code === 45) {\n      effects.consume(code);\n      return commentEnd;\n    }\n    return comment(code);\n  }\n\n  /**\n   * In comment, after `--`.\n   *\n   * ```markdown\n   * > | a <!--b--> c\n   *              ^\n   * ```\n   *\n   * @type {State}\n   */\n  function commentEnd(code) {\n    return code === 62 ? end(code) : code === 45 ? commentClose(code) : comment(code);\n  }\n\n  /**\n   * After `<![`, in CDATA, expecting `CDATA[`.\n   *\n   * ```markdown\n   * > | a <![CDATA[>&<]]> b\n   *          ^^^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdataOpenInside(code) {\n    const value = 'CDATA[';\n    if (code === value.charCodeAt(index++)) {\n      effects.consume(code);\n      return index === value.length ? cdata : cdataOpenInside;\n    }\n    return nok(code);\n  }\n\n  /**\n   * In CDATA.\n   *\n   * ```markdown\n   * > | a <![CDATA[>&<]]> b\n   *                ^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdata(code) {\n    if (code === null) {\n      return nok(code);\n    }\n    if (code === 93) {\n      effects.consume(code);\n      return cdataClose;\n    }\n    if (markdownLineEnding(code)) {\n      returnState = cdata;\n      return lineEndingBefore(code);\n    }\n    effects.consume(code);\n    return cdata;\n  }\n\n  /**\n   * In CDATA, after `]`, at another `]`.\n   *\n   * ```markdown\n   * > | a <![CDATA[>&<]]> b\n   *                    ^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdataClose(code) {\n    if (code === 93) {\n      effects.consume(code);\n      return cdataEnd;\n    }\n    return cdata(code);\n  }\n\n  /**\n   * In CDATA, after `]]`, at `>`.\n   *\n   * ```markdown\n   * > | a <![CDATA[>&<]]> b\n   *                     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdataEnd(code) {\n    if (code === 62) {\n      return end(code);\n    }\n    if (code === 93) {\n      effects.consume(code);\n      return cdataEnd;\n    }\n    return cdata(code);\n  }\n\n  /**\n   * In declaration.\n   *\n   * ```markdown\n   * > | a <!b> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function declaration(code) {\n    if (code === null || code === 62) {\n      return end(code);\n    }\n    if (markdownLineEnding(code)) {\n      returnState = declaration;\n      return lineEndingBefore(code);\n    }\n    effects.consume(code);\n    return declaration;\n  }\n\n  /**\n   * In instruction.\n   *\n   * ```markdown\n   * > | a <?b?> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function instruction(code) {\n    if (code === null) {\n      return nok(code);\n    }\n    if (code === 63) {\n      effects.consume(code);\n      return instructionClose;\n    }\n    if (markdownLineEnding(code)) {\n      returnState = instruction;\n      return lineEndingBefore(code);\n    }\n    effects.consume(code);\n    return instruction;\n  }\n\n  /**\n   * In instruction, after `?`, at `>`.\n   *\n   * ```markdown\n   * > | a <?b?> c\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function instructionClose(code) {\n    return code === 62 ? end(code) : instruction(code);\n  }\n\n  /**\n   * After `</`, in closing tag, at tag name.\n   *\n   * ```markdown\n   * > | a </b> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagCloseStart(code) {\n    // ASCII alphabetical.\n    if (asciiAlpha(code)) {\n      effects.consume(code);\n      return tagClose;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After `</x`, in a tag name.\n   *\n   * ```markdown\n   * > | a </b> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagClose(code) {\n    // ASCII alphanumerical and `-`.\n    if (code === 45 || asciiAlphanumeric(code)) {\n      effects.consume(code);\n      return tagClose;\n    }\n    return tagCloseBetween(code);\n  }\n\n  /**\n   * In closing tag, after tag name.\n   *\n   * ```markdown\n   * > | a </b> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagCloseBetween(code) {\n    if (markdownLineEnding(code)) {\n      returnState = tagCloseBetween;\n      return lineEndingBefore(code);\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return tagCloseBetween;\n    }\n    return end(code);\n  }\n\n  /**\n   * After `<x`, in opening tag name.\n   *\n   * ```markdown\n   * > | a <b> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpen(code) {\n    // ASCII alphanumerical and `-`.\n    if (code === 45 || asciiAlphanumeric(code)) {\n      effects.consume(code);\n      return tagOpen;\n    }\n    if (code === 47 || code === 62 || markdownLineEndingOrSpace(code)) {\n      return tagOpenBetween(code);\n    }\n    return nok(code);\n  }\n\n  /**\n   * In opening tag, after tag name.\n   *\n   * ```markdown\n   * > | a <b> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenBetween(code) {\n    if (code === 47) {\n      effects.consume(code);\n      return end;\n    }\n\n    // ASCII alphabetical and `:` and `_`.\n    if (code === 58 || code === 95 || asciiAlpha(code)) {\n      effects.consume(code);\n      return tagOpenAttributeName;\n    }\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenBetween;\n      return lineEndingBefore(code);\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return tagOpenBetween;\n    }\n    return end(code);\n  }\n\n  /**\n   * In attribute name.\n   *\n   * ```markdown\n   * > | a <b c> d\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeName(code) {\n    // ASCII alphabetical and `-`, `.`, `:`, and `_`.\n    if (code === 45 || code === 46 || code === 58 || code === 95 || asciiAlphanumeric(code)) {\n      effects.consume(code);\n      return tagOpenAttributeName;\n    }\n    return tagOpenAttributeNameAfter(code);\n  }\n\n  /**\n   * After attribute name, before initializer, the end of the tag, or\n   * whitespace.\n   *\n   * ```markdown\n   * > | a <b c> d\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeNameAfter(code) {\n    if (code === 61) {\n      effects.consume(code);\n      return tagOpenAttributeValueBefore;\n    }\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenAttributeNameAfter;\n      return lineEndingBefore(code);\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return tagOpenAttributeNameAfter;\n    }\n    return tagOpenBetween(code);\n  }\n\n  /**\n   * Before unquoted, double quoted, or single quoted attribute value, allowing\n   * whitespace.\n   *\n   * ```markdown\n   * > | a <b c=d> e\n   *            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeValueBefore(code) {\n    if (code === null || code === 60 || code === 61 || code === 62 || code === 96) {\n      return nok(code);\n    }\n    if (code === 34 || code === 39) {\n      effects.consume(code);\n      marker = code;\n      return tagOpenAttributeValueQuoted;\n    }\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenAttributeValueBefore;\n      return lineEndingBefore(code);\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return tagOpenAttributeValueBefore;\n    }\n    effects.consume(code);\n    return tagOpenAttributeValueUnquoted;\n  }\n\n  /**\n   * In double or single quoted attribute value.\n   *\n   * ```markdown\n   * > | a <b c=\"d\"> e\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeValueQuoted(code) {\n    if (code === marker) {\n      effects.consume(code);\n      marker = undefined;\n      return tagOpenAttributeValueQuotedAfter;\n    }\n    if (code === null) {\n      return nok(code);\n    }\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenAttributeValueQuoted;\n      return lineEndingBefore(code);\n    }\n    effects.consume(code);\n    return tagOpenAttributeValueQuoted;\n  }\n\n  /**\n   * In unquoted attribute value.\n   *\n   * ```markdown\n   * > | a <b c=d> e\n   *            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeValueUnquoted(code) {\n    if (code === null || code === 34 || code === 39 || code === 60 || code === 61 || code === 96) {\n      return nok(code);\n    }\n    if (code === 47 || code === 62 || markdownLineEndingOrSpace(code)) {\n      return tagOpenBetween(code);\n    }\n    effects.consume(code);\n    return tagOpenAttributeValueUnquoted;\n  }\n\n  /**\n   * After double or single quoted attribute value, before whitespace or the end\n   * of the tag.\n   *\n   * ```markdown\n   * > | a <b c=\"d\"> e\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeValueQuotedAfter(code) {\n    if (code === 47 || code === 62 || markdownLineEndingOrSpace(code)) {\n      return tagOpenBetween(code);\n    }\n    return nok(code);\n  }\n\n  /**\n   * In certain circumstances of a tag where only an `>` is allowed.\n   *\n   * ```markdown\n   * > | a <b c=\"d\"> e\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function end(code) {\n    if (code === 62) {\n      effects.consume(code);\n      effects.exit('htmlTextData');\n      effects.exit('htmlText');\n      return ok;\n    }\n    return nok(code);\n  }\n\n  /**\n   * At eol.\n   *\n   * > 👉 **Note**: we can’t have blank lines in text, so no need to worry about\n   * > empty tokens.\n   *\n   * ```markdown\n   * > | a <!--a\n   *            ^\n   *   | b-->\n   * ```\n   *\n   * @type {State}\n   */\n  function lineEndingBefore(code) {\n    effects.exit('htmlTextData');\n    effects.enter('lineEnding');\n    effects.consume(code);\n    effects.exit('lineEnding');\n    return lineEndingAfter;\n  }\n\n  /**\n   * After eol, at optional whitespace.\n   *\n   * > 👉 **Note**: we can’t have blank lines in text, so no need to worry about\n   * > empty tokens.\n   *\n   * ```markdown\n   *   | a <!--a\n   * > | b-->\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function lineEndingAfter(code) {\n    // Always populated by defaults.\n\n    return markdownSpace(code) ? factorySpace(effects, lineEndingAfterPrefix, 'linePrefix', self.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4)(code) : lineEndingAfterPrefix(code);\n  }\n\n  /**\n   * After eol, after optional whitespace.\n   *\n   * > 👉 **Note**: we can’t have blank lines in text, so no need to worry about\n   * > empty tokens.\n   *\n   * ```markdown\n   *   | a <!--a\n   * > | b-->\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function lineEndingAfterPrefix(code) {\n    effects.enter('htmlTextData');\n    return returnState(code);\n  }\n}","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport { labelEnd } from './label-end.js';\n\n/** @type {Construct} */\nexport const labelStartLink = {\n  name: 'labelStartLink',\n  tokenize: tokenizeLabelStartLink,\n  resolveAll: labelEnd.resolveAll\n};\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeLabelStartLink(effects, ok, nok) {\n  const self = this;\n  return start;\n\n  /**\n   * Start of label (link) start.\n   *\n   * ```markdown\n   * > | a [b] c\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('labelLink');\n    effects.enter('labelMarker');\n    effects.consume(code);\n    effects.exit('labelMarker');\n    effects.exit('labelLink');\n    return after;\n  }\n\n  /** @type {State} */\n  function after(code) {\n    // To do: this isn’t needed in `micromark-extension-gfm-footnote`,\n    // remove.\n    // Hidden footnotes hook.\n    /* c8 ignore next 3 */\n    return code === 94 && '_hiddenFootnoteSupport' in self.parser.constructs ? nok(code) : ok(code);\n  }\n}","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport { markdownLineEnding } from 'micromark-util-character';\n/** @type {Construct} */\nexport const hardBreakEscape = {\n  name: 'hardBreakEscape',\n  tokenize: tokenizeHardBreakEscape\n};\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeHardBreakEscape(effects, ok, nok) {\n  return start;\n\n  /**\n   * Start of a hard break (escape).\n   *\n   * ```markdown\n   * > | a\\\n   *      ^\n   *   | b\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('hardBreakEscape');\n    effects.consume(code);\n    return after;\n  }\n\n  /**\n   * After `\\`, at eol.\n   *\n   * ```markdown\n   * > | a\\\n   *       ^\n   *   | b\n   * ```\n   *\n   *  @type {State}\n   */\n  function after(code) {\n    if (markdownLineEnding(code)) {\n      effects.exit('hardBreakEscape');\n      return ok(code);\n    }\n    return nok(code);\n  }\n}","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Previous} Previous\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport { markdownLineEnding } from 'micromark-util-character';\n/** @type {Construct} */\nexport const codeText = {\n  name: 'codeText',\n  tokenize: tokenizeCodeText,\n  resolve: resolveCodeText,\n  previous\n};\n\n// To do: next major: don’t resolve, like `markdown-rs`.\n/** @type {Resolver} */\nfunction resolveCodeText(events) {\n  let tailExitIndex = events.length - 4;\n  let headEnterIndex = 3;\n  /** @type {number} */\n  let index;\n  /** @type {number | undefined} */\n  let enter;\n\n  // If we start and end with an EOL or a space.\n  if ((events[headEnterIndex][1].type === 'lineEnding' || events[headEnterIndex][1].type === 'space') && (events[tailExitIndex][1].type === 'lineEnding' || events[tailExitIndex][1].type === 'space')) {\n    index = headEnterIndex;\n\n    // And we have data.\n    while (++index < tailExitIndex) {\n      if (events[index][1].type === 'codeTextData') {\n        // Then we have padding.\n        events[headEnterIndex][1].type = 'codeTextPadding';\n        events[tailExitIndex][1].type = 'codeTextPadding';\n        headEnterIndex += 2;\n        tailExitIndex -= 2;\n        break;\n      }\n    }\n  }\n\n  // Merge adjacent spaces and data.\n  index = headEnterIndex - 1;\n  tailExitIndex++;\n  while (++index <= tailExitIndex) {\n    if (enter === undefined) {\n      if (index !== tailExitIndex && events[index][1].type !== 'lineEnding') {\n        enter = index;\n      }\n    } else if (index === tailExitIndex || events[index][1].type === 'lineEnding') {\n      events[enter][1].type = 'codeTextData';\n      if (index !== enter + 2) {\n        events[enter][1].end = events[index - 1][1].end;\n        events.splice(enter + 2, index - enter - 2);\n        tailExitIndex -= index - enter - 2;\n        index = enter + 2;\n      }\n      enter = undefined;\n    }\n  }\n  return events;\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Previous}\n */\nfunction previous(code) {\n  // If there is a previous code, there will always be a tail.\n  return code !== 96 || this.events[this.events.length - 1][1].type === 'characterEscape';\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeCodeText(effects, ok, nok) {\n  const self = this;\n  let sizeOpen = 0;\n  /** @type {number} */\n  let size;\n  /** @type {Token} */\n  let token;\n  return start;\n\n  /**\n   * Start of code (text).\n   *\n   * ```markdown\n   * > | `a`\n   *     ^\n   * > | \\`a`\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('codeText');\n    effects.enter('codeTextSequence');\n    return sequenceOpen(code);\n  }\n\n  /**\n   * In opening sequence.\n   *\n   * ```markdown\n   * > | `a`\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceOpen(code) {\n    if (code === 96) {\n      effects.consume(code);\n      sizeOpen++;\n      return sequenceOpen;\n    }\n    effects.exit('codeTextSequence');\n    return between(code);\n  }\n\n  /**\n   * Between something and something else.\n   *\n   * ```markdown\n   * > | `a`\n   *      ^^\n   * ```\n   *\n   * @type {State}\n   */\n  function between(code) {\n    // EOF.\n    if (code === null) {\n      return nok(code);\n    }\n\n    // To do: next major: don’t do spaces in resolve, but when compiling,\n    // like `markdown-rs`.\n    // Tabs don’t work, and virtual spaces don’t make sense.\n    if (code === 32) {\n      effects.enter('space');\n      effects.consume(code);\n      effects.exit('space');\n      return between;\n    }\n\n    // Closing fence? Could also be data.\n    if (code === 96) {\n      token = effects.enter('codeTextSequence');\n      size = 0;\n      return sequenceClose(code);\n    }\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding');\n      effects.consume(code);\n      effects.exit('lineEnding');\n      return between;\n    }\n\n    // Data.\n    effects.enter('codeTextData');\n    return data(code);\n  }\n\n  /**\n   * In data.\n   *\n   * ```markdown\n   * > | `a`\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function data(code) {\n    if (code === null || code === 32 || code === 96 || markdownLineEnding(code)) {\n      effects.exit('codeTextData');\n      return between(code);\n    }\n    effects.consume(code);\n    return data;\n  }\n\n  /**\n   * In closing sequence.\n   *\n   * ```markdown\n   * > | `a`\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceClose(code) {\n    // More.\n    if (code === 96) {\n      effects.consume(code);\n      size++;\n      return sequenceClose;\n    }\n\n    // Done!\n    if (size === sizeOpen) {\n      effects.exit('codeTextSequence');\n      effects.exit('codeText');\n      return ok(code);\n    }\n\n    // More or less accents: mark as data.\n    token.type = 'codeTextData';\n    return data(code);\n  }\n}","/**\n * @typedef {import('micromark-util-types').Extension} Extension\n */\n\nimport { attention, autolink, blockQuote, characterEscape, characterReference, codeFenced, codeIndented, codeText, definition, hardBreakEscape, headingAtx, htmlFlow, htmlText, labelEnd, labelStartImage, labelStartLink, lineEnding, list, setextUnderline, thematicBreak } from 'micromark-core-commonmark';\nimport { resolver as resolveText } from './initialize/text.js';\n\n/** @satisfies {Extension['document']} */\nexport const document = {\n  [42]: list,\n  [43]: list,\n  [45]: list,\n  [48]: list,\n  [49]: list,\n  [50]: list,\n  [51]: list,\n  [52]: list,\n  [53]: list,\n  [54]: list,\n  [55]: list,\n  [56]: list,\n  [57]: list,\n  [62]: blockQuote\n};\n\n/** @satisfies {Extension['contentInitial']} */\nexport const contentInitial = {\n  [91]: definition\n};\n\n/** @satisfies {Extension['flowInitial']} */\nexport const flowInitial = {\n  [-2]: codeIndented,\n  [-1]: codeIndented,\n  [32]: codeIndented\n};\n\n/** @satisfies {Extension['flow']} */\nexport const flow = {\n  [35]: headingAtx,\n  [42]: thematicBreak,\n  [45]: [setextUnderline, thematicBreak],\n  [60]: htmlFlow,\n  [61]: setextUnderline,\n  [95]: thematicBreak,\n  [96]: codeFenced,\n  [126]: codeFenced\n};\n\n/** @satisfies {Extension['string']} */\nexport const string = {\n  [38]: characterReference,\n  [92]: characterEscape\n};\n\n/** @satisfies {Extension['text']} */\nexport const text = {\n  [-5]: lineEnding,\n  [-4]: lineEnding,\n  [-3]: lineEnding,\n  [33]: labelStartImage,\n  [38]: characterReference,\n  [42]: attention,\n  [60]: [autolink, htmlText],\n  [91]: labelStartLink,\n  [92]: [hardBreakEscape, characterEscape],\n  [93]: labelEnd,\n  [95]: attention,\n  [96]: codeText\n};\n\n/** @satisfies {Extension['insideSpan']} */\nexport const insideSpan = {\n  null: [attention, resolveText]\n};\n\n/** @satisfies {Extension['attentionMarkers']} */\nexport const attentionMarkers = {\n  null: [42, 95]\n};\n\n/** @satisfies {Extension['disable']} */\nexport const disable = {\n  null: []\n};","/**\n * @typedef {import('micromark-util-types').Create} Create\n * @typedef {import('micromark-util-types').FullNormalizedExtension} FullNormalizedExtension\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').ParseContext} ParseContext\n * @typedef {import('micromark-util-types').ParseOptions} ParseOptions\n */\n\nimport { combineExtensions } from 'micromark-util-combine-extensions';\nimport { content } from './initialize/content.js';\nimport { document } from './initialize/document.js';\nimport { flow } from './initialize/flow.js';\nimport { text, string } from './initialize/text.js';\nimport { createTokenizer } from './create-tokenizer.js';\nimport * as defaultConstructs from './constructs.js';\n\n/**\n * @param {ParseOptions | null | undefined} [options]\n * @returns {ParseContext}\n */\nexport function parse(options) {\n  const settings = options || {};\n  const constructs = /** @type {FullNormalizedExtension} */\n  combineExtensions([defaultConstructs, ...(settings.extensions || [])]);\n\n  /** @type {ParseContext} */\n  const parser = {\n    defined: [],\n    lazy: {},\n    constructs,\n    content: create(content),\n    document: create(document),\n    flow: create(flow),\n    string: create(string),\n    text: create(text)\n  };\n  return parser;\n\n  /**\n   * @param {InitialConstruct} initial\n   */\n  function create(initial) {\n    return creator;\n    /** @type {Create} */\n    function creator(from) {\n      return createTokenizer(parser, initial, from);\n    }\n  }\n}","/**\n * @typedef {import('micromark-util-types').Chunk} Chunk\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Encoding} Encoding\n * @typedef {import('micromark-util-types').Value} Value\n */\n\n/**\n * @callback Preprocessor\n * @param {Value} value\n * @param {Encoding | null | undefined} [encoding]\n * @param {boolean | null | undefined} [end=false]\n * @returns {Array<Chunk>}\n */\n\nconst search = /[\\0\\t\\n\\r]/g;\n\n/**\n * @returns {Preprocessor}\n */\nexport function preprocess() {\n  let column = 1;\n  let buffer = '';\n  /** @type {boolean | undefined} */\n  let start = true;\n  /** @type {boolean | undefined} */\n  let atCarriageReturn;\n  return preprocessor;\n\n  /** @type {Preprocessor} */\n  function preprocessor(value, encoding, end) {\n    /** @type {Array<Chunk>} */\n    const chunks = [];\n    /** @type {RegExpMatchArray | null} */\n    let match;\n    /** @type {number} */\n    let next;\n    /** @type {number} */\n    let startPosition;\n    /** @type {number} */\n    let endPosition;\n    /** @type {Code} */\n    let code;\n\n    // @ts-expect-error `Buffer` does allow an encoding.\n    value = buffer + value.toString(encoding);\n    startPosition = 0;\n    buffer = '';\n    if (start) {\n      // To do: `markdown-rs` actually parses BOMs (byte order mark).\n      if (value.charCodeAt(0) === 65279) {\n        startPosition++;\n      }\n      start = undefined;\n    }\n    while (startPosition < value.length) {\n      search.lastIndex = startPosition;\n      match = search.exec(value);\n      endPosition = match && match.index !== undefined ? match.index : value.length;\n      code = value.charCodeAt(endPosition);\n      if (!match) {\n        buffer = value.slice(startPosition);\n        break;\n      }\n      if (code === 10 && startPosition === endPosition && atCarriageReturn) {\n        chunks.push(-3);\n        atCarriageReturn = undefined;\n      } else {\n        if (atCarriageReturn) {\n          chunks.push(-5);\n          atCarriageReturn = undefined;\n        }\n        if (startPosition < endPosition) {\n          chunks.push(value.slice(startPosition, endPosition));\n          column += endPosition - startPosition;\n        }\n        switch (code) {\n          case 0:\n            {\n              chunks.push(65533);\n              column++;\n              break;\n            }\n          case 9:\n            {\n              next = Math.ceil(column / 4) * 4;\n              chunks.push(-2);\n              while (column++ < next) chunks.push(-1);\n              break;\n            }\n          case 10:\n            {\n              chunks.push(-4);\n              column = 1;\n              break;\n            }\n          default:\n            {\n              atCarriageReturn = true;\n              column = 1;\n            }\n        }\n      }\n      startPosition = endPosition + 1;\n    }\n    if (end) {\n      if (atCarriageReturn) chunks.push(-5);\n      if (buffer) chunks.push(buffer);\n      chunks.push(null);\n    }\n    return chunks;\n  }\n}","/**\n * Turn the number (in string form as either hexa- or plain decimal) coming from\n * a numeric character reference into a character.\n *\n * Sort of like `String.fromCharCode(Number.parseInt(value, base))`, but makes\n * non-characters and control characters safe.\n *\n * @param {string} value\n *   Value to decode.\n * @param {number} base\n *   Numeric base.\n * @returns {string}\n *   Character.\n */\nexport function decodeNumericCharacterReference(value, base) {\n  const code = Number.parseInt(value, base);\n  if (\n  // C0 except for HT, LF, FF, CR, space.\n  code < 9 || code === 11 || code > 13 && code < 32 ||\n  // Control character (DEL) of C0, and C1 controls.\n  code > 126 && code < 160 ||\n  // Lone high surrogates and low surrogates.\n  code > 55295 && code < 57344 ||\n  // Noncharacters.\n  code > 64975 && code < 65008 /* eslint-disable no-bitwise */ || (code & 65535) === 65535 || (code & 65535) === 65534 /* eslint-enable no-bitwise */ ||\n  // Out of range\n  code > 1114111) {\n    return '\\uFFFD';\n  }\n  return String.fromCharCode(code);\n}","import { decodeNamedCharacterReference } from 'decode-named-character-reference';\nimport { decodeNumericCharacterReference } from 'micromark-util-decode-numeric-character-reference';\nconst characterEscapeOrReference = /\\\\([!-/:-@[-`{-~])|&(#(?:\\d{1,7}|x[\\da-f]{1,6})|[\\da-z]{1,31});/gi;\n\n/**\n * Decode markdown strings (which occur in places such as fenced code info\n * strings, destinations, labels, and titles).\n *\n * The “string” content type allows character escapes and -references.\n * This decodes those.\n *\n * @param {string} value\n *   Value to decode.\n * @returns {string}\n *   Decoded value.\n */\nexport function decodeString(value) {\n  return value.replace(characterEscapeOrReference, decode);\n}\n\n/**\n * @param {string} $0\n * @param {string} $1\n * @param {string} $2\n * @returns {string}\n */\nfunction decode($0, $1, $2) {\n  if ($1) {\n    // Escape.\n    return $1;\n  }\n\n  // Reference.\n  const head = $2.charCodeAt(0);\n  if (head === 35) {\n    const head = $2.charCodeAt(1);\n    const hex = head === 120 || head === 88;\n    return decodeNumericCharacterReference($2.slice(hex ? 2 : 1), hex ? 16 : 10);\n  }\n  return decodeNamedCharacterReference($2) || $0;\n}","/**\n * @typedef {import('micromark-util-types').Encoding} Encoding\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').ParseOptions} ParseOptions\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Value} Value\n *\n * @typedef {import('unist').Parent} UnistParent\n * @typedef {import('unist').Point} Point\n *\n * @typedef {import('mdast').PhrasingContent} PhrasingContent\n * @typedef {import('mdast').StaticPhrasingContent} StaticPhrasingContent\n * @typedef {import('mdast').Content} Content\n * @typedef {import('mdast').Break} Break\n * @typedef {import('mdast').Blockquote} Blockquote\n * @typedef {import('mdast').Code} Code\n * @typedef {import('mdast').Definition} Definition\n * @typedef {import('mdast').Emphasis} Emphasis\n * @typedef {import('mdast').Heading} Heading\n * @typedef {import('mdast').HTML} HTML\n * @typedef {import('mdast').Image} Image\n * @typedef {import('mdast').ImageReference} ImageReference\n * @typedef {import('mdast').InlineCode} InlineCode\n * @typedef {import('mdast').Link} Link\n * @typedef {import('mdast').LinkReference} LinkReference\n * @typedef {import('mdast').List} List\n * @typedef {import('mdast').ListItem} ListItem\n * @typedef {import('mdast').Paragraph} Paragraph\n * @typedef {import('mdast').Root} Root\n * @typedef {import('mdast').Strong} Strong\n * @typedef {import('mdast').Text} Text\n * @typedef {import('mdast').ThematicBreak} ThematicBreak\n * @typedef {import('mdast').ReferenceType} ReferenceType\n * @typedef {import('../index.js').CompileData} CompileData\n */\n\n/**\n * @typedef {Root | Content} Node\n * @typedef {Extract<Node, UnistParent>} Parent\n *\n * @typedef {Omit<UnistParent, 'type' | 'children'> & {type: 'fragment', children: Array<PhrasingContent>}} Fragment\n */\n\n/**\n * @callback Transform\n *   Extra transform, to change the AST afterwards.\n * @param {Root} tree\n *   Tree to transform.\n * @returns {Root | undefined | null | void}\n *   New tree or nothing (in which case the current tree is used).\n *\n * @callback Handle\n *   Handle a token.\n * @param {CompileContext} this\n *   Context.\n * @param {Token} token\n *   Current token.\n * @returns {void}\n *   Nothing.\n *\n * @typedef {Record<string, Handle>} Handles\n *   Token types mapping to handles\n *\n * @callback OnEnterError\n *   Handle the case where the `right` token is open, but it is closed (by the\n *   `left` token) or because we reached the end of the document.\n * @param {Omit<CompileContext, 'sliceSerialize'>} this\n *   Context.\n * @param {Token | undefined} left\n *   Left token.\n * @param {Token} right\n *   Right token.\n * @returns {void}\n *   Nothing.\n *\n * @callback OnExitError\n *   Handle the case where the `right` token is open but it is closed by\n *   exiting the `left` token.\n * @param {Omit<CompileContext, 'sliceSerialize'>} this\n *   Context.\n * @param {Token} left\n *   Left token.\n * @param {Token} right\n *   Right token.\n * @returns {void}\n *   Nothing.\n *\n * @typedef {[Token, OnEnterError | undefined]} TokenTuple\n *   Open token on the stack, with an optional error handler for when\n *   that token isn’t closed properly.\n */\n\n/**\n * @typedef Config\n *   Configuration.\n *\n *   We have our defaults, but extensions will add more.\n * @property {Array<string>} canContainEols\n *   Token types where line endings are used.\n * @property {Handles} enter\n *   Opening handles.\n * @property {Handles} exit\n *   Closing handles.\n * @property {Array<Transform>} transforms\n *   Tree transforms.\n *\n * @typedef {Partial<Config>} Extension\n *   Change how markdown tokens from micromark are turned into mdast.\n *\n * @typedef CompileContext\n *   mdast compiler context.\n * @property {Array<Node | Fragment>} stack\n *   Stack of nodes.\n * @property {Array<TokenTuple>} tokenStack\n *   Stack of tokens.\n * @property {<Key extends keyof CompileData>(key: Key) => CompileData[Key]} getData\n *   Get data from the key/value store.\n * @property {<Key extends keyof CompileData>(key: Key, value?: CompileData[Key]) => void} setData\n *   Set data into the key/value store.\n * @property {(this: CompileContext) => void} buffer\n *   Capture some of the output data.\n * @property {(this: CompileContext) => string} resume\n *   Stop capturing and access the output data.\n * @property {<Kind extends Node>(this: CompileContext, node: Kind, token: Token, onError?: OnEnterError) => Kind} enter\n *   Enter a token.\n * @property {(this: CompileContext, token: Token, onError?: OnExitError) => Node} exit\n *   Exit a token.\n * @property {TokenizeContext['sliceSerialize']} sliceSerialize\n *   Get the string value of a token.\n * @property {Config} config\n *   Configuration.\n *\n * @typedef FromMarkdownOptions\n *   Configuration for how to build mdast.\n * @property {Array<Extension | Array<Extension>> | null | undefined} [mdastExtensions]\n *   Extensions for this utility to change how tokens are turned into a tree.\n *\n * @typedef {ParseOptions & FromMarkdownOptions} Options\n *   Configuration.\n */\n\n// To do: micromark: create a registry of tokens?\n// To do: next major: don’t return given `Node` from `enter`.\n// To do: next major: remove setter/getter.\n\nimport { toString } from 'mdast-util-to-string';\nimport { parse } from 'micromark/lib/parse.js';\nimport { preprocess } from 'micromark/lib/preprocess.js';\nimport { postprocess } from 'micromark/lib/postprocess.js';\nimport { decodeNumericCharacterReference } from 'micromark-util-decode-numeric-character-reference';\nimport { decodeString } from 'micromark-util-decode-string';\nimport { normalizeIdentifier } from 'micromark-util-normalize-identifier';\nimport { decodeNamedCharacterReference } from 'decode-named-character-reference';\nimport { stringifyPosition } from 'unist-util-stringify-position';\nconst own = {}.hasOwnProperty;\n\n/**\n * @param value\n *   Markdown to parse.\n * @param encoding\n *   Character encoding for when `value` is `Buffer`.\n * @param options\n *   Configuration.\n * @returns\n *   mdast tree.\n */\nexport const fromMarkdown =\n/**\n * @type {(\n *   ((value: Value, encoding: Encoding, options?: Options | null | undefined) => Root) &\n *   ((value: Value, options?: Options | null | undefined) => Root)\n * )}\n */\n\n/**\n * @param {Value} value\n * @param {Encoding | Options | null | undefined} [encoding]\n * @param {Options | null | undefined} [options]\n * @returns {Root}\n */\nfunction (value, encoding, options) {\n  if (typeof encoding !== 'string') {\n    options = encoding;\n    encoding = undefined;\n  }\n  return compiler(options)(postprocess(parse(options).document().write(preprocess()(value, encoding, true))));\n};\n\n/**\n * Note this compiler only understand complete buffering, not streaming.\n *\n * @param {Options | null | undefined} [options]\n */\nfunction compiler(options) {\n  /** @type {Config} */\n  const config = {\n    transforms: [],\n    canContainEols: ['emphasis', 'fragment', 'heading', 'paragraph', 'strong'],\n    enter: {\n      autolink: opener(link),\n      autolinkProtocol: onenterdata,\n      autolinkEmail: onenterdata,\n      atxHeading: opener(heading),\n      blockQuote: opener(blockQuote),\n      characterEscape: onenterdata,\n      characterReference: onenterdata,\n      codeFenced: opener(codeFlow),\n      codeFencedFenceInfo: buffer,\n      codeFencedFenceMeta: buffer,\n      codeIndented: opener(codeFlow, buffer),\n      codeText: opener(codeText, buffer),\n      codeTextData: onenterdata,\n      data: onenterdata,\n      codeFlowValue: onenterdata,\n      definition: opener(definition),\n      definitionDestinationString: buffer,\n      definitionLabelString: buffer,\n      definitionTitleString: buffer,\n      emphasis: opener(emphasis),\n      hardBreakEscape: opener(hardBreak),\n      hardBreakTrailing: opener(hardBreak),\n      htmlFlow: opener(html, buffer),\n      htmlFlowData: onenterdata,\n      htmlText: opener(html, buffer),\n      htmlTextData: onenterdata,\n      image: opener(image),\n      label: buffer,\n      link: opener(link),\n      listItem: opener(listItem),\n      listItemValue: onenterlistitemvalue,\n      listOrdered: opener(list, onenterlistordered),\n      listUnordered: opener(list),\n      paragraph: opener(paragraph),\n      reference: onenterreference,\n      referenceString: buffer,\n      resourceDestinationString: buffer,\n      resourceTitleString: buffer,\n      setextHeading: opener(heading),\n      strong: opener(strong),\n      thematicBreak: opener(thematicBreak)\n    },\n    exit: {\n      atxHeading: closer(),\n      atxHeadingSequence: onexitatxheadingsequence,\n      autolink: closer(),\n      autolinkEmail: onexitautolinkemail,\n      autolinkProtocol: onexitautolinkprotocol,\n      blockQuote: closer(),\n      characterEscapeValue: onexitdata,\n      characterReferenceMarkerHexadecimal: onexitcharacterreferencemarker,\n      characterReferenceMarkerNumeric: onexitcharacterreferencemarker,\n      characterReferenceValue: onexitcharacterreferencevalue,\n      codeFenced: closer(onexitcodefenced),\n      codeFencedFence: onexitcodefencedfence,\n      codeFencedFenceInfo: onexitcodefencedfenceinfo,\n      codeFencedFenceMeta: onexitcodefencedfencemeta,\n      codeFlowValue: onexitdata,\n      codeIndented: closer(onexitcodeindented),\n      codeText: closer(onexitcodetext),\n      codeTextData: onexitdata,\n      data: onexitdata,\n      definition: closer(),\n      definitionDestinationString: onexitdefinitiondestinationstring,\n      definitionLabelString: onexitdefinitionlabelstring,\n      definitionTitleString: onexitdefinitiontitlestring,\n      emphasis: closer(),\n      hardBreakEscape: closer(onexithardbreak),\n      hardBreakTrailing: closer(onexithardbreak),\n      htmlFlow: closer(onexithtmlflow),\n      htmlFlowData: onexitdata,\n      htmlText: closer(onexithtmltext),\n      htmlTextData: onexitdata,\n      image: closer(onexitimage),\n      label: onexitlabel,\n      labelText: onexitlabeltext,\n      lineEnding: onexitlineending,\n      link: closer(onexitlink),\n      listItem: closer(),\n      listOrdered: closer(),\n      listUnordered: closer(),\n      paragraph: closer(),\n      referenceString: onexitreferencestring,\n      resourceDestinationString: onexitresourcedestinationstring,\n      resourceTitleString: onexitresourcetitlestring,\n      resource: onexitresource,\n      setextHeading: closer(onexitsetextheading),\n      setextHeadingLineSequence: onexitsetextheadinglinesequence,\n      setextHeadingText: onexitsetextheadingtext,\n      strong: closer(),\n      thematicBreak: closer()\n    }\n  };\n  configure(config, (options || {}).mdastExtensions || []);\n\n  /** @type {CompileData} */\n  const data = {};\n  return compile;\n\n  /**\n   * Turn micromark events into an mdast tree.\n   *\n   * @param {Array<Event>} events\n   *   Events.\n   * @returns {Root}\n   *   mdast tree.\n   */\n  function compile(events) {\n    /** @type {Root} */\n    let tree = {\n      type: 'root',\n      children: []\n    };\n    /** @type {Omit<CompileContext, 'sliceSerialize'>} */\n    const context = {\n      stack: [tree],\n      tokenStack: [],\n      config,\n      enter,\n      exit,\n      buffer,\n      resume,\n      setData,\n      getData\n    };\n    /** @type {Array<number>} */\n    const listStack = [];\n    let index = -1;\n    while (++index < events.length) {\n      // We preprocess lists to add `listItem` tokens, and to infer whether\n      // items the list itself are spread out.\n      if (events[index][1].type === 'listOrdered' || events[index][1].type === 'listUnordered') {\n        if (events[index][0] === 'enter') {\n          listStack.push(index);\n        } else {\n          const tail = listStack.pop();\n          index = prepareList(events, tail, index);\n        }\n      }\n    }\n    index = -1;\n    while (++index < events.length) {\n      const handler = config[events[index][0]];\n      if (own.call(handler, events[index][1].type)) {\n        handler[events[index][1].type].call(Object.assign({\n          sliceSerialize: events[index][2].sliceSerialize\n        }, context), events[index][1]);\n      }\n    }\n\n    // Handle tokens still being open.\n    if (context.tokenStack.length > 0) {\n      const tail = context.tokenStack[context.tokenStack.length - 1];\n      const handler = tail[1] || defaultOnError;\n      handler.call(context, undefined, tail[0]);\n    }\n\n    // Figure out `root` position.\n    tree.position = {\n      start: point(events.length > 0 ? events[0][1].start : {\n        line: 1,\n        column: 1,\n        offset: 0\n      }),\n      end: point(events.length > 0 ? events[events.length - 2][1].end : {\n        line: 1,\n        column: 1,\n        offset: 0\n      })\n    };\n\n    // Call transforms.\n    index = -1;\n    while (++index < config.transforms.length) {\n      tree = config.transforms[index](tree) || tree;\n    }\n    return tree;\n  }\n\n  /**\n   * @param {Array<Event>} events\n   * @param {number} start\n   * @param {number} length\n   * @returns {number}\n   */\n  function prepareList(events, start, length) {\n    let index = start - 1;\n    let containerBalance = -1;\n    let listSpread = false;\n    /** @type {Token | undefined} */\n    let listItem;\n    /** @type {number | undefined} */\n    let lineIndex;\n    /** @type {number | undefined} */\n    let firstBlankLineIndex;\n    /** @type {boolean | undefined} */\n    let atMarker;\n    while (++index <= length) {\n      const event = events[index];\n      if (event[1].type === 'listUnordered' || event[1].type === 'listOrdered' || event[1].type === 'blockQuote') {\n        if (event[0] === 'enter') {\n          containerBalance++;\n        } else {\n          containerBalance--;\n        }\n        atMarker = undefined;\n      } else if (event[1].type === 'lineEndingBlank') {\n        if (event[0] === 'enter') {\n          if (listItem && !atMarker && !containerBalance && !firstBlankLineIndex) {\n            firstBlankLineIndex = index;\n          }\n          atMarker = undefined;\n        }\n      } else if (event[1].type === 'linePrefix' || event[1].type === 'listItemValue' || event[1].type === 'listItemMarker' || event[1].type === 'listItemPrefix' || event[1].type === 'listItemPrefixWhitespace') {\n        // Empty.\n      } else {\n        atMarker = undefined;\n      }\n      if (!containerBalance && event[0] === 'enter' && event[1].type === 'listItemPrefix' || containerBalance === -1 && event[0] === 'exit' && (event[1].type === 'listUnordered' || event[1].type === 'listOrdered')) {\n        if (listItem) {\n          let tailIndex = index;\n          lineIndex = undefined;\n          while (tailIndex--) {\n            const tailEvent = events[tailIndex];\n            if (tailEvent[1].type === 'lineEnding' || tailEvent[1].type === 'lineEndingBlank') {\n              if (tailEvent[0] === 'exit') continue;\n              if (lineIndex) {\n                events[lineIndex][1].type = 'lineEndingBlank';\n                listSpread = true;\n              }\n              tailEvent[1].type = 'lineEnding';\n              lineIndex = tailIndex;\n            } else if (tailEvent[1].type === 'linePrefix' || tailEvent[1].type === 'blockQuotePrefix' || tailEvent[1].type === 'blockQuotePrefixWhitespace' || tailEvent[1].type === 'blockQuoteMarker' || tailEvent[1].type === 'listItemIndent') {\n              // Empty\n            } else {\n              break;\n            }\n          }\n          if (firstBlankLineIndex && (!lineIndex || firstBlankLineIndex < lineIndex)) {\n            listItem._spread = true;\n          }\n\n          // Fix position.\n          listItem.end = Object.assign({}, lineIndex ? events[lineIndex][1].start : event[1].end);\n          events.splice(lineIndex || index, 0, ['exit', listItem, event[2]]);\n          index++;\n          length++;\n        }\n\n        // Create a new list item.\n        if (event[1].type === 'listItemPrefix') {\n          listItem = {\n            type: 'listItem',\n            _spread: false,\n            start: Object.assign({}, event[1].start),\n            // @ts-expect-error: we’ll add `end` in a second.\n            end: undefined\n          };\n          // @ts-expect-error: `listItem` is most definitely defined, TS...\n          events.splice(index, 0, ['enter', listItem, event[2]]);\n          index++;\n          length++;\n          firstBlankLineIndex = undefined;\n          atMarker = true;\n        }\n      }\n    }\n    events[start][1]._spread = listSpread;\n    return length;\n  }\n\n  /**\n   * Set data.\n   *\n   * @template {keyof CompileData} Key\n   *   Field type.\n   * @param {Key} key\n   *   Key of field.\n   * @param {CompileData[Key]} [value]\n   *   New value.\n   * @returns {void}\n   *   Nothing.\n   */\n  function setData(key, value) {\n    data[key] = value;\n  }\n\n  /**\n   * Get data.\n   *\n   * @template {keyof CompileData} Key\n   *   Field type.\n   * @param {Key} key\n   *   Key of field.\n   * @returns {CompileData[Key]}\n   *   Value.\n   */\n  function getData(key) {\n    return data[key];\n  }\n\n  /**\n   * Create an opener handle.\n   *\n   * @param {(token: Token) => Node} create\n   *   Create a node.\n   * @param {Handle} [and]\n   *   Optional function to also run.\n   * @returns {Handle}\n   *   Handle.\n   */\n  function opener(create, and) {\n    return open;\n\n    /**\n     * @this {CompileContext}\n     * @param {Token} token\n     * @returns {void}\n     */\n    function open(token) {\n      enter.call(this, create(token), token);\n      if (and) and.call(this, token);\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @returns {void}\n   */\n  function buffer() {\n    this.stack.push({\n      type: 'fragment',\n      children: []\n    });\n  }\n\n  /**\n   * @template {Node} Kind\n   *   Node type.\n   * @this {CompileContext}\n   *   Context.\n   * @param {Kind} node\n   *   Node to enter.\n   * @param {Token} token\n   *   Corresponding token.\n   * @param {OnEnterError | undefined} [errorHandler]\n   *   Handle the case where this token is open, but it is closed by something else.\n   * @returns {Kind}\n   *   The given node.\n   */\n  function enter(node, token, errorHandler) {\n    const parent = this.stack[this.stack.length - 1];\n    // @ts-expect-error: Assume `Node` can exist as a child of `parent`.\n    parent.children.push(node);\n    this.stack.push(node);\n    this.tokenStack.push([token, errorHandler]);\n    // @ts-expect-error: `end` will be patched later.\n    node.position = {\n      start: point(token.start)\n    };\n    return node;\n  }\n\n  /**\n   * Create a closer handle.\n   *\n   * @param {Handle} [and]\n   *   Optional function to also run.\n   * @returns {Handle}\n   *   Handle.\n   */\n  function closer(and) {\n    return close;\n\n    /**\n     * @this {CompileContext}\n     * @param {Token} token\n     * @returns {void}\n     */\n    function close(token) {\n      if (and) and.call(this, token);\n      exit.call(this, token);\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   *   Context.\n   * @param {Token} token\n   *   Corresponding token.\n   * @param {OnExitError | undefined} [onExitError]\n   *   Handle the case where another token is open.\n   * @returns {Node}\n   *   The closed node.\n   */\n  function exit(token, onExitError) {\n    const node = this.stack.pop();\n    const open = this.tokenStack.pop();\n    if (!open) {\n      throw new Error('Cannot close `' + token.type + '` (' + stringifyPosition({\n        start: token.start,\n        end: token.end\n      }) + '): it’s not open');\n    } else if (open[0].type !== token.type) {\n      if (onExitError) {\n        onExitError.call(this, token, open[0]);\n      } else {\n        const handler = open[1] || defaultOnError;\n        handler.call(this, token, open[0]);\n      }\n    }\n    node.position.end = point(token.end);\n    return node;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @returns {string}\n   */\n  function resume() {\n    return toString(this.stack.pop());\n  }\n\n  //\n  // Handlers.\n  //\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onenterlistordered() {\n    setData('expectingFirstListItemValue', true);\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onenterlistitemvalue(token) {\n    if (getData('expectingFirstListItemValue')) {\n      const ancestor = this.stack[this.stack.length - 2];\n      ancestor.start = Number.parseInt(this.sliceSerialize(token), 10);\n      setData('expectingFirstListItemValue');\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefencedfenceinfo() {\n    const data = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.lang = data;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefencedfencemeta() {\n    const data = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.meta = data;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefencedfence() {\n    // Exit if this is the closing fence.\n    if (getData('flowCodeInside')) return;\n    this.buffer();\n    setData('flowCodeInside', true);\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefenced() {\n    const data = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.value = data.replace(/^(\\r?\\n|\\r)|(\\r?\\n|\\r)$/g, '');\n    setData('flowCodeInside');\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodeindented() {\n    const data = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.value = data.replace(/(\\r?\\n|\\r)$/g, '');\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitdefinitionlabelstring(token) {\n    const label = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.label = label;\n    node.identifier = normalizeIdentifier(this.sliceSerialize(token)).toLowerCase();\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitdefinitiontitlestring() {\n    const data = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.title = data;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitdefinitiondestinationstring() {\n    const data = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.url = data;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitatxheadingsequence(token) {\n    const node = this.stack[this.stack.length - 1];\n    if (!node.depth) {\n      const depth = this.sliceSerialize(token).length;\n      node.depth = depth;\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitsetextheadingtext() {\n    setData('setextHeadingSlurpLineEnding', true);\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitsetextheadinglinesequence(token) {\n    const node = this.stack[this.stack.length - 1];\n    node.depth = this.sliceSerialize(token).charCodeAt(0) === 61 ? 1 : 2;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitsetextheading() {\n    setData('setextHeadingSlurpLineEnding');\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onenterdata(token) {\n    const node = this.stack[this.stack.length - 1];\n    let tail = node.children[node.children.length - 1];\n    if (!tail || tail.type !== 'text') {\n      // Add a new text node.\n      tail = text();\n      // @ts-expect-error: we’ll add `end` later.\n      tail.position = {\n        start: point(token.start)\n      };\n      // @ts-expect-error: Assume `parent` accepts `text`.\n      node.children.push(tail);\n    }\n    this.stack.push(tail);\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitdata(token) {\n    const tail = this.stack.pop();\n    tail.value += this.sliceSerialize(token);\n    tail.position.end = point(token.end);\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitlineending(token) {\n    const context = this.stack[this.stack.length - 1];\n    // If we’re at a hard break, include the line ending in there.\n    if (getData('atHardBreak')) {\n      const tail = context.children[context.children.length - 1];\n      tail.position.end = point(token.end);\n      setData('atHardBreak');\n      return;\n    }\n    if (!getData('setextHeadingSlurpLineEnding') && config.canContainEols.includes(context.type)) {\n      onenterdata.call(this, token);\n      onexitdata.call(this, token);\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexithardbreak() {\n    setData('atHardBreak', true);\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexithtmlflow() {\n    const data = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.value = data;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexithtmltext() {\n    const data = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.value = data;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitcodetext() {\n    const data = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.value = data;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitlink() {\n    const node = this.stack[this.stack.length - 1];\n    // Note: there are also `identifier` and `label` fields on this link node!\n    // These are used / cleaned here.\n    // To do: clean.\n    if (getData('inReference')) {\n      /** @type {ReferenceType} */\n      const referenceType = getData('referenceType') || 'shortcut';\n      node.type += 'Reference';\n      // @ts-expect-error: mutate.\n      node.referenceType = referenceType;\n      // @ts-expect-error: mutate.\n      delete node.url;\n      delete node.title;\n    } else {\n      // @ts-expect-error: mutate.\n      delete node.identifier;\n      // @ts-expect-error: mutate.\n      delete node.label;\n    }\n    setData('referenceType');\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitimage() {\n    const node = this.stack[this.stack.length - 1];\n    // Note: there are also `identifier` and `label` fields on this link node!\n    // These are used / cleaned here.\n    // To do: clean.\n    if (getData('inReference')) {\n      /** @type {ReferenceType} */\n      const referenceType = getData('referenceType') || 'shortcut';\n      node.type += 'Reference';\n      // @ts-expect-error: mutate.\n      node.referenceType = referenceType;\n      // @ts-expect-error: mutate.\n      delete node.url;\n      delete node.title;\n    } else {\n      // @ts-expect-error: mutate.\n      delete node.identifier;\n      // @ts-expect-error: mutate.\n      delete node.label;\n    }\n    setData('referenceType');\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitlabeltext(token) {\n    const string = this.sliceSerialize(token);\n    const ancestor = this.stack[this.stack.length - 2];\n    // @ts-expect-error: stash this on the node, as it might become a reference\n    // later.\n    ancestor.label = decodeString(string);\n    // @ts-expect-error: same as above.\n    ancestor.identifier = normalizeIdentifier(string).toLowerCase();\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitlabel() {\n    const fragment = this.stack[this.stack.length - 1];\n    const value = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    // Assume a reference.\n    setData('inReference', true);\n    if (node.type === 'link') {\n      /** @type {Array<StaticPhrasingContent>} */\n      // @ts-expect-error: Assume static phrasing content.\n      const children = fragment.children;\n      node.children = children;\n    } else {\n      node.alt = value;\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitresourcedestinationstring() {\n    const data = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.url = data;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitresourcetitlestring() {\n    const data = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.title = data;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitresource() {\n    setData('inReference');\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onenterreference() {\n    setData('referenceType', 'collapsed');\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitreferencestring(token) {\n    const label = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    // @ts-expect-error: stash this on the node, as it might become a reference\n    // later.\n    node.label = label;\n    // @ts-expect-error: same as above.\n    node.identifier = normalizeIdentifier(this.sliceSerialize(token)).toLowerCase();\n    setData('referenceType', 'full');\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitcharacterreferencemarker(token) {\n    setData('characterReferenceType', token.type);\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcharacterreferencevalue(token) {\n    const data = this.sliceSerialize(token);\n    const type = getData('characterReferenceType');\n    /** @type {string} */\n    let value;\n    if (type) {\n      value = decodeNumericCharacterReference(data, type === 'characterReferenceMarkerNumeric' ? 10 : 16);\n      setData('characterReferenceType');\n    } else {\n      const result = decodeNamedCharacterReference(data);\n      value = result;\n    }\n    const tail = this.stack.pop();\n    tail.value += value;\n    tail.position.end = point(token.end);\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitautolinkprotocol(token) {\n    onexitdata.call(this, token);\n    const node = this.stack[this.stack.length - 1];\n    node.url = this.sliceSerialize(token);\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitautolinkemail(token) {\n    onexitdata.call(this, token);\n    const node = this.stack[this.stack.length - 1];\n    node.url = 'mailto:' + this.sliceSerialize(token);\n  }\n\n  //\n  // Creaters.\n  //\n\n  /** @returns {Blockquote} */\n  function blockQuote() {\n    return {\n      type: 'blockquote',\n      children: []\n    };\n  }\n\n  /** @returns {Code} */\n  function codeFlow() {\n    return {\n      type: 'code',\n      lang: null,\n      meta: null,\n      value: ''\n    };\n  }\n\n  /** @returns {InlineCode} */\n  function codeText() {\n    return {\n      type: 'inlineCode',\n      value: ''\n    };\n  }\n\n  /** @returns {Definition} */\n  function definition() {\n    return {\n      type: 'definition',\n      identifier: '',\n      label: null,\n      title: null,\n      url: ''\n    };\n  }\n\n  /** @returns {Emphasis} */\n  function emphasis() {\n    return {\n      type: 'emphasis',\n      children: []\n    };\n  }\n\n  /** @returns {Heading} */\n  function heading() {\n    // @ts-expect-error `depth` will be set later.\n    return {\n      type: 'heading',\n      depth: undefined,\n      children: []\n    };\n  }\n\n  /** @returns {Break} */\n  function hardBreak() {\n    return {\n      type: 'break'\n    };\n  }\n\n  /** @returns {HTML} */\n  function html() {\n    return {\n      type: 'html',\n      value: ''\n    };\n  }\n\n  /** @returns {Image} */\n  function image() {\n    return {\n      type: 'image',\n      title: null,\n      url: '',\n      alt: null\n    };\n  }\n\n  /** @returns {Link} */\n  function link() {\n    return {\n      type: 'link',\n      title: null,\n      url: '',\n      children: []\n    };\n  }\n\n  /**\n   * @param {Token} token\n   * @returns {List}\n   */\n  function list(token) {\n    return {\n      type: 'list',\n      ordered: token.type === 'listOrdered',\n      start: null,\n      spread: token._spread,\n      children: []\n    };\n  }\n\n  /**\n   * @param {Token} token\n   * @returns {ListItem}\n   */\n  function listItem(token) {\n    return {\n      type: 'listItem',\n      spread: token._spread,\n      checked: null,\n      children: []\n    };\n  }\n\n  /** @returns {Paragraph} */\n  function paragraph() {\n    return {\n      type: 'paragraph',\n      children: []\n    };\n  }\n\n  /** @returns {Strong} */\n  function strong() {\n    return {\n      type: 'strong',\n      children: []\n    };\n  }\n\n  /** @returns {Text} */\n  function text() {\n    return {\n      type: 'text',\n      value: ''\n    };\n  }\n\n  /** @returns {ThematicBreak} */\n  function thematicBreak() {\n    return {\n      type: 'thematicBreak'\n    };\n  }\n}\n\n/**\n * Copy a point-like value.\n *\n * @param {Point} d\n *   Point-like value.\n * @returns {Point}\n *   unist point.\n */\nfunction point(d) {\n  return {\n    line: d.line,\n    column: d.column,\n    offset: d.offset\n  };\n}\n\n/**\n * @param {Config} combined\n * @param {Array<Extension | Array<Extension>>} extensions\n * @returns {void}\n */\nfunction configure(combined, extensions) {\n  let index = -1;\n  while (++index < extensions.length) {\n    const value = extensions[index];\n    if (Array.isArray(value)) {\n      configure(combined, value);\n    } else {\n      extension(combined, value);\n    }\n  }\n}\n\n/**\n * @param {Config} combined\n * @param {Extension} extension\n * @returns {void}\n */\nfunction extension(combined, extension) {\n  /** @type {keyof Extension} */\n  let key;\n  for (key in extension) {\n    if (own.call(extension, key)) {\n      if (key === 'canContainEols') {\n        const right = extension[key];\n        if (right) {\n          combined[key].push(...right);\n        }\n      } else if (key === 'transforms') {\n        const right = extension[key];\n        if (right) {\n          combined[key].push(...right);\n        }\n      } else if (key === 'enter' || key === 'exit') {\n        const right = extension[key];\n        if (right) {\n          Object.assign(combined[key], right);\n        }\n      }\n    }\n  }\n}\n\n/** @type {OnEnterError} */\nfunction defaultOnError(left, right) {\n  if (left) {\n    throw new Error('Cannot close `' + left.type + '` (' + stringifyPosition({\n      start: left.start,\n      end: left.end\n    }) + '): a different token (`' + right.type + '`, ' + stringifyPosition({\n      start: right.start,\n      end: right.end\n    }) + ') is open');\n  } else {\n    throw new Error('Cannot close document, a token (`' + right.type + '`, ' + stringifyPosition({\n      start: right.start,\n      end: right.end\n    }) + ') is still open');\n  }\n}","/**\n * @typedef {import('micromark-util-types').Event} Event\n */\n\nimport { subtokenize } from 'micromark-util-subtokenize';\n\n/**\n * @param {Array<Event>} events\n * @returns {Array<Event>}\n */\nexport function postprocess(events) {\n  while (!subtokenize(events)) {\n    // Empty\n  }\n  return events;\n}","/**\n * @typedef {import('mdast').Root} Root\n * @typedef {import('mdast-util-from-markdown').Options} Options\n */\n\nimport { fromMarkdown } from 'mdast-util-from-markdown';\n\n/**\n * @this {import('unified').Processor}\n * @type {import('unified').Plugin<[Options?] | void[], string, Root>}\n */\nexport default function remarkParse(options) {\n  /** @type {import('unified').ParserFunction<Root>} */\n  const parser = doc => {\n    // Assume options.\n    const settings = /** @type {Options} */this.data('settings');\n    return fromMarkdown(doc, Object.assign({}, settings, options, {\n      // Note: these options are not in the readme.\n      // The goal is for them to be set by plugins on `data` instead of being\n      // passed by users.\n      extensions: this.data('micromarkExtensions') || [],\n      mdastExtensions: this.data('fromMarkdownExtensions') || []\n    }));\n  };\n  Object.assign(this, {\n    Parser: parser\n  });\n}","import { asciiAlphanumeric } from 'micromark-util-character';\nimport { encode } from 'micromark-util-encode';\n/**\n * Make a value safe for injection as a URL.\n *\n * This encodes unsafe characters with percent-encoding and skips already\n * encoded sequences (see `normalizeUri`).\n * Further unsafe characters are encoded as character references (see\n * `micromark-util-encode`).\n *\n * A regex of allowed protocols can be given, in which case the URL is\n * sanitized.\n * For example, `/^(https?|ircs?|mailto|xmpp)$/i` can be used for `a[href]`, or\n * `/^https?$/i` for `img[src]` (this is what `github.com` allows).\n * If the URL includes an unknown protocol (one not matched by `protocol`, such\n * as a dangerous example, `javascript:`), the value is ignored.\n *\n * @param {string | undefined} url\n *   URI to sanitize.\n * @param {RegExp | null | undefined} [protocol]\n *   Allowed protocols.\n * @returns {string}\n *   Sanitized URI.\n */\nexport function sanitizeUri(url, protocol) {\n  const value = encode(normalizeUri(url || ''));\n  if (!protocol) {\n    return value;\n  }\n  const colon = value.indexOf(':');\n  const questionMark = value.indexOf('?');\n  const numberSign = value.indexOf('#');\n  const slash = value.indexOf('/');\n  if (\n  // If there is no protocol, it’s relative.\n  colon < 0 ||\n  // If the first colon is after a `?`, `#`, or `/`, it’s not a protocol.\n  slash > -1 && colon > slash || questionMark > -1 && colon > questionMark || numberSign > -1 && colon > numberSign ||\n  // It is a protocol, it should be allowed.\n  protocol.test(value.slice(0, colon))) {\n    return value;\n  }\n  return '';\n}\n\n/**\n * Normalize a URL.\n *\n * Encode unsafe characters with percent-encoding, skipping already encoded\n * sequences.\n *\n * @param {string} value\n *   URI to normalize.\n * @returns {string}\n *   Normalized URI.\n */\nexport function normalizeUri(value) {\n  /** @type {Array<string>} */\n  const result = [];\n  let index = -1;\n  let start = 0;\n  let skip = 0;\n  while (++index < value.length) {\n    const code = value.charCodeAt(index);\n    /** @type {string} */\n    let replace = '';\n\n    // A correct percent encoded value.\n    if (code === 37 && asciiAlphanumeric(value.charCodeAt(index + 1)) && asciiAlphanumeric(value.charCodeAt(index + 2))) {\n      skip = 2;\n    }\n    // ASCII.\n    else if (code < 128) {\n      if (!/[!#$&-;=?-Z_a-z~]/.test(String.fromCharCode(code))) {\n        replace = String.fromCharCode(code);\n      }\n    }\n    // Astral.\n    else if (code > 55295 && code < 57344) {\n      const next = value.charCodeAt(index + 1);\n\n      // A correct surrogate pair.\n      if (code < 56320 && next > 56319 && next < 57344) {\n        replace = String.fromCharCode(code, next);\n        skip = 1;\n      }\n      // Lone surrogate.\n      else {\n        replace = '\\uFFFD';\n      }\n    }\n    // Unicode.\n    else {\n      replace = String.fromCharCode(code);\n    }\n    if (replace) {\n      result.push(value.slice(start, index), encodeURIComponent(replace));\n      start = index + skip + 1;\n      replace = '';\n    }\n    if (skip) {\n      index += skip;\n      skip = 0;\n    }\n  }\n  return result.join('') + value.slice(start);\n}","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Parent} Parent\n */\n\n/**\n * @typedef {Record<string, unknown>} Props\n * @typedef {null | undefined | string | Props | TestFunctionAnything | Array<string | Props | TestFunctionAnything>} Test\n *   Check for an arbitrary node, unaware of TypeScript inferral.\n *\n * @callback TestFunctionAnything\n *   Check if a node passes a test, unaware of TypeScript inferral.\n * @param {unknown} this\n *   The given context.\n * @param {Node} node\n *   A node.\n * @param {number | null | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} [parent]\n *   The node’s parent.\n * @returns {boolean | void}\n *   Whether this node passes the test.\n */\n\n/**\n * @template {Node} Kind\n *   Node type.\n * @typedef {Kind['type'] | Partial<Kind> | TestFunctionPredicate<Kind> | Array<Kind['type'] | Partial<Kind> | TestFunctionPredicate<Kind>>} PredicateTest\n *   Check for a node that can be inferred by TypeScript.\n */\n\n/**\n * Check if a node passes a certain test.\n *\n * @template {Node} Kind\n *   Node type.\n * @callback TestFunctionPredicate\n *   Complex test function for a node that can be inferred by TypeScript.\n * @param {Node} node\n *   A node.\n * @param {number | null | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} [parent]\n *   The node’s parent.\n * @returns {node is Kind}\n *   Whether this node passes the test.\n */\n\n/**\n * @callback AssertAnything\n *   Check that an arbitrary value is a node, unaware of TypeScript inferral.\n * @param {unknown} [node]\n *   Anything (typically a node).\n * @param {number | null | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} [parent]\n *   The node’s parent.\n * @returns {boolean}\n *   Whether this is a node and passes a test.\n */\n\n/**\n * Check if a node is a node and passes a certain node test.\n *\n * @template {Node} Kind\n *   Node type.\n * @callback AssertPredicate\n *   Check that an arbitrary value is a specific node, aware of TypeScript.\n * @param {unknown} [node]\n *   Anything (typically a node).\n * @param {number | null | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} [parent]\n *   The node’s parent.\n * @returns {node is Kind}\n *   Whether this is a node and passes a test.\n */\n\n/**\n * Check if `node` is a `Node` and whether it passes the given test.\n *\n * @param node\n *   Thing to check, typically `Node`.\n * @param test\n *   A check for a specific node.\n * @param index\n *   The node’s position in its parent.\n * @param parent\n *   The node’s parent.\n * @returns\n *   Whether `node` is a node and passes a test.\n */\nexport const is =\n/**\n * @type {(\n *   (() => false) &\n *   (<Kind extends Node = Node>(node: unknown, test: PredicateTest<Kind>, index: number, parent: Parent, context?: unknown) => node is Kind) &\n *   (<Kind extends Node = Node>(node: unknown, test: PredicateTest<Kind>, index?: null | undefined, parent?: null | undefined, context?: unknown) => node is Kind) &\n *   ((node: unknown, test: Test, index: number, parent: Parent, context?: unknown) => boolean) &\n *   ((node: unknown, test?: Test, index?: null | undefined, parent?: null | undefined, context?: unknown) => boolean)\n * )}\n */\n\n/**\n * @param {unknown} [node]\n * @param {Test} [test]\n * @param {number | null | undefined} [index]\n * @param {Parent | null | undefined} [parent]\n * @param {unknown} [context]\n * @returns {boolean}\n */\n// eslint-disable-next-line max-params\nfunction is(node, test, index, parent, context) {\n  const check = convert(test);\n  if (index !== undefined && index !== null && (typeof index !== 'number' || index < 0 || index === Number.POSITIVE_INFINITY)) {\n    throw new Error('Expected positive finite index');\n  }\n  if (parent !== undefined && parent !== null && (!is(parent) || !parent.children)) {\n    throw new Error('Expected parent node');\n  }\n  if ((parent === undefined || parent === null) !== (index === undefined || index === null)) {\n    throw new Error('Expected both parent and index');\n  }\n\n  // @ts-expect-error Looks like a node.\n  return node && node.type && typeof node.type === 'string' ? Boolean(check.call(context, node, index, parent)) : false;\n};\n\n/**\n * Generate an assertion from a test.\n *\n * Useful if you’re going to test many nodes, for example when creating a\n * utility where something else passes a compatible test.\n *\n * The created function is a bit faster because it expects valid input only:\n * a `node`, `index`, and `parent`.\n *\n * @param test\n *   *   when nullish, checks if `node` is a `Node`.\n *   *   when `string`, works like passing `(node) => node.type === test`.\n *   *   when `function` checks if function passed the node is true.\n *   *   when `object`, checks that all keys in test are in node, and that they have (strictly) equal values.\n *   *   when `array`, checks if any one of the subtests pass.\n * @returns\n *   An assertion.\n */\nexport const convert =\n/**\n * @type {(\n *   (<Kind extends Node>(test: PredicateTest<Kind>) => AssertPredicate<Kind>) &\n *   ((test?: Test) => AssertAnything)\n * )}\n */\n\n/**\n * @param {Test} [test]\n * @returns {AssertAnything}\n */\nfunction (test) {\n  if (test === undefined || test === null) {\n    return ok;\n  }\n  if (typeof test === 'string') {\n    return typeFactory(test);\n  }\n  if (typeof test === 'object') {\n    return Array.isArray(test) ? anyFactory(test) : propsFactory(test);\n  }\n  if (typeof test === 'function') {\n    return castFactory(test);\n  }\n  throw new Error('Expected function, string, or object as test');\n};\n\n/**\n * @param {Array<string | Props | TestFunctionAnything>} tests\n * @returns {AssertAnything}\n */\nfunction anyFactory(tests) {\n  /** @type {Array<AssertAnything>} */\n  const checks = [];\n  let index = -1;\n  while (++index < tests.length) {\n    checks[index] = convert(tests[index]);\n  }\n  return castFactory(any);\n\n  /**\n   * @this {unknown}\n   * @param {Array<unknown>} parameters\n   * @returns {boolean}\n   */\n  function any() {\n    let index = -1;\n    for (var _len = arguments.length, parameters = new Array(_len), _key = 0; _key < _len; _key++) {\n      parameters[_key] = arguments[_key];\n    }\n    while (++index < checks.length) {\n      if (checks[index].call(this, ...parameters)) return true;\n    }\n    return false;\n  }\n}\n\n/**\n * Turn an object into a test for a node with a certain fields.\n *\n * @param {Props} check\n * @returns {AssertAnything}\n */\nfunction propsFactory(check) {\n  return castFactory(all);\n\n  /**\n   * @param {Node} node\n   * @returns {boolean}\n   */\n  function all(node) {\n    /** @type {string} */\n    let key;\n    for (key in check) {\n      // @ts-expect-error: hush, it sure works as an index.\n      if (node[key] !== check[key]) return false;\n    }\n    return true;\n  }\n}\n\n/**\n * Turn a string into a test for a node with a certain type.\n *\n * @param {string} check\n * @returns {AssertAnything}\n */\nfunction typeFactory(check) {\n  return castFactory(type);\n\n  /**\n   * @param {Node} node\n   */\n  function type(node) {\n    return node && node.type === check;\n  }\n}\n\n/**\n * Turn a custom test into a test for a node that passes that test.\n *\n * @param {TestFunctionAnything} check\n * @returns {AssertAnything}\n */\nfunction castFactory(check) {\n  return assertion;\n\n  /**\n   * @this {unknown}\n   * @param {unknown} node\n   * @param {Array<unknown>} parameters\n   * @returns {boolean}\n   */\n  function assertion(node) {\n    for (var _len2 = arguments.length, parameters = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n      parameters[_key2 - 1] = arguments[_key2];\n    }\n    return Boolean(node && typeof node === 'object' && 'type' in node &&\n    // @ts-expect-error: fine.\n    Boolean(check.call(this, node, ...parameters)));\n  }\n}\nfunction ok() {\n  return true;\n}","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Parent} Parent\n * @typedef {import('unist-util-is').Test} Test\n */\n\n/**\n * @typedef {boolean | 'skip'} Action\n *   Union of the action types.\n *\n * @typedef {number} Index\n *   Move to the sibling at `index` next (after node itself is completely\n *   traversed).\n *\n *   Useful if mutating the tree, such as removing the node the visitor is\n *   currently on, or any of its previous siblings.\n *   Results less than 0 or greater than or equal to `children.length` stop\n *   traversing the parent.\n *\n * @typedef {[(Action | null | undefined | void)?, (Index | null | undefined)?]} ActionTuple\n *   List with one or two values, the first an action, the second an index.\n *\n * @typedef {Action | ActionTuple | Index | null | undefined | void} VisitorResult\n *   Any value that can be returned from a visitor.\n */\n\n/**\n * @template {Node} [Visited=Node]\n *   Visited node type.\n * @template {Parent} [Ancestor=Parent]\n *   Ancestor type.\n * @callback Visitor\n *   Handle a node (matching `test`, if given).\n *\n *   Visitors are free to transform `node`.\n *   They can also transform the parent of node (the last of `ancestors`).\n *\n *   Replacing `node` itself, if `SKIP` is not returned, still causes its\n *   descendants to be walked (which is a bug).\n *\n *   When adding or removing previous siblings of `node` (or next siblings, in\n *   case of reverse), the `Visitor` should return a new `Index` to specify the\n *   sibling to traverse after `node` is traversed.\n *   Adding or removing next siblings of `node` (or previous siblings, in case\n *   of reverse) is handled as expected without needing to return a new `Index`.\n *\n *   Removing the children property of an ancestor still results in them being\n *   traversed.\n * @param {Visited} node\n *   Found node.\n * @param {Array<Ancestor>} ancestors\n *   Ancestors of `node`.\n * @returns {VisitorResult}\n *   What to do next.\n *\n *   An `Index` is treated as a tuple of `[CONTINUE, Index]`.\n *   An `Action` is treated as a tuple of `[Action]`.\n *\n *   Passing a tuple back only makes sense if the `Action` is `SKIP`.\n *   When the `Action` is `EXIT`, that action can be returned.\n *   When the `Action` is `CONTINUE`, `Index` can be returned.\n */\n\n/**\n * @template {Node} [Tree=Node]\n *   Tree type.\n * @template {Test} [Check=string]\n *   Test type.\n * @typedef {Visitor<import('./complex-types.js').Matches<import('./complex-types.js').InclusiveDescendant<Tree>, Check>, Extract<import('./complex-types.js').InclusiveDescendant<Tree>, Parent>>} BuildVisitor\n *   Build a typed `Visitor` function from a tree and a test.\n *\n *   It will infer which values are passed as `node` and which as `parents`.\n */\n\nimport { convert } from 'unist-util-is';\nimport { color } from './color.js';\n\n/**\n * Continue traversing as normal.\n */\nexport const CONTINUE = true;\n\n/**\n * Stop traversing immediately.\n */\nexport const EXIT = false;\n\n/**\n * Do not traverse this node’s children.\n */\nexport const SKIP = 'skip';\n\n/**\n * Visit nodes, with ancestral information.\n *\n * This algorithm performs *depth-first* *tree traversal* in *preorder*\n * (**NLR**) or if `reverse` is given, in *reverse preorder* (**NRL**).\n *\n * You can choose for which nodes `visitor` is called by passing a `test`.\n * For complex tests, you should test yourself in `visitor`, as it will be\n * faster and will have improved type information.\n *\n * Walking the tree is an intensive task.\n * Make use of the return values of the visitor when possible.\n * Instead of walking a tree multiple times, walk it once, use `unist-util-is`\n * to check if a node matches, and then perform different operations.\n *\n * You can change the tree.\n * See `Visitor` for more info.\n *\n * @param tree\n *   Tree to traverse.\n * @param test\n *   `unist-util-is`-compatible test\n * @param visitor\n *   Handle each node.\n * @param reverse\n *   Traverse in reverse preorder (NRL) instead of the default preorder (NLR).\n * @returns\n *   Nothing.\n */\nexport const visitParents =\n/**\n * @type {(\n *   (<Tree extends Node, Check extends Test>(tree: Tree, test: Check, visitor: BuildVisitor<Tree, Check>, reverse?: boolean | null | undefined) => void) &\n *   (<Tree extends Node>(tree: Tree, visitor: BuildVisitor<Tree>, reverse?: boolean | null | undefined) => void)\n * )}\n */\n\n/**\n * @param {Node} tree\n * @param {Test} test\n * @param {Visitor<Node>} visitor\n * @param {boolean | null | undefined} [reverse]\n * @returns {void}\n */\nfunction (tree, test, visitor, reverse) {\n  if (typeof test === 'function' && typeof visitor !== 'function') {\n    reverse = visitor;\n    // @ts-expect-error no visitor given, so `visitor` is test.\n    visitor = test;\n    test = null;\n  }\n  const is = convert(test);\n  const step = reverse ? -1 : 1;\n  factory(tree, undefined, [])();\n\n  /**\n   * @param {Node} node\n   * @param {number | undefined} index\n   * @param {Array<Parent>} parents\n   */\n  function factory(node, index, parents) {\n    /** @type {Record<string, unknown>} */\n    // @ts-expect-error: hush\n    const value = node && typeof node === 'object' ? node : {};\n    if (typeof value.type === 'string') {\n      const name =\n      // `hast`\n      typeof value.tagName === 'string' ? value.tagName :\n      // `xast`\n      typeof value.name === 'string' ? value.name : undefined;\n      Object.defineProperty(visit, 'name', {\n        value: 'node (' + color(node.type + (name ? '<' + name + '>' : '')) + ')'\n      });\n    }\n    return visit;\n    function visit() {\n      /** @type {ActionTuple} */\n      let result = [];\n      /** @type {ActionTuple} */\n      let subresult;\n      /** @type {number} */\n      let offset;\n      /** @type {Array<Parent>} */\n      let grandparents;\n      if (!test || is(node, index, parents[parents.length - 1] || null)) {\n        result = toResult(visitor(node, parents));\n        if (result[0] === EXIT) {\n          return result;\n        }\n      }\n\n      // @ts-expect-error looks like a parent.\n      if (node.children && result[0] !== SKIP) {\n        // @ts-expect-error looks like a parent.\n        offset = (reverse ? node.children.length : -1) + step;\n        // @ts-expect-error looks like a parent.\n        grandparents = parents.concat(node);\n\n        // @ts-expect-error looks like a parent.\n        while (offset > -1 && offset < node.children.length) {\n          // @ts-expect-error looks like a parent.\n          subresult = factory(node.children[offset], offset, grandparents)();\n          if (subresult[0] === EXIT) {\n            return subresult;\n          }\n          offset = typeof subresult[1] === 'number' ? subresult[1] : offset + step;\n        }\n      }\n      return result;\n    }\n  }\n};\n\n/**\n * Turn a return value into a clean result.\n *\n * @param {VisitorResult} value\n *   Valid return values from visitors.\n * @returns {ActionTuple}\n *   Clean result.\n */\nfunction toResult(value) {\n  if (Array.isArray(value)) {\n    return value;\n  }\n  if (typeof value === 'number') {\n    return [CONTINUE, value];\n  }\n  return [value];\n}","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Parent} Parent\n * @typedef {import('unist-util-is').Test} Test\n * @typedef {import('unist-util-visit-parents').VisitorResult} VisitorResult\n */\n\n/**\n * Check if `Child` can be a child of `Ancestor`.\n *\n * Returns the ancestor when `Child` can be a child of `Ancestor`, or returns\n * `never`.\n *\n * @template {Node} Ancestor\n *   Node type.\n * @template {Node} Child\n *   Node type.\n * @typedef {(\n *   Ancestor extends Parent\n *     ? Child extends Ancestor['children'][number]\n *       ? Ancestor\n *       : never\n *     : never\n * )} ParentsOf\n */\n\n/**\n * @template {Node} [Visited=Node]\n *   Visited node type.\n * @template {Parent} [Ancestor=Parent]\n *   Ancestor type.\n * @callback Visitor\n *   Handle a node (matching `test`, if given).\n *\n *   Visitors are free to transform `node`.\n *   They can also transform `parent`.\n *\n *   Replacing `node` itself, if `SKIP` is not returned, still causes its\n *   descendants to be walked (which is a bug).\n *\n *   When adding or removing previous siblings of `node` (or next siblings, in\n *   case of reverse), the `Visitor` should return a new `Index` to specify the\n *   sibling to traverse after `node` is traversed.\n *   Adding or removing next siblings of `node` (or previous siblings, in case\n *   of reverse) is handled as expected without needing to return a new `Index`.\n *\n *   Removing the children property of `parent` still results in them being\n *   traversed.\n * @param {Visited} node\n *   Found node.\n * @param {Visited extends Node ? number | null : never} index\n *   Index of `node` in `parent`.\n * @param {Ancestor extends Node ? Ancestor | null : never} parent\n *   Parent of `node`.\n * @returns {VisitorResult}\n *   What to do next.\n *\n *   An `Index` is treated as a tuple of `[CONTINUE, Index]`.\n *   An `Action` is treated as a tuple of `[Action]`.\n *\n *   Passing a tuple back only makes sense if the `Action` is `SKIP`.\n *   When the `Action` is `EXIT`, that action can be returned.\n *   When the `Action` is `CONTINUE`, `Index` can be returned.\n */\n\n/**\n * Build a typed `Visitor` function from a node and all possible parents.\n *\n * It will infer which values are passed as `node` and which as `parent`.\n *\n * @template {Node} Visited\n *   Node type.\n * @template {Parent} Ancestor\n *   Parent type.\n * @typedef {Visitor<Visited, ParentsOf<Ancestor, Visited>>} BuildVisitorFromMatch\n */\n\n/**\n * Build a typed `Visitor` function from a list of descendants and a test.\n *\n * It will infer which values are passed as `node` and which as `parent`.\n *\n * @template {Node} Descendant\n *   Node type.\n * @template {Test} Check\n *   Test type.\n * @typedef {(\n *   BuildVisitorFromMatch<\n *     import('unist-util-visit-parents/complex-types.js').Matches<Descendant, Check>,\n *     Extract<Descendant, Parent>\n *   >\n * )} BuildVisitorFromDescendants\n */\n\n/**\n * Build a typed `Visitor` function from a tree and a test.\n *\n * It will infer which values are passed as `node` and which as `parent`.\n *\n * @template {Node} [Tree=Node]\n *   Node type.\n * @template {Test} [Check=string]\n *   Test type.\n * @typedef {(\n *   BuildVisitorFromDescendants<\n *     import('unist-util-visit-parents/complex-types.js').InclusiveDescendant<Tree>,\n *     Check\n *   >\n * )} BuildVisitor\n */\n\nimport { visitParents } from 'unist-util-visit-parents';\n\n/**\n * Visit nodes.\n *\n * This algorithm performs *depth-first* *tree traversal* in *preorder*\n * (**NLR**) or if `reverse` is given, in *reverse preorder* (**NRL**).\n *\n * You can choose for which nodes `visitor` is called by passing a `test`.\n * For complex tests, you should test yourself in `visitor`, as it will be\n * faster and will have improved type information.\n *\n * Walking the tree is an intensive task.\n * Make use of the return values of the visitor when possible.\n * Instead of walking a tree multiple times, walk it once, use `unist-util-is`\n * to check if a node matches, and then perform different operations.\n *\n * You can change the tree.\n * See `Visitor` for more info.\n *\n * @param tree\n *   Tree to traverse.\n * @param test\n *   `unist-util-is`-compatible test\n * @param visitor\n *   Handle each node.\n * @param reverse\n *   Traverse in reverse preorder (NRL) instead of the default preorder (NLR).\n * @returns\n *   Nothing.\n */\nexport const visit =\n/**\n * @type {(\n *   (<Tree extends Node, Check extends Test>(tree: Tree, test: Check, visitor: BuildVisitor<Tree, Check>, reverse?: boolean | null | undefined) => void) &\n *   (<Tree extends Node>(tree: Tree, visitor: BuildVisitor<Tree>, reverse?: boolean | null | undefined) => void)\n * )}\n */\n\n/**\n * @param {Node} tree\n * @param {Test} test\n * @param {Visitor} visitor\n * @param {boolean | null | undefined} [reverse]\n * @returns {void}\n */\nfunction (tree, test, visitor, reverse) {\n  if (typeof test === 'function' && typeof visitor !== 'function') {\n    reverse = visitor;\n    visitor = test;\n    test = null;\n  }\n  visitParents(tree, test, overload, reverse);\n\n  /**\n   * @param {Node} node\n   * @param {Array<Parent>} parents\n   */\n  function overload(node, parents) {\n    const parent = parents[parents.length - 1];\n    return visitor(node, parent ? parent.children.indexOf(node) : null, parent);\n  }\n};\nexport { CONTINUE, EXIT, SKIP } from 'unist-util-visit-parents';","/**\n * @typedef {import('unist').Position} Position\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Point} Point\n */\n\n/**\n * @typedef NodeLike\n * @property {string} type\n * @property {PositionLike | null | undefined} [position]\n *\n * @typedef PositionLike\n * @property {PointLike | null | undefined} [start]\n * @property {PointLike | null | undefined} [end]\n *\n * @typedef PointLike\n * @property {number | null | undefined} [line]\n * @property {number | null | undefined} [column]\n * @property {number | null | undefined} [offset]\n */\n\n/**\n * Get the starting point of `node`.\n *\n * @param node\n *   Node.\n * @returns\n *   Point.\n */\nexport const pointStart = point('start');\n\n/**\n * Get the ending point of `node`.\n *\n * @param node\n *   Node.\n * @returns\n *   Point.\n */\nexport const pointEnd = point('end');\n\n/**\n * Get the positional info of `node`.\n *\n * @param {NodeLike | Node | null | undefined} [node]\n *   Node.\n * @returns {Position}\n *   Position.\n */\nexport function position(node) {\n  return {\n    start: pointStart(node),\n    end: pointEnd(node)\n  };\n}\n\n/**\n * Get the positional info of `node`.\n *\n * @param {'start' | 'end'} type\n *   Side.\n * @returns\n *   Getter.\n */\nfunction point(type) {\n  return point;\n\n  /**\n   * Get the point info of `node` at a bound side.\n   *\n   * @param {NodeLike | Node | null | undefined} [node]\n   * @returns {Point}\n   */\n  function point(node) {\n    const point = node && node.position && node.position[type] || {};\n\n    // To do: next major: don’t return points when invalid.\n    return {\n      // @ts-expect-error: in practice, null is allowed.\n      line: point.line || null,\n      // @ts-expect-error: in practice, null is allowed.\n      column: point.column || null,\n      // @ts-expect-error: in practice, null is allowed.\n      offset: point.offset > -1 ? point.offset : null\n    };\n  }\n}","/**\n * @typedef {import('mdast').Root} Root\n * @typedef {import('mdast').Content} Content\n * @typedef {import('mdast').Definition} Definition\n */\n\n/**\n * @typedef {Root | Content} Node\n *\n * @callback GetDefinition\n *   Get a definition by identifier.\n * @param {string | null | undefined} [identifier]\n *   Identifier of definition.\n * @returns {Definition | null}\n *   Definition corresponding to `identifier` or `null`.\n */\n\nimport { visit } from 'unist-util-visit';\nconst own = {}.hasOwnProperty;\n\n/**\n * Find definitions in `tree`.\n *\n * Uses CommonMark precedence, which means that earlier definitions are\n * preferred over duplicate later definitions.\n *\n * @param {Node} tree\n *   Tree to check.\n * @returns {GetDefinition}\n *   Getter.\n */\nexport function definitions(tree) {\n  /** @type {Record<string, Definition>} */\n  const cache = Object.create(null);\n  if (!tree || !tree.type) {\n    throw new Error('mdast-util-definitions expected node');\n  }\n  visit(tree, 'definition', definition => {\n    const id = clean(definition.identifier);\n    if (id && !own.call(cache, id)) {\n      cache[id] = definition;\n    }\n  });\n  return definition;\n\n  /** @type {GetDefinition} */\n  function definition(identifier) {\n    const id = clean(identifier);\n    // To do: next major: return `undefined` when not found.\n    return id && own.call(cache, id) ? cache[id] : null;\n  }\n}\n\n/**\n * @param {string | null | undefined} [value]\n * @returns {string}\n */\nfunction clean(value) {\n  return String(value || '').toUpperCase();\n}","/**\n * @typedef {import('mdast').FootnoteReference} FootnoteReference\n * @typedef {import('hast').Element} Element\n * @typedef {import('../state.js').State} State\n */\n\nimport { normalizeUri } from 'micromark-util-sanitize-uri';\n\n/**\n * Turn an mdast `footnoteReference` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {FootnoteReference} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function footnoteReference(state, node) {\n  const id = String(node.identifier).toUpperCase();\n  const safeId = normalizeUri(id.toLowerCase());\n  const index = state.footnoteOrder.indexOf(id);\n  /** @type {number} */\n  let counter;\n  if (index === -1) {\n    state.footnoteOrder.push(id);\n    state.footnoteCounts[id] = 1;\n    counter = state.footnoteOrder.length;\n  } else {\n    state.footnoteCounts[id]++;\n    counter = index + 1;\n  }\n  const reuseCounter = state.footnoteCounts[id];\n\n  /** @type {Element} */\n  const link = {\n    type: 'element',\n    tagName: 'a',\n    properties: {\n      href: '#' + state.clobberPrefix + 'fn-' + safeId,\n      id: state.clobberPrefix + 'fnref-' + safeId + (reuseCounter > 1 ? '-' + reuseCounter : ''),\n      dataFootnoteRef: true,\n      ariaDescribedBy: ['footnote-label']\n    },\n    children: [{\n      type: 'text',\n      value: String(counter)\n    }]\n  };\n  state.patch(node, link);\n\n  /** @type {Element} */\n  const sup = {\n    type: 'element',\n    tagName: 'sup',\n    properties: {},\n    children: [link]\n  };\n  state.patch(node, sup);\n  return state.applyData(node, sup);\n}","/**\n * @typedef {import('hast').ElementContent} ElementContent\n *\n * @typedef {import('mdast').Content} Content\n * @typedef {import('mdast').Reference} Reference\n * @typedef {import('mdast').Root} Root\n *\n * @typedef {import('./state.js').State} State\n */\n\n/**\n * @typedef {Root | Content} Nodes\n * @typedef {Extract<Nodes, Reference>} References\n */\n\n// To do: next major: always return array.\n\n/**\n * Return the content of a reference without definition as plain text.\n *\n * @param {State} state\n *   Info passed around.\n * @param {References} node\n *   Reference node (image, link).\n * @returns {ElementContent | Array<ElementContent>}\n *   hast content.\n */\nexport function revert(state, node) {\n  const subtype = node.referenceType;\n  let suffix = ']';\n  if (subtype === 'collapsed') {\n    suffix += '[]';\n  } else if (subtype === 'full') {\n    suffix += '[' + (node.label || node.identifier) + ']';\n  }\n  if (node.type === 'imageReference') {\n    return {\n      type: 'text',\n      value: '![' + node.alt + suffix\n    };\n  }\n  const contents = state.all(node);\n  const head = contents[0];\n  if (head && head.type === 'text') {\n    head.value = '[' + head.value;\n  } else {\n    contents.unshift({\n      type: 'text',\n      value: '['\n    });\n  }\n  const tail = contents[contents.length - 1];\n  if (tail && tail.type === 'text') {\n    tail.value += suffix;\n  } else {\n    contents.push({\n      type: 'text',\n      value: suffix\n    });\n  }\n  return contents;\n}","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').Content} Content\n * @typedef {import('mdast').ListItem} ListItem\n * @typedef {import('mdast').Parent} Parent\n * @typedef {import('mdast').Root} Root\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * @typedef {Root | Content} Nodes\n * @typedef {Extract<Nodes, Parent>} Parents\n */\n\n/**\n * Turn an mdast `listItem` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {ListItem} node\n *   mdast node.\n * @param {Parents | null | undefined} parent\n *   Parent of `node`.\n * @returns {Element}\n *   hast node.\n */\nexport function listItem(state, node, parent) {\n  const results = state.all(node);\n  const loose = parent ? listLoose(parent) : listItemLoose(node);\n  /** @type {Properties} */\n  const properties = {};\n  /** @type {Array<ElementContent>} */\n  const children = [];\n  if (typeof node.checked === 'boolean') {\n    const head = results[0];\n    /** @type {Element} */\n    let paragraph;\n    if (head && head.type === 'element' && head.tagName === 'p') {\n      paragraph = head;\n    } else {\n      paragraph = {\n        type: 'element',\n        tagName: 'p',\n        properties: {},\n        children: []\n      };\n      results.unshift(paragraph);\n    }\n    if (paragraph.children.length > 0) {\n      paragraph.children.unshift({\n        type: 'text',\n        value: ' '\n      });\n    }\n    paragraph.children.unshift({\n      type: 'element',\n      tagName: 'input',\n      properties: {\n        type: 'checkbox',\n        checked: node.checked,\n        disabled: true\n      },\n      children: []\n    });\n\n    // According to github-markdown-css, this class hides bullet.\n    // See: <https://github.com/sindresorhus/github-markdown-css>.\n    properties.className = ['task-list-item'];\n  }\n  let index = -1;\n  while (++index < results.length) {\n    const child = results[index];\n\n    // Add eols before nodes, except if this is a loose, first paragraph.\n    if (loose || index !== 0 || child.type !== 'element' || child.tagName !== 'p') {\n      children.push({\n        type: 'text',\n        value: '\\n'\n      });\n    }\n    if (child.type === 'element' && child.tagName === 'p' && !loose) {\n      children.push(...child.children);\n    } else {\n      children.push(child);\n    }\n  }\n  const tail = results[results.length - 1];\n\n  // Add a final eol.\n  if (tail && (loose || tail.type !== 'element' || tail.tagName !== 'p')) {\n    children.push({\n      type: 'text',\n      value: '\\n'\n    });\n  }\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'li',\n    properties,\n    children\n  };\n  state.patch(node, result);\n  return state.applyData(node, result);\n}\n\n/**\n * @param {Parents} node\n * @return {Boolean}\n */\nfunction listLoose(node) {\n  let loose = false;\n  if (node.type === 'list') {\n    loose = node.spread || false;\n    const children = node.children;\n    let index = -1;\n    while (!loose && ++index < children.length) {\n      loose = listItemLoose(children[index]);\n    }\n  }\n  return loose;\n}\n\n/**\n * @param {ListItem} node\n * @return {Boolean}\n */\nfunction listItemLoose(node) {\n  const spread = node.spread;\n  return spread === undefined || spread === null ? node.children.length > 1 : spread;\n}","const tab = 9; /* `\\t` */\nconst space = 32; /* ` ` */\n\n/**\n * Remove initial and final spaces and tabs at the line breaks in `value`.\n * Does not trim initial and final spaces and tabs of the value itself.\n *\n * @param {string} value\n *   Value to trim.\n * @returns {string}\n *   Trimmed value.\n */\nexport function trimLines(value) {\n  const source = String(value);\n  const search = /\\r?\\n|\\r/g;\n  let match = search.exec(source);\n  let last = 0;\n  /** @type {Array<string>} */\n  const lines = [];\n  while (match) {\n    lines.push(trimLine(source.slice(last, match.index), last > 0, true), match[0]);\n    last = match.index + match[0].length;\n    match = search.exec(source);\n  }\n  lines.push(trimLine(source.slice(last), last > 0, false));\n  return lines.join('');\n}\n\n/**\n * @param {string} value\n *   Line to trim.\n * @param {boolean} start\n *   Whether to trim the start of the line.\n * @param {boolean} end\n *   Whether to trim the end of the line.\n * @returns {string}\n *   Trimmed line.\n */\nfunction trimLine(value, start, end) {\n  let startIndex = 0;\n  let endIndex = value.length;\n  if (start) {\n    let code = value.codePointAt(startIndex);\n    while (code === tab || code === space) {\n      startIndex++;\n      code = value.codePointAt(startIndex);\n    }\n  }\n  if (end) {\n    let code = value.codePointAt(endIndex - 1);\n    while (code === tab || code === space) {\n      endIndex--;\n      code = value.codePointAt(endIndex - 1);\n    }\n  }\n  return endIndex > startIndex ? value.slice(startIndex, endIndex) : '';\n}","import { blockquote } from './blockquote.js';\nimport { hardBreak } from './break.js';\nimport { code } from './code.js';\nimport { strikethrough } from './delete.js';\nimport { emphasis } from './emphasis.js';\nimport { footnoteReference } from './footnote-reference.js';\nimport { footnote } from './footnote.js';\nimport { heading } from './heading.js';\nimport { html } from './html.js';\nimport { imageReference } from './image-reference.js';\nimport { image } from './image.js';\nimport { inlineCode } from './inline-code.js';\nimport { linkReference } from './link-reference.js';\nimport { link } from './link.js';\nimport { listItem } from './list-item.js';\nimport { list } from './list.js';\nimport { paragraph } from './paragraph.js';\nimport { root } from './root.js';\nimport { strong } from './strong.js';\nimport { table } from './table.js';\nimport { tableRow } from './table-row.js';\nimport { tableCell } from './table-cell.js';\nimport { text } from './text.js';\nimport { thematicBreak } from './thematic-break.js';\n\n/**\n * Default handlers for nodes.\n */\nexport const handlers = {\n  blockquote,\n  break: hardBreak,\n  code,\n  delete: strikethrough,\n  emphasis,\n  footnoteReference,\n  footnote,\n  heading,\n  html,\n  imageReference,\n  image,\n  inlineCode,\n  linkReference,\n  link,\n  listItem,\n  list,\n  paragraph,\n  root,\n  strong,\n  table,\n  tableCell,\n  tableRow,\n  text,\n  thematicBreak,\n  toml: ignore,\n  yaml: ignore,\n  definition: ignore,\n  footnoteDefinition: ignore\n};\n\n// Return nothing for nodes that are ignored.\nfunction ignore() {\n  // To do: next major: return `undefined`.\n  return null;\n}","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Blockquote} Blockquote\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * Turn an mdast `blockquote` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Blockquote} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function blockquote(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'blockquote',\n    properties: {},\n    children: state.wrap(state.all(node), true)\n  };\n  state.patch(node, result);\n  return state.applyData(node, result);\n}","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Text} Text\n * @typedef {import('mdast').Break} Break\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * Turn an mdast `break` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Break} node\n *   mdast node.\n * @returns {Array<Element | Text>}\n *   hast element content.\n */\nexport function hardBreak(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'br',\n    properties: {},\n    children: []\n  };\n  state.patch(node, result);\n  return [state.applyData(node, result), {\n    type: 'text',\n    value: '\\n'\n  }];\n}","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').Code} Code\n * @typedef {import('../state.js').State} State\n\n */\n\n/**\n * Turn an mdast `code` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Code} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function code(state, node) {\n  const value = node.value ? node.value + '\\n' : '';\n  // To do: next major, use `node.lang` w/o regex, the splitting’s been going\n  // on for years in remark now.\n  const lang = node.lang ? node.lang.match(/^[^ \\t]+(?=[ \\t]|$)/) : null;\n  /** @type {Properties} */\n  const properties = {};\n  if (lang) {\n    properties.className = ['language-' + lang];\n  }\n\n  // Create `<code>`.\n  /** @type {Element} */\n  let result = {\n    type: 'element',\n    tagName: 'code',\n    properties,\n    children: [{\n      type: 'text',\n      value\n    }]\n  };\n  if (node.meta) {\n    result.data = {\n      meta: node.meta\n    };\n  }\n  state.patch(node, result);\n  result = state.applyData(node, result);\n\n  // Create `<pre>`.\n  result = {\n    type: 'element',\n    tagName: 'pre',\n    properties: {},\n    children: [result]\n  };\n  state.patch(node, result);\n  return result;\n}","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Delete} Delete\n * @typedef {import('../state.js').State} State\n\n */\n\n/**\n * Turn an mdast `delete` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Delete} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function strikethrough(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'del',\n    properties: {},\n    children: state.all(node)\n  };\n  state.patch(node, result);\n  return state.applyData(node, result);\n}","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Emphasis} Emphasis\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * Turn an mdast `emphasis` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Emphasis} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function emphasis(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'em',\n    properties: {},\n    children: state.all(node)\n  };\n  state.patch(node, result);\n  return state.applyData(node, result);\n}","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Footnote} Footnote\n * @typedef {import('../state.js').State} State\n */\n\nimport { footnoteReference } from './footnote-reference.js';\n\n// To do: when both:\n// * <https://github.com/micromark/micromark-extension-footnote>\n// * <https://github.com/syntax-tree/mdast-util-footnote>\n// …are archived, remove this (also from mdast).\n// These inline notes are not used in GFM.\n\n/**\n * Turn an mdast `footnote` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Footnote} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function footnote(state, node) {\n  const footnoteById = state.footnoteById;\n  let no = 1;\n  while (no in footnoteById) no++;\n  const identifier = String(no);\n  footnoteById[identifier] = {\n    type: 'footnoteDefinition',\n    identifier,\n    children: [{\n      type: 'paragraph',\n      children: node.children\n    }],\n    position: node.position\n  };\n  return footnoteReference(state, {\n    type: 'footnoteReference',\n    identifier,\n    position: node.position\n  });\n}","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Heading} Heading\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * Turn an mdast `heading` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Heading} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function heading(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'h' + node.depth,\n    properties: {},\n    children: state.all(node)\n  };\n  state.patch(node, result);\n  return state.applyData(node, result);\n}","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').HTML} Html\n * @typedef {import('../state.js').State} State\n * @typedef {import('../../index.js').Raw} Raw\n */\n\n/**\n * Turn an mdast `html` node into hast (`raw` node in dangerous mode, otherwise\n * nothing).\n *\n * @param {State} state\n *   Info passed around.\n * @param {Html} node\n *   mdast node.\n * @returns {Raw | Element | null}\n *   hast node.\n */\nexport function html(state, node) {\n  if (state.dangerous) {\n    /** @type {Raw} */\n    const result = {\n      type: 'raw',\n      value: node.value\n    };\n    state.patch(node, result);\n    return state.applyData(node, result);\n  }\n\n  // To do: next major: return `undefined`.\n  return null;\n}","/**\n * @typedef {import('hast').ElementContent} ElementContent\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').ImageReference} ImageReference\n * @typedef {import('../state.js').State} State\n */\n\nimport { normalizeUri } from 'micromark-util-sanitize-uri';\nimport { revert } from '../revert.js';\n\n/**\n * Turn an mdast `imageReference` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {ImageReference} node\n *   mdast node.\n * @returns {ElementContent | Array<ElementContent>}\n *   hast node.\n */\nexport function imageReference(state, node) {\n  const def = state.definition(node.identifier);\n  if (!def) {\n    return revert(state, node);\n  }\n\n  /** @type {Properties} */\n  const properties = {\n    src: normalizeUri(def.url || ''),\n    alt: node.alt\n  };\n  if (def.title !== null && def.title !== undefined) {\n    properties.title = def.title;\n  }\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'img',\n    properties,\n    children: []\n  };\n  state.patch(node, result);\n  return state.applyData(node, result);\n}","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').Image} Image\n * @typedef {import('../state.js').State} State\n */\n\nimport { normalizeUri } from 'micromark-util-sanitize-uri';\n\n/**\n * Turn an mdast `image` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Image} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function image(state, node) {\n  /** @type {Properties} */\n  const properties = {\n    src: normalizeUri(node.url)\n  };\n  if (node.alt !== null && node.alt !== undefined) {\n    properties.alt = node.alt;\n  }\n  if (node.title !== null && node.title !== undefined) {\n    properties.title = node.title;\n  }\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'img',\n    properties,\n    children: []\n  };\n  state.patch(node, result);\n  return state.applyData(node, result);\n}","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Text} Text\n * @typedef {import('mdast').InlineCode} InlineCode\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * Turn an mdast `inlineCode` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {InlineCode} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function inlineCode(state, node) {\n  /** @type {Text} */\n  const text = {\n    type: 'text',\n    value: node.value.replace(/\\r?\\n|\\r/g, ' ')\n  };\n  state.patch(node, text);\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'code',\n    properties: {},\n    children: [text]\n  };\n  state.patch(node, result);\n  return state.applyData(node, result);\n}","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').LinkReference} LinkReference\n * @typedef {import('../state.js').State} State\n */\n\nimport { normalizeUri } from 'micromark-util-sanitize-uri';\nimport { revert } from '../revert.js';\n\n/**\n * Turn an mdast `linkReference` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {LinkReference} node\n *   mdast node.\n * @returns {ElementContent | Array<ElementContent>}\n *   hast node.\n */\nexport function linkReference(state, node) {\n  const def = state.definition(node.identifier);\n  if (!def) {\n    return revert(state, node);\n  }\n\n  /** @type {Properties} */\n  const properties = {\n    href: normalizeUri(def.url || '')\n  };\n  if (def.title !== null && def.title !== undefined) {\n    properties.title = def.title;\n  }\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'a',\n    properties,\n    children: state.all(node)\n  };\n  state.patch(node, result);\n  return state.applyData(node, result);\n}","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').Link} Link\n * @typedef {import('../state.js').State} State\n */\n\nimport { normalizeUri } from 'micromark-util-sanitize-uri';\n\n/**\n * Turn an mdast `link` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Link} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function link(state, node) {\n  /** @type {Properties} */\n  const properties = {\n    href: normalizeUri(node.url)\n  };\n  if (node.title !== null && node.title !== undefined) {\n    properties.title = node.title;\n  }\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'a',\n    properties,\n    children: state.all(node)\n  };\n  state.patch(node, result);\n  return state.applyData(node, result);\n}","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').List} List\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * Turn an mdast `list` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {List} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function list(state, node) {\n  /** @type {Properties} */\n  const properties = {};\n  const results = state.all(node);\n  let index = -1;\n  if (typeof node.start === 'number' && node.start !== 1) {\n    properties.start = node.start;\n  }\n\n  // Like GitHub, add a class for custom styling.\n  while (++index < results.length) {\n    const child = results[index];\n    if (child.type === 'element' && child.tagName === 'li' && child.properties && Array.isArray(child.properties.className) && child.properties.className.includes('task-list-item')) {\n      properties.className = ['contains-task-list'];\n      break;\n    }\n  }\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: node.ordered ? 'ol' : 'ul',\n    properties,\n    children: state.wrap(results, true)\n  };\n  state.patch(node, result);\n  return state.applyData(node, result);\n}","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Paragraph} Paragraph\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * Turn an mdast `paragraph` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Paragraph} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function paragraph(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'p',\n    properties: {},\n    children: state.all(node)\n  };\n  state.patch(node, result);\n  return state.applyData(node, result);\n}","/**\n * @typedef {import('hast').Root} HastRoot\n * @typedef {import('hast').Element} HastElement\n * @typedef {import('mdast').Root} MdastRoot\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * Turn an mdast `root` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdastRoot} node\n *   mdast node.\n * @returns {HastRoot | HastElement}\n *   hast node.\n */\nexport function root(state, node) {\n  /** @type {HastRoot} */\n  const result = {\n    type: 'root',\n    children: state.wrap(state.all(node))\n  };\n  state.patch(node, result);\n  return state.applyData(node, result);\n}","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Strong} Strong\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * Turn an mdast `strong` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Strong} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function strong(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'strong',\n    properties: {},\n    children: state.all(node)\n  };\n  state.patch(node, result);\n  return state.applyData(node, result);\n}","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Table} Table\n * @typedef {import('../state.js').State} State\n */\n\nimport { pointStart, pointEnd } from 'unist-util-position';\n\n/**\n * Turn an mdast `table` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Table} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function table(state, node) {\n  const rows = state.all(node);\n  const firstRow = rows.shift();\n  /** @type {Array<Element>} */\n  const tableContent = [];\n  if (firstRow) {\n    /** @type {Element} */\n    const head = {\n      type: 'element',\n      tagName: 'thead',\n      properties: {},\n      children: state.wrap([firstRow], true)\n    };\n    state.patch(node.children[0], head);\n    tableContent.push(head);\n  }\n  if (rows.length > 0) {\n    /** @type {Element} */\n    const body = {\n      type: 'element',\n      tagName: 'tbody',\n      properties: {},\n      children: state.wrap(rows, true)\n    };\n    const start = pointStart(node.children[1]);\n    const end = pointEnd(node.children[node.children.length - 1]);\n    if (start.line && end.line) body.position = {\n      start,\n      end\n    };\n    tableContent.push(body);\n  }\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'table',\n    properties: {},\n    children: state.wrap(tableContent, true)\n  };\n  state.patch(node, result);\n  return state.applyData(node, result);\n}","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').TableCell} TableCell\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * Turn an mdast `tableCell` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {TableCell} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function tableCell(state, node) {\n  // Note: this function is normally not called: see `table-row` for how rows\n  // and their cells are compiled.\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'td',\n    // Assume body cell.\n    properties: {},\n    children: state.all(node)\n  };\n  state.patch(node, result);\n  return state.applyData(node, result);\n}","/**\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n * @typedef {import('mdast').Content} Content\n * @typedef {import('mdast').Parent} Parent\n * @typedef {import('mdast').Root} Root\n * @typedef {import('mdast').TableRow} TableRow\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * @typedef {Root | Content} Nodes\n * @typedef {Extract<Nodes, Parent>} Parents\n */\n\n/**\n * Turn an mdast `tableRow` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {TableRow} node\n *   mdast node.\n * @param {Parents | null | undefined} parent\n *   Parent of `node`.\n * @returns {Element}\n *   hast node.\n */\nexport function tableRow(state, node, parent) {\n  const siblings = parent ? parent.children : undefined;\n  // Generate a body row when without parent.\n  const rowIndex = siblings ? siblings.indexOf(node) : 1;\n  const tagName = rowIndex === 0 ? 'th' : 'td';\n  const align = parent && parent.type === 'table' ? parent.align : undefined;\n  const length = align ? align.length : node.children.length;\n  let cellIndex = -1;\n  /** @type {Array<ElementContent>} */\n  const cells = [];\n  while (++cellIndex < length) {\n    // Note: can also be undefined.\n    const cell = node.children[cellIndex];\n    /** @type {Properties} */\n    const properties = {};\n    const alignValue = align ? align[cellIndex] : undefined;\n    if (alignValue) {\n      properties.align = alignValue;\n    }\n\n    /** @type {Element} */\n    let result = {\n      type: 'element',\n      tagName,\n      properties,\n      children: []\n    };\n    if (cell) {\n      result.children = state.all(cell);\n      state.patch(cell, result);\n      result = state.applyData(node, result);\n    }\n    cells.push(result);\n  }\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'tr',\n    properties: {},\n    children: state.wrap(cells, true)\n  };\n  state.patch(node, result);\n  return state.applyData(node, result);\n}","/**\n * @typedef {import('hast').Element} HastElement\n * @typedef {import('hast').Text} HastText\n * @typedef {import('mdast').Text} MdastText\n * @typedef {import('../state.js').State} State\n */\n\nimport { trimLines } from 'trim-lines';\n\n/**\n * Turn an mdast `text` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdastText} node\n *   mdast node.\n * @returns {HastText | HastElement}\n *   hast node.\n */\nexport function text(state, node) {\n  /** @type {HastText} */\n  const result = {\n    type: 'text',\n    value: trimLines(String(node.value))\n  };\n  state.patch(node, result);\n  return state.applyData(node, result);\n}","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').ThematicBreak} ThematicBreak\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * Turn an mdast `thematicBreak` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {ThematicBreak} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function thematicBreak(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'hr',\n    properties: {},\n    children: []\n  };\n  state.patch(node, result);\n  return state.applyData(node, result);\n}","/**\n * @typedef {import('hast').Content} HastContent\n * @typedef {import('hast').Element} HastElement\n * @typedef {import('hast').ElementContent} HastElementContent\n * @typedef {import('hast').Properties} HastProperties\n * @typedef {import('hast').Root} HastRoot\n * @typedef {import('hast').Text} HastText\n *\n * @typedef {import('mdast').Content} MdastContent\n * @typedef {import('mdast').Definition} MdastDefinition\n * @typedef {import('mdast').FootnoteDefinition} MdastFootnoteDefinition\n * @typedef {import('mdast').Parent} MdastParent\n * @typedef {import('mdast').Root} MdastRoot\n */\n\n/**\n * @typedef {HastRoot | HastContent} HastNodes\n * @typedef {MdastRoot | MdastContent} MdastNodes\n * @typedef {Extract<MdastNodes, MdastParent>} MdastParents\n *\n * @typedef EmbeddedHastFields\n *   hast fields.\n * @property {string | null | undefined} [hName]\n *   Generate a specific element with this tag name instead.\n * @property {HastProperties | null | undefined} [hProperties]\n *   Generate an element with these properties instead.\n * @property {Array<HastElementContent> | null | undefined} [hChildren]\n *   Generate an element with this content instead.\n *\n * @typedef {Record<string, unknown> & EmbeddedHastFields} MdastData\n *   mdast data with embedded hast fields.\n *\n * @typedef {MdastNodes & {data?: MdastData | null | undefined}} MdastNodeWithData\n *   mdast node with embedded hast data.\n *\n * @typedef PointLike\n *   Point-like value.\n * @property {number | null | undefined} [line]\n *   Line.\n * @property {number | null | undefined} [column]\n *   Column.\n * @property {number | null | undefined} [offset]\n *   Offset.\n *\n * @typedef PositionLike\n *   Position-like value.\n * @property {PointLike | null | undefined} [start]\n *   Point-like value.\n * @property {PointLike | null | undefined} [end]\n *   Point-like value.\n *\n * @callback Handler\n *   Handle a node.\n * @param {State} state\n *   Info passed around.\n * @param {any} node\n *   mdast node to handle.\n * @param {MdastParents | null | undefined} parent\n *   Parent of `node`.\n * @returns {HastElementContent | Array<HastElementContent> | null | undefined}\n *   hast node.\n *\n * @callback HFunctionProps\n *   Signature of `state` for when props are passed.\n * @param {MdastNodes | PositionLike | null | undefined} node\n *   mdast node or unist position.\n * @param {string} tagName\n *   HTML tag name.\n * @param {HastProperties} props\n *   Properties.\n * @param {Array<HastElementContent> | null | undefined} [children]\n *   hast content.\n * @returns {HastElement}\n *   Compiled element.\n *\n * @callback HFunctionNoProps\n *   Signature of `state` for when no props are passed.\n * @param {MdastNodes | PositionLike | null | undefined} node\n *   mdast node or unist position.\n * @param {string} tagName\n *   HTML tag name.\n * @param {Array<HastElementContent> | null | undefined} [children]\n *   hast content.\n * @returns {HastElement}\n *   Compiled element.\n *\n * @typedef HFields\n *   Info on `state`.\n * @property {boolean} dangerous\n *   Whether HTML is allowed.\n * @property {string} clobberPrefix\n *   Prefix to use to prevent DOM clobbering.\n * @property {string} footnoteLabel\n *   Label to use to introduce the footnote section.\n * @property {string} footnoteLabelTagName\n *   HTML used for the footnote label.\n * @property {HastProperties} footnoteLabelProperties\n *   Properties on the HTML tag used for the footnote label.\n * @property {string} footnoteBackLabel\n *   Label to use from backreferences back to their footnote call.\n * @property {(identifier: string) => MdastDefinition | null} definition\n *   Definition cache.\n * @property {Record<string, MdastFootnoteDefinition>} footnoteById\n *   Footnote definitions by their identifier.\n * @property {Array<string>} footnoteOrder\n *   Identifiers of order when footnote calls first appear in tree order.\n * @property {Record<string, number>} footnoteCounts\n *   Counts for how often the same footnote was called.\n * @property {Handlers} handlers\n *   Applied handlers.\n * @property {Handler} unknownHandler\n *   Handler for any none not in `passThrough` or otherwise handled.\n * @property {(from: MdastNodes, node: HastNodes) => void} patch\n *   Copy a node’s positional info.\n * @property {<Type extends HastNodes>(from: MdastNodes, to: Type) => Type | HastElement} applyData\n *   Honor the `data` of `from`, and generate an element instead of `node`.\n * @property {(node: MdastNodes, parent: MdastParents | null | undefined) => HastElementContent | Array<HastElementContent> | null | undefined} one\n *   Transform an mdast node to hast.\n * @property {(node: MdastNodes) => Array<HastElementContent>} all\n *   Transform the children of an mdast parent to hast.\n * @property {<Type extends HastContent>(nodes: Array<Type>, loose?: boolean | null | undefined) => Array<Type | HastText>} wrap\n *   Wrap `nodes` with line endings between each node, adds initial/final line endings when `loose`.\n * @property {(left: MdastNodeWithData | PositionLike | null | undefined, right: HastElementContent) => HastElementContent} augment\n *   Like `state` but lower-level and usable on non-elements.\n *   Deprecated: use `patch` and `applyData`.\n * @property {Array<string>} passThrough\n *   List of node types to pass through untouched (except for their children).\n *\n * @typedef Options\n *   Configuration (optional).\n * @property {boolean | null | undefined} [allowDangerousHtml=false]\n *   Whether to persist raw HTML in markdown in the hast tree.\n * @property {string | null | undefined} [clobberPrefix='user-content-']\n *   Prefix to use before the `id` attribute on footnotes to prevent it from\n *   *clobbering*.\n * @property {string | null | undefined} [footnoteBackLabel='Back to content']\n *   Label to use from backreferences back to their footnote call (affects\n *   screen readers).\n * @property {string | null | undefined} [footnoteLabel='Footnotes']\n *   Label to use for the footnotes section (affects screen readers).\n * @property {HastProperties | null | undefined} [footnoteLabelProperties={className: ['sr-only']}]\n *   Properties to use on the footnote label (note that `id: 'footnote-label'`\n *   is always added as footnote calls use it with `aria-describedby` to\n *   provide an accessible label).\n * @property {string | null | undefined} [footnoteLabelTagName='h2']\n *   Tag name to use for the footnote label.\n * @property {Handlers | null | undefined} [handlers]\n *   Extra handlers for nodes.\n * @property {Array<string> | null | undefined} [passThrough]\n *   List of custom mdast node types to pass through (keep) in hast (note that\n *   the node itself is passed, but eventual children are transformed).\n * @property {Handler | null | undefined} [unknownHandler]\n *   Handler for all unknown nodes.\n *\n * @typedef {Record<string, Handler>} Handlers\n *   Handle nodes.\n *\n * @typedef {HFunctionProps & HFunctionNoProps & HFields} State\n *   Info passed around.\n */\n\nimport { visit } from 'unist-util-visit';\nimport { position, pointStart, pointEnd } from 'unist-util-position';\nimport { generated } from 'unist-util-generated';\nimport { definitions } from 'mdast-util-definitions';\nimport { handlers } from './handlers/index.js';\nconst own = {}.hasOwnProperty;\n\n/**\n * Create `state` from an mdast tree.\n *\n * @param {MdastNodes} tree\n *   mdast node to transform.\n * @param {Options | null | undefined} [options]\n *   Configuration.\n * @returns {State}\n *   `state` function.\n */\nexport function createState(tree, options) {\n  const settings = options || {};\n  const dangerous = settings.allowDangerousHtml || false;\n  /** @type {Record<string, MdastFootnoteDefinition>} */\n  const footnoteById = {};\n\n  // To do: next major: add `options` to state, remove:\n  // `dangerous`, `clobberPrefix`, `footnoteLabel`, `footnoteLabelTagName`,\n  // `footnoteLabelProperties`, `footnoteBackLabel`, `passThrough`,\n  // `unknownHandler`.\n\n  // To do: next major: move to `state.options.allowDangerousHtml`.\n  state.dangerous = dangerous;\n  // To do: next major: move to `state.options`.\n  state.clobberPrefix = settings.clobberPrefix === undefined || settings.clobberPrefix === null ? 'user-content-' : settings.clobberPrefix;\n  // To do: next major: move to `state.options`.\n  state.footnoteLabel = settings.footnoteLabel || 'Footnotes';\n  // To do: next major: move to `state.options`.\n  state.footnoteLabelTagName = settings.footnoteLabelTagName || 'h2';\n  // To do: next major: move to `state.options`.\n  state.footnoteLabelProperties = settings.footnoteLabelProperties || {\n    className: ['sr-only']\n  };\n  // To do: next major: move to `state.options`.\n  state.footnoteBackLabel = settings.footnoteBackLabel || 'Back to content';\n  // To do: next major: move to `state.options`.\n  state.unknownHandler = settings.unknownHandler;\n  // To do: next major: move to `state.options`.\n  state.passThrough = settings.passThrough;\n  state.handlers = {\n    ...handlers,\n    ...settings.handlers\n  };\n\n  // To do: next major: replace utility with `definitionById` object, so we\n  // only walk once (as we need footnotes too).\n  state.definition = definitions(tree);\n  state.footnoteById = footnoteById;\n  /** @type {Array<string>} */\n  state.footnoteOrder = [];\n  /** @type {Record<string, number>} */\n  state.footnoteCounts = {};\n  state.patch = patch;\n  state.applyData = applyData;\n  state.one = oneBound;\n  state.all = allBound;\n  state.wrap = wrap;\n  // To do: next major: remove `augment`.\n  state.augment = augment;\n  visit(tree, 'footnoteDefinition', definition => {\n    const id = String(definition.identifier).toUpperCase();\n\n    // Mimick CM behavior of link definitions.\n    // See: <https://github.com/syntax-tree/mdast-util-definitions/blob/8290999/index.js#L26>.\n    if (!own.call(footnoteById, id)) {\n      footnoteById[id] = definition;\n    }\n  });\n\n  // @ts-expect-error Hush, it’s fine!\n  return state;\n\n  /**\n   * Finalise the created `right`, a hast node, from `left`, an mdast node.\n   *\n   * @param {MdastNodeWithData | PositionLike | null | undefined} left\n   * @param {HastElementContent} right\n   * @returns {HastElementContent}\n   */\n  /* c8 ignore start */\n  // To do: next major: remove.\n  function augment(left, right) {\n    // Handle `data.hName`, `data.hProperties, `data.hChildren`.\n    if (left && 'data' in left && left.data) {\n      /** @type {MdastData} */\n      const data = left.data;\n      if (data.hName) {\n        if (right.type !== 'element') {\n          right = {\n            type: 'element',\n            tagName: '',\n            properties: {},\n            children: []\n          };\n        }\n        right.tagName = data.hName;\n      }\n      if (right.type === 'element' && data.hProperties) {\n        right.properties = {\n          ...right.properties,\n          ...data.hProperties\n        };\n      }\n      if ('children' in right && right.children && data.hChildren) {\n        right.children = data.hChildren;\n      }\n    }\n    if (left) {\n      const ctx = 'type' in left ? left : {\n        position: left\n      };\n      if (!generated(ctx)) {\n        // @ts-expect-error: fine.\n        right.position = {\n          start: pointStart(ctx),\n          end: pointEnd(ctx)\n        };\n      }\n    }\n    return right;\n  }\n  /* c8 ignore stop */\n\n  /**\n   * Create an element for `node`.\n   *\n   * @type {HFunctionProps}\n   */\n  /* c8 ignore start */\n  // To do: next major: remove.\n  function state(node, tagName, props, children) {\n    if (Array.isArray(props)) {\n      children = props;\n      props = {};\n    }\n\n    // @ts-expect-error augmenting an element yields an element.\n    return augment(node, {\n      type: 'element',\n      tagName,\n      properties: props || {},\n      children: children || []\n    });\n  }\n  /* c8 ignore stop */\n\n  /**\n   * Transform an mdast node into a hast node.\n   *\n   * @param {MdastNodes} node\n   *   mdast node.\n   * @param {MdastParents | null | undefined} [parent]\n   *   Parent of `node`.\n   * @returns {HastElementContent | Array<HastElementContent> | null | undefined}\n   *   Resulting hast node.\n   */\n  function oneBound(node, parent) {\n    // @ts-expect-error: that’s a state :)\n    return one(state, node, parent);\n  }\n\n  /**\n   * Transform the children of an mdast node into hast nodes.\n   *\n   * @param {MdastNodes} parent\n   *   mdast node to compile\n   * @returns {Array<HastElementContent>}\n   *   Resulting hast nodes.\n   */\n  function allBound(parent) {\n    // @ts-expect-error: that’s a state :)\n    return all(state, parent);\n  }\n}\n\n/**\n * Copy a node’s positional info.\n *\n * @param {MdastNodes} from\n *   mdast node to copy from.\n * @param {HastNodes} to\n *   hast node to copy into.\n * @returns {void}\n *   Nothing.\n */\nfunction patch(from, to) {\n  if (from.position) to.position = position(from);\n}\n\n/**\n * Honor the `data` of `from` and maybe generate an element instead of `to`.\n *\n * @template {HastNodes} Type\n *   Node type.\n * @param {MdastNodes} from\n *   mdast node to use data from.\n * @param {Type} to\n *   hast node to change.\n * @returns {Type | HastElement}\n *   Nothing.\n */\nfunction applyData(from, to) {\n  /** @type {Type | HastElement} */\n  let result = to;\n\n  // Handle `data.hName`, `data.hProperties, `data.hChildren`.\n  if (from && from.data) {\n    const hName = from.data.hName;\n    const hChildren = from.data.hChildren;\n    const hProperties = from.data.hProperties;\n    if (typeof hName === 'string') {\n      // Transforming the node resulted in an element with a different name\n      // than wanted:\n      if (result.type === 'element') {\n        result.tagName = hName;\n      }\n      // Transforming the node resulted in a non-element, which happens for\n      // raw, text, and root nodes (unless custom handlers are passed).\n      // The intent is likely to keep the content around (otherwise: pass\n      // `hChildren`).\n      else {\n        result = {\n          type: 'element',\n          tagName: hName,\n          properties: {},\n          children: []\n        };\n\n        // To do: next major: take the children from the `root`, or inject the\n        // raw/text/comment or so into the element?\n        // if ('children' in node) {\n        //   // @ts-expect-error: assume `children` are allowed in elements.\n        //   result.children = node.children\n        // } else {\n        //   // @ts-expect-error: assume `node` is allowed in elements.\n        //   result.children.push(node)\n        // }\n      }\n    }\n    if (result.type === 'element' && hProperties) {\n      result.properties = {\n        ...result.properties,\n        ...hProperties\n      };\n    }\n    if ('children' in result && result.children && hChildren !== null && hChildren !== undefined) {\n      // @ts-expect-error: assume valid children are defined.\n      result.children = hChildren;\n    }\n  }\n  return result;\n}\n\n/**\n * Transform an mdast node into a hast node.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdastNodes} node\n *   mdast node.\n * @param {MdastParents | null | undefined} [parent]\n *   Parent of `node`.\n * @returns {HastElementContent | Array<HastElementContent> | null | undefined}\n *   Resulting hast node.\n */\n// To do: next major: do not expose, keep bound.\nexport function one(state, node, parent) {\n  const type = node && node.type;\n\n  // Fail on non-nodes.\n  if (!type) {\n    throw new Error('Expected node, got `' + node + '`');\n  }\n  if (own.call(state.handlers, type)) {\n    return state.handlers[type](state, node, parent);\n  }\n  if (state.passThrough && state.passThrough.includes(type)) {\n    // To do: next major: deep clone.\n    // @ts-expect-error: types of passed through nodes are expected to be added manually.\n    return 'children' in node ? {\n      ...node,\n      children: all(state, node)\n    } : node;\n  }\n  if (state.unknownHandler) {\n    return state.unknownHandler(state, node, parent);\n  }\n  return defaultUnknownHandler(state, node);\n}\n\n/**\n * Transform the children of an mdast node into hast nodes.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdastNodes} parent\n *   mdast node to compile\n * @returns {Array<HastElementContent>}\n *   Resulting hast nodes.\n */\n// To do: next major: do not expose, keep bound.\nexport function all(state, parent) {\n  /** @type {Array<HastElementContent>} */\n  const values = [];\n  if ('children' in parent) {\n    const nodes = parent.children;\n    let index = -1;\n    while (++index < nodes.length) {\n      const result = one(state, nodes[index], parent);\n\n      // To do: see if we van clean this? Can we merge texts?\n      if (result) {\n        if (index && nodes[index - 1].type === 'break') {\n          if (!Array.isArray(result) && result.type === 'text') {\n            result.value = result.value.replace(/^\\s+/, '');\n          }\n          if (!Array.isArray(result) && result.type === 'element') {\n            const head = result.children[0];\n            if (head && head.type === 'text') {\n              head.value = head.value.replace(/^\\s+/, '');\n            }\n          }\n        }\n        if (Array.isArray(result)) {\n          values.push(...result);\n        } else {\n          values.push(result);\n        }\n      }\n    }\n  }\n  return values;\n}\n\n/**\n * Transform an unknown node.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdastNodes} node\n *   Unknown mdast node.\n * @returns {HastText | HastElement}\n *   Resulting hast node.\n */\nfunction defaultUnknownHandler(state, node) {\n  const data = node.data || {};\n  /** @type {HastText | HastElement} */\n  const result = 'value' in node && !(own.call(data, 'hProperties') || own.call(data, 'hChildren')) ? {\n    type: 'text',\n    value: node.value\n  } : {\n    type: 'element',\n    tagName: 'div',\n    properties: {},\n    children: all(state, node)\n  };\n  state.patch(node, result);\n  return state.applyData(node, result);\n}\n\n/**\n * Wrap `nodes` with line endings between each node.\n *\n * @template {HastContent} Type\n *   Node type.\n * @param {Array<Type>} nodes\n *   List of nodes to wrap.\n * @param {boolean | null | undefined} [loose=false]\n *   Whether to add line endings at start and end.\n * @returns {Array<Type | HastText>}\n *   Wrapped nodes.\n */\nexport function wrap(nodes, loose) {\n  /** @type {Array<Type | HastText>} */\n  const result = [];\n  let index = -1;\n  if (loose) {\n    result.push({\n      type: 'text',\n      value: '\\n'\n    });\n  }\n  while (++index < nodes.length) {\n    if (index) result.push({\n      type: 'text',\n      value: '\\n'\n    });\n    result.push(nodes[index]);\n  }\n  if (loose && nodes.length > 0) {\n    result.push({\n      type: 'text',\n      value: '\\n'\n    });\n  }\n  return result;\n}","/**\n * @typedef PointLike\n * @property {number | null | undefined} [line]\n * @property {number | null | undefined} [column]\n * @property {number | null | undefined} [offset]\n *\n * @typedef PositionLike\n * @property {PointLike | null | undefined} [start]\n * @property {PointLike | null | undefined} [end]\n *\n * @typedef NodeLike\n * @property {PositionLike | null | undefined} [position]\n */\n\n/**\n * Check if `node` is generated.\n *\n * @param {NodeLike | null | undefined} [node]\n *   Node to check.\n * @returns {boolean}\n *   Whether `node` is generated (does not have positional info).\n */\nexport function generated(node) {\n  return !node || !node.position || !node.position.start || !node.position.start.line || !node.position.start.column || !node.position.end || !node.position.end.line || !node.position.end.column;\n}","/**\n * @typedef {import('hast').Content} HastContent\n * @typedef {import('hast').Root} HastRoot\n *\n * @typedef {import('mdast').Content} MdastContent\n * @typedef {import('mdast').Root} MdastRoot\n *\n * @typedef {import('./state.js').Options} Options\n */\n\n/**\n * @typedef {HastRoot | HastContent} HastNodes\n * @typedef {MdastRoot | MdastContent} MdastNodes\n */\n\nimport { footer } from './footer.js';\nimport { createState } from './state.js';\n\n/**\n * Transform mdast to hast.\n *\n * ##### Notes\n *\n * ###### HTML\n *\n * Raw HTML is available in mdast as `html` nodes and can be embedded in hast\n * as semistandard `raw` nodes.\n * Most utilities ignore `raw` nodes but two notable ones don’t:\n *\n * *   `hast-util-to-html` also has an option `allowDangerousHtml` which will\n *     output the raw HTML.\n *     This is typically discouraged as noted by the option name but is useful\n *     if you completely trust authors\n * *   `hast-util-raw` can handle the raw embedded HTML strings by parsing them\n *     into standard hast nodes (`element`, `text`, etc).\n *     This is a heavy task as it needs a full HTML parser, but it is the only\n *     way to support untrusted content\n *\n * ###### Footnotes\n *\n * Many options supported here relate to footnotes.\n * Footnotes are not specified by CommonMark, which we follow by default.\n * They are supported by GitHub, so footnotes can be enabled in markdown with\n * `mdast-util-gfm`.\n *\n * The options `footnoteBackLabel` and `footnoteLabel` define natural language\n * that explains footnotes, which is hidden for sighted users but shown to\n * assistive technology.\n * When your page is not in English, you must define translated values.\n *\n * Back references use ARIA attributes, but the section label itself uses a\n * heading that is hidden with an `sr-only` class.\n * To show it to sighted users, define different attributes in\n * `footnoteLabelProperties`.\n *\n * ###### Clobbering\n *\n * Footnotes introduces a problem, as it links footnote calls to footnote\n * definitions on the page through `id` attributes generated from user content,\n * which results in DOM clobbering.\n *\n * DOM clobbering is this:\n *\n * ```html\n * <p id=x></p>\n * <script>alert(x) // `x` now refers to the DOM `p#x` element</script>\n * ```\n *\n * Elements by their ID are made available by browsers on the `window` object,\n * which is a security risk.\n * Using a prefix solves this problem.\n *\n * More information on how to handle clobbering and the prefix is explained in\n * Example: headings (DOM clobbering) in `rehype-sanitize`.\n *\n * ###### Unknown nodes\n *\n * Unknown nodes are nodes with a type that isn’t in `handlers` or `passThrough`.\n * The default behavior for unknown nodes is:\n *\n * *   when the node has a `value` (and doesn’t have `data.hName`,\n *     `data.hProperties`, or `data.hChildren`, see later), create a hast `text`\n *     node\n * *   otherwise, create a `<div>` element (which could be changed with\n *     `data.hName`), with its children mapped from mdast to hast as well\n *\n * This behavior can be changed by passing an `unknownHandler`.\n *\n * @param {MdastNodes} tree\n *   mdast tree.\n * @param {Options | null | undefined} [options]\n *   Configuration.\n * @returns {HastNodes | null | undefined}\n *   hast tree.\n */\n// To do: next major: always return a single `root`.\nexport function toHast(tree, options) {\n  const state = createState(tree, options);\n  const node = state.one(tree, null);\n  const foot = footer(state);\n  if (foot) {\n    // @ts-expect-error If there’s a footer, there were definitions, meaning block\n    // content.\n    // So assume `node` is a parent node.\n    node.children.push({\n      type: 'text',\n      value: '\\n'\n    }, foot);\n  }\n\n  // To do: next major: always return root?\n  return Array.isArray(node) ? {\n    type: 'root',\n    children: node\n  } : node;\n}","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n *\n * @typedef {import('./state.js').State} State\n */\n\nimport { normalizeUri } from 'micromark-util-sanitize-uri';\n\n/**\n * Generate a hast footer for called footnote definitions.\n *\n * @param {State} state\n *   Info passed around.\n * @returns {Element | undefined}\n *   `section` element or `undefined`.\n */\nexport function footer(state) {\n  /** @type {Array<ElementContent>} */\n  const listItems = [];\n  let index = -1;\n  while (++index < state.footnoteOrder.length) {\n    const def = state.footnoteById[state.footnoteOrder[index]];\n    if (!def) {\n      continue;\n    }\n    const content = state.all(def);\n    const id = String(def.identifier).toUpperCase();\n    const safeId = normalizeUri(id.toLowerCase());\n    let referenceIndex = 0;\n    /** @type {Array<ElementContent>} */\n    const backReferences = [];\n    while (++referenceIndex <= state.footnoteCounts[id]) {\n      /** @type {Element} */\n      const backReference = {\n        type: 'element',\n        tagName: 'a',\n        properties: {\n          href: '#' + state.clobberPrefix + 'fnref-' + safeId + (referenceIndex > 1 ? '-' + referenceIndex : ''),\n          dataFootnoteBackref: true,\n          className: ['data-footnote-backref'],\n          ariaLabel: state.footnoteBackLabel\n        },\n        children: [{\n          type: 'text',\n          value: '↩'\n        }]\n      };\n      if (referenceIndex > 1) {\n        backReference.children.push({\n          type: 'element',\n          tagName: 'sup',\n          children: [{\n            type: 'text',\n            value: String(referenceIndex)\n          }]\n        });\n      }\n      if (backReferences.length > 0) {\n        backReferences.push({\n          type: 'text',\n          value: ' '\n        });\n      }\n      backReferences.push(backReference);\n    }\n    const tail = content[content.length - 1];\n    if (tail && tail.type === 'element' && tail.tagName === 'p') {\n      const tailTail = tail.children[tail.children.length - 1];\n      if (tailTail && tailTail.type === 'text') {\n        tailTail.value += ' ';\n      } else {\n        tail.children.push({\n          type: 'text',\n          value: ' '\n        });\n      }\n      tail.children.push(...backReferences);\n    } else {\n      content.push(...backReferences);\n    }\n\n    /** @type {Element} */\n    const listItem = {\n      type: 'element',\n      tagName: 'li',\n      properties: {\n        id: state.clobberPrefix + 'fn-' + safeId\n      },\n      children: state.wrap(content, true)\n    };\n    state.patch(def, listItem);\n    listItems.push(listItem);\n  }\n  if (listItems.length === 0) {\n    return;\n  }\n  return {\n    type: 'element',\n    tagName: 'section',\n    properties: {\n      dataFootnotes: true,\n      className: ['footnotes']\n    },\n    children: [{\n      type: 'element',\n      tagName: state.footnoteLabelTagName,\n      properties: {\n        // To do: use structured clone.\n        ...JSON.parse(JSON.stringify(state.footnoteLabelProperties)),\n        id: 'footnote-label'\n      },\n      children: [{\n        type: 'text',\n        value: state.footnoteLabel\n      }]\n    }, {\n      type: 'text',\n      value: '\\n'\n    }, {\n      type: 'element',\n      tagName: 'ol',\n      properties: {},\n      children: state.wrap(listItems, true)\n    }, {\n      type: 'text',\n      value: '\\n'\n    }]\n  };\n}","/**\n * @typedef {import('hast').Root} HastRoot\n * @typedef {import('mdast').Root} MdastRoot\n * @typedef {import('mdast-util-to-hast').Options} Options\n * @typedef {import('unified').Processor<any, any, any, any>} Processor\n *\n * @typedef {import('mdast-util-to-hast')} DoNotTouchAsThisImportIncludesRawInTree\n */\n\nimport { toHast } from 'mdast-util-to-hast';\n\n// Note: the `<MdastRoot, HastRoot>` overload doesn’t seem to work :'(\n\n/**\n * Plugin that turns markdown into HTML to support rehype.\n *\n * *   If a destination processor is given, that processor runs with a new HTML\n *     (hast) tree (bridge-mode).\n *     As the given processor runs with a hast tree, and rehype plugins support\n *     hast, that means rehype plugins can be used with the given processor.\n *     The hast tree is discarded in the end.\n *     It’s highly unlikely that you want to do this.\n * *   The common case is to not pass a destination processor, in which case the\n *     current processor continues running with a new HTML (hast) tree\n *     (mutate-mode).\n *     As the current processor continues with a hast tree, and rehype plugins\n *     support hast, that means rehype plugins can be used after\n *     `remark-rehype`.\n *     It’s likely that this is what you want to do.\n *\n * @param destination\n *   Optional unified processor.\n * @param options\n *   Options passed to `mdast-util-to-hast`.\n */\nconst remarkRehype = /** @type {(import('unified').Plugin<[Processor, Options?]|[null|undefined, Options?]|[Options]|[], MdastRoot>)} */\n\nfunction (destination, options) {\n  return destination && 'run' in destination ? bridge(destination, options) : mutate(destination || options);\n};\nexport default remarkRehype;\n\n/**\n * Bridge-mode.\n * Runs the destination with the new hast tree.\n *\n * @type {import('unified').Plugin<[Processor, Options?], MdastRoot>}\n */\nfunction bridge(destination, options) {\n  return (node, file, next) => {\n    destination.run(toHast(node, options), file, error => {\n      next(error);\n    });\n  };\n}\n\n/**\n * Mutate-mode.\n * Further plugins run on the hast tree.\n *\n * @type {import('unified').Plugin<[Options?]|void[], MdastRoot, HastRoot>}\n */\nfunction mutate(options) {\n  // @ts-expect-error: assume a corresponding node is returned by `toHast`.\n  return node => toHast(node, options);\n}","/**\n * @typedef {import('./info.js').Info} Info\n * @typedef {Record<string, Info>} Properties\n * @typedef {Record<string, string>} Normal\n */\n\nexport class Schema {\n  /**\n   * @constructor\n   * @param {Properties} property\n   * @param {Normal} normal\n   * @param {string} [space]\n   */\n  constructor(property, normal, space) {\n    this.property = property;\n    this.normal = normal;\n    if (space) {\n      this.space = space;\n    }\n  }\n}\n\n/** @type {Properties} */\nSchema.prototype.property = {};\n/** @type {Normal} */\nSchema.prototype.normal = {};\n/** @type {string|null} */\nSchema.prototype.space = null;","/**\n * @typedef {import('./schema.js').Properties} Properties\n * @typedef {import('./schema.js').Normal} Normal\n */\n\nimport { Schema } from './schema.js';\n\n/**\n * @param {Schema[]} definitions\n * @param {string} [space]\n * @returns {Schema}\n */\nexport function merge(definitions, space) {\n  /** @type {Properties} */\n  const property = {};\n  /** @type {Normal} */\n  const normal = {};\n  let index = -1;\n  while (++index < definitions.length) {\n    Object.assign(property, definitions[index].property);\n    Object.assign(normal, definitions[index].normal);\n  }\n  return new Schema(property, normal, space);\n}","/**\n * @param {string} value\n * @returns {string}\n */\nexport function normalize(value) {\n  return value.toLowerCase();\n}","export class Info {\n  /**\n   * @constructor\n   * @param {string} property\n   * @param {string} attribute\n   */\n  constructor(property, attribute) {\n    /** @type {string} */\n    this.property = property;\n    /** @type {string} */\n    this.attribute = attribute;\n  }\n}\n\n/** @type {string|null} */\nInfo.prototype.space = null;\nInfo.prototype.boolean = false;\nInfo.prototype.booleanish = false;\nInfo.prototype.overloadedBoolean = false;\nInfo.prototype.number = false;\nInfo.prototype.commaSeparated = false;\nInfo.prototype.spaceSeparated = false;\nInfo.prototype.commaOrSpaceSeparated = false;\nInfo.prototype.mustUseProperty = false;\nInfo.prototype.defined = false;","let powers = 0;\nexport const boolean = increment();\nexport const booleanish = increment();\nexport const overloadedBoolean = increment();\nexport const number = increment();\nexport const spaceSeparated = increment();\nexport const commaSeparated = increment();\nexport const commaOrSpaceSeparated = increment();\nfunction increment() {\n  return 2 ** ++powers;\n}","import { Info } from './info.js';\nimport * as types from './types.js';\n\n/** @type {Array<keyof types>} */\n// @ts-expect-error: hush.\nconst checks = Object.keys(types);\nexport class DefinedInfo extends Info {\n  /**\n   * @constructor\n   * @param {string} property\n   * @param {string} attribute\n   * @param {number|null} [mask]\n   * @param {string} [space]\n   */\n  constructor(property, attribute, mask, space) {\n    let index = -1;\n    super(property, attribute);\n    mark(this, 'space', space);\n    if (typeof mask === 'number') {\n      while (++index < checks.length) {\n        const check = checks[index];\n        mark(this, checks[index], (mask & types[check]) === types[check]);\n      }\n    }\n  }\n}\nDefinedInfo.prototype.defined = true;\n\n/**\n * @param {DefinedInfo} values\n * @param {string} key\n * @param {unknown} value\n */\nfunction mark(values, key, value) {\n  if (value) {\n    // @ts-expect-error: assume `value` matches the expected value of `key`.\n    values[key] = value;\n  }\n}","/**\n * @typedef {import('./schema.js').Properties} Properties\n * @typedef {import('./schema.js').Normal} Normal\n *\n * @typedef {Record<string, string>} Attributes\n *\n * @typedef {Object} Definition\n * @property {Record<string, number|null>} properties\n * @property {(attributes: Attributes, property: string) => string} transform\n * @property {string} [space]\n * @property {Attributes} [attributes]\n * @property {Array<string>} [mustUseProperty]\n */\n\nimport { normalize } from '../normalize.js';\nimport { Schema } from './schema.js';\nimport { DefinedInfo } from './defined-info.js';\nconst own = {}.hasOwnProperty;\n\n/**\n * @param {Definition} definition\n * @returns {Schema}\n */\nexport function create(definition) {\n  /** @type {Properties} */\n  const property = {};\n  /** @type {Normal} */\n  const normal = {};\n  /** @type {string} */\n  let prop;\n  for (prop in definition.properties) {\n    if (own.call(definition.properties, prop)) {\n      const value = definition.properties[prop];\n      const info = new DefinedInfo(prop, definition.transform(definition.attributes || {}, prop), value, definition.space);\n      if (definition.mustUseProperty && definition.mustUseProperty.includes(prop)) {\n        info.mustUseProperty = true;\n      }\n      property[prop] = info;\n      normal[normalize(prop)] = prop;\n      normal[normalize(info.attribute)] = prop;\n    }\n  }\n  return new Schema(property, normal, definition.space);\n}","import { create } from './util/create.js';\nexport const xlink = create({\n  space: 'xlink',\n  transform(_, prop) {\n    return 'xlink:' + prop.slice(5).toLowerCase();\n  },\n  properties: {\n    xLinkActuate: null,\n    xLinkArcRole: null,\n    xLinkHref: null,\n    xLinkRole: null,\n    xLinkShow: null,\n    xLinkTitle: null,\n    xLinkType: null\n  }\n});","import { create } from './util/create.js';\nexport const xml = create({\n  space: 'xml',\n  transform(_, prop) {\n    return 'xml:' + prop.slice(3).toLowerCase();\n  },\n  properties: {\n    xmlLang: null,\n    xmlBase: null,\n    xmlSpace: null\n  }\n});","/**\n * @param {Record<string, string>} attributes\n * @param {string} attribute\n * @returns {string}\n */\nexport function caseSensitiveTransform(attributes, attribute) {\n  return attribute in attributes ? attributes[attribute] : attribute;\n}","import { caseSensitiveTransform } from './case-sensitive-transform.js';\n\n/**\n * @param {Record<string, string>} attributes\n * @param {string} property\n * @returns {string}\n */\nexport function caseInsensitiveTransform(attributes, property) {\n  return caseSensitiveTransform(attributes, property.toLowerCase());\n}","import { create } from './util/create.js';\nimport { caseInsensitiveTransform } from './util/case-insensitive-transform.js';\nexport const xmlns = create({\n  space: 'xmlns',\n  attributes: {\n    xmlnsxlink: 'xmlns:xlink'\n  },\n  transform: caseInsensitiveTransform,\n  properties: {\n    xmlns: null,\n    xmlnsXLink: null\n  }\n});","import { booleanish, number, spaceSeparated } from './util/types.js';\nimport { create } from './util/create.js';\nexport const aria = create({\n  transform(_, prop) {\n    return prop === 'role' ? prop : 'aria-' + prop.slice(4).toLowerCase();\n  },\n  properties: {\n    ariaActiveDescendant: null,\n    ariaAtomic: booleanish,\n    ariaAutoComplete: null,\n    ariaBusy: booleanish,\n    ariaChecked: booleanish,\n    ariaColCount: number,\n    ariaColIndex: number,\n    ariaColSpan: number,\n    ariaControls: spaceSeparated,\n    ariaCurrent: null,\n    ariaDescribedBy: spaceSeparated,\n    ariaDetails: null,\n    ariaDisabled: booleanish,\n    ariaDropEffect: spaceSeparated,\n    ariaErrorMessage: null,\n    ariaExpanded: booleanish,\n    ariaFlowTo: spaceSeparated,\n    ariaGrabbed: booleanish,\n    ariaHasPopup: null,\n    ariaHidden: booleanish,\n    ariaInvalid: null,\n    ariaKeyShortcuts: null,\n    ariaLabel: null,\n    ariaLabelledBy: spaceSeparated,\n    ariaLevel: number,\n    ariaLive: null,\n    ariaModal: booleanish,\n    ariaMultiLine: booleanish,\n    ariaMultiSelectable: booleanish,\n    ariaOrientation: null,\n    ariaOwns: spaceSeparated,\n    ariaPlaceholder: null,\n    ariaPosInSet: number,\n    ariaPressed: booleanish,\n    ariaReadOnly: booleanish,\n    ariaRelevant: null,\n    ariaRequired: booleanish,\n    ariaRoleDescription: spaceSeparated,\n    ariaRowCount: number,\n    ariaRowIndex: number,\n    ariaRowSpan: number,\n    ariaSelected: booleanish,\n    ariaSetSize: number,\n    ariaSort: null,\n    ariaValueMax: number,\n    ariaValueMin: number,\n    ariaValueNow: number,\n    ariaValueText: null,\n    role: null\n  }\n});","import { boolean, overloadedBoolean, booleanish, number, spaceSeparated, commaSeparated } from './util/types.js';\nimport { create } from './util/create.js';\nimport { caseInsensitiveTransform } from './util/case-insensitive-transform.js';\nexport const html = create({\n  space: 'html',\n  attributes: {\n    acceptcharset: 'accept-charset',\n    classname: 'class',\n    htmlfor: 'for',\n    httpequiv: 'http-equiv'\n  },\n  transform: caseInsensitiveTransform,\n  mustUseProperty: ['checked', 'multiple', 'muted', 'selected'],\n  properties: {\n    // Standard Properties.\n    abbr: null,\n    accept: commaSeparated,\n    acceptCharset: spaceSeparated,\n    accessKey: spaceSeparated,\n    action: null,\n    allow: null,\n    allowFullScreen: boolean,\n    allowPaymentRequest: boolean,\n    allowUserMedia: boolean,\n    alt: null,\n    as: null,\n    async: boolean,\n    autoCapitalize: null,\n    autoComplete: spaceSeparated,\n    autoFocus: boolean,\n    autoPlay: boolean,\n    blocking: spaceSeparated,\n    capture: boolean,\n    charSet: null,\n    checked: boolean,\n    cite: null,\n    className: spaceSeparated,\n    cols: number,\n    colSpan: null,\n    content: null,\n    contentEditable: booleanish,\n    controls: boolean,\n    controlsList: spaceSeparated,\n    coords: number | commaSeparated,\n    crossOrigin: null,\n    data: null,\n    dateTime: null,\n    decoding: null,\n    default: boolean,\n    defer: boolean,\n    dir: null,\n    dirName: null,\n    disabled: boolean,\n    download: overloadedBoolean,\n    draggable: booleanish,\n    encType: null,\n    enterKeyHint: null,\n    fetchPriority: null,\n    form: null,\n    formAction: null,\n    formEncType: null,\n    formMethod: null,\n    formNoValidate: boolean,\n    formTarget: null,\n    headers: spaceSeparated,\n    height: number,\n    hidden: boolean,\n    high: number,\n    href: null,\n    hrefLang: null,\n    htmlFor: spaceSeparated,\n    httpEquiv: spaceSeparated,\n    id: null,\n    imageSizes: null,\n    imageSrcSet: null,\n    inert: boolean,\n    inputMode: null,\n    integrity: null,\n    is: null,\n    isMap: boolean,\n    itemId: null,\n    itemProp: spaceSeparated,\n    itemRef: spaceSeparated,\n    itemScope: boolean,\n    itemType: spaceSeparated,\n    kind: null,\n    label: null,\n    lang: null,\n    language: null,\n    list: null,\n    loading: null,\n    loop: boolean,\n    low: number,\n    manifest: null,\n    max: null,\n    maxLength: number,\n    media: null,\n    method: null,\n    min: null,\n    minLength: number,\n    multiple: boolean,\n    muted: boolean,\n    name: null,\n    nonce: null,\n    noModule: boolean,\n    noValidate: boolean,\n    onAbort: null,\n    onAfterPrint: null,\n    onAuxClick: null,\n    onBeforeMatch: null,\n    onBeforePrint: null,\n    onBeforeToggle: null,\n    onBeforeUnload: null,\n    onBlur: null,\n    onCancel: null,\n    onCanPlay: null,\n    onCanPlayThrough: null,\n    onChange: null,\n    onClick: null,\n    onClose: null,\n    onContextLost: null,\n    onContextMenu: null,\n    onContextRestored: null,\n    onCopy: null,\n    onCueChange: null,\n    onCut: null,\n    onDblClick: null,\n    onDrag: null,\n    onDragEnd: null,\n    onDragEnter: null,\n    onDragExit: null,\n    onDragLeave: null,\n    onDragOver: null,\n    onDragStart: null,\n    onDrop: null,\n    onDurationChange: null,\n    onEmptied: null,\n    onEnded: null,\n    onError: null,\n    onFocus: null,\n    onFormData: null,\n    onHashChange: null,\n    onInput: null,\n    onInvalid: null,\n    onKeyDown: null,\n    onKeyPress: null,\n    onKeyUp: null,\n    onLanguageChange: null,\n    onLoad: null,\n    onLoadedData: null,\n    onLoadedMetadata: null,\n    onLoadEnd: null,\n    onLoadStart: null,\n    onMessage: null,\n    onMessageError: null,\n    onMouseDown: null,\n    onMouseEnter: null,\n    onMouseLeave: null,\n    onMouseMove: null,\n    onMouseOut: null,\n    onMouseOver: null,\n    onMouseUp: null,\n    onOffline: null,\n    onOnline: null,\n    onPageHide: null,\n    onPageShow: null,\n    onPaste: null,\n    onPause: null,\n    onPlay: null,\n    onPlaying: null,\n    onPopState: null,\n    onProgress: null,\n    onRateChange: null,\n    onRejectionHandled: null,\n    onReset: null,\n    onResize: null,\n    onScroll: null,\n    onScrollEnd: null,\n    onSecurityPolicyViolation: null,\n    onSeeked: null,\n    onSeeking: null,\n    onSelect: null,\n    onSlotChange: null,\n    onStalled: null,\n    onStorage: null,\n    onSubmit: null,\n    onSuspend: null,\n    onTimeUpdate: null,\n    onToggle: null,\n    onUnhandledRejection: null,\n    onUnload: null,\n    onVolumeChange: null,\n    onWaiting: null,\n    onWheel: null,\n    open: boolean,\n    optimum: number,\n    pattern: null,\n    ping: spaceSeparated,\n    placeholder: null,\n    playsInline: boolean,\n    popover: null,\n    popoverTarget: null,\n    popoverTargetAction: null,\n    poster: null,\n    preload: null,\n    readOnly: boolean,\n    referrerPolicy: null,\n    rel: spaceSeparated,\n    required: boolean,\n    reversed: boolean,\n    rows: number,\n    rowSpan: number,\n    sandbox: spaceSeparated,\n    scope: null,\n    scoped: boolean,\n    seamless: boolean,\n    selected: boolean,\n    shadowRootDelegatesFocus: boolean,\n    shadowRootMode: null,\n    shape: null,\n    size: number,\n    sizes: null,\n    slot: null,\n    span: number,\n    spellCheck: booleanish,\n    src: null,\n    srcDoc: null,\n    srcLang: null,\n    srcSet: null,\n    start: number,\n    step: null,\n    style: null,\n    tabIndex: number,\n    target: null,\n    title: null,\n    translate: null,\n    type: null,\n    typeMustMatch: boolean,\n    useMap: null,\n    value: booleanish,\n    width: number,\n    wrap: null,\n    // Legacy.\n    // See: https://html.spec.whatwg.org/#other-elements,-attributes-and-apis\n    align: null,\n    // Several. Use CSS `text-align` instead,\n    aLink: null,\n    // `<body>`. Use CSS `a:active {color}` instead\n    archive: spaceSeparated,\n    // `<object>`. List of URIs to archives\n    axis: null,\n    // `<td>` and `<th>`. Use `scope` on `<th>`\n    background: null,\n    // `<body>`. Use CSS `background-image` instead\n    bgColor: null,\n    // `<body>` and table elements. Use CSS `background-color` instead\n    border: number,\n    // `<table>`. Use CSS `border-width` instead,\n    borderColor: null,\n    // `<table>`. Use CSS `border-color` instead,\n    bottomMargin: number,\n    // `<body>`\n    cellPadding: null,\n    // `<table>`\n    cellSpacing: null,\n    // `<table>`\n    char: null,\n    // Several table elements. When `align=char`, sets the character to align on\n    charOff: null,\n    // Several table elements. When `char`, offsets the alignment\n    classId: null,\n    // `<object>`\n    clear: null,\n    // `<br>`. Use CSS `clear` instead\n    code: null,\n    // `<object>`\n    codeBase: null,\n    // `<object>`\n    codeType: null,\n    // `<object>`\n    color: null,\n    // `<font>` and `<hr>`. Use CSS instead\n    compact: boolean,\n    // Lists. Use CSS to reduce space between items instead\n    declare: boolean,\n    // `<object>`\n    event: null,\n    // `<script>`\n    face: null,\n    // `<font>`. Use CSS instead\n    frame: null,\n    // `<table>`\n    frameBorder: null,\n    // `<iframe>`. Use CSS `border` instead\n    hSpace: number,\n    // `<img>` and `<object>`\n    leftMargin: number,\n    // `<body>`\n    link: null,\n    // `<body>`. Use CSS `a:link {color: *}` instead\n    longDesc: null,\n    // `<frame>`, `<iframe>`, and `<img>`. Use an `<a>`\n    lowSrc: null,\n    // `<img>`. Use a `<picture>`\n    marginHeight: number,\n    // `<body>`\n    marginWidth: number,\n    // `<body>`\n    noResize: boolean,\n    // `<frame>`\n    noHref: boolean,\n    // `<area>`. Use no href instead of an explicit `nohref`\n    noShade: boolean,\n    // `<hr>`. Use background-color and height instead of borders\n    noWrap: boolean,\n    // `<td>` and `<th>`\n    object: null,\n    // `<applet>`\n    profile: null,\n    // `<head>`\n    prompt: null,\n    // `<isindex>`\n    rev: null,\n    // `<link>`\n    rightMargin: number,\n    // `<body>`\n    rules: null,\n    // `<table>`\n    scheme: null,\n    // `<meta>`\n    scrolling: booleanish,\n    // `<frame>`. Use overflow in the child context\n    standby: null,\n    // `<object>`\n    summary: null,\n    // `<table>`\n    text: null,\n    // `<body>`. Use CSS `color` instead\n    topMargin: number,\n    // `<body>`\n    valueType: null,\n    // `<param>`\n    version: null,\n    // `<html>`. Use a doctype.\n    vAlign: null,\n    // Several. Use CSS `vertical-align` instead\n    vLink: null,\n    // `<body>`. Use CSS `a:visited {color}` instead\n    vSpace: number,\n    // `<img>` and `<object>`\n\n    // Non-standard Properties.\n    allowTransparency: null,\n    autoCorrect: null,\n    autoSave: null,\n    disablePictureInPicture: boolean,\n    disableRemotePlayback: boolean,\n    prefix: null,\n    property: null,\n    results: number,\n    security: null,\n    unselectable: null\n  }\n});","import { boolean, number, spaceSeparated, commaSeparated, commaOrSpaceSeparated } from './util/types.js';\nimport { create } from './util/create.js';\nimport { caseSensitiveTransform } from './util/case-sensitive-transform.js';\nexport const svg = create({\n  space: 'svg',\n  attributes: {\n    accentHeight: 'accent-height',\n    alignmentBaseline: 'alignment-baseline',\n    arabicForm: 'arabic-form',\n    baselineShift: 'baseline-shift',\n    capHeight: 'cap-height',\n    className: 'class',\n    clipPath: 'clip-path',\n    clipRule: 'clip-rule',\n    colorInterpolation: 'color-interpolation',\n    colorInterpolationFilters: 'color-interpolation-filters',\n    colorProfile: 'color-profile',\n    colorRendering: 'color-rendering',\n    crossOrigin: 'crossorigin',\n    dataType: 'datatype',\n    dominantBaseline: 'dominant-baseline',\n    enableBackground: 'enable-background',\n    fillOpacity: 'fill-opacity',\n    fillRule: 'fill-rule',\n    floodColor: 'flood-color',\n    floodOpacity: 'flood-opacity',\n    fontFamily: 'font-family',\n    fontSize: 'font-size',\n    fontSizeAdjust: 'font-size-adjust',\n    fontStretch: 'font-stretch',\n    fontStyle: 'font-style',\n    fontVariant: 'font-variant',\n    fontWeight: 'font-weight',\n    glyphName: 'glyph-name',\n    glyphOrientationHorizontal: 'glyph-orientation-horizontal',\n    glyphOrientationVertical: 'glyph-orientation-vertical',\n    hrefLang: 'hreflang',\n    horizAdvX: 'horiz-adv-x',\n    horizOriginX: 'horiz-origin-x',\n    horizOriginY: 'horiz-origin-y',\n    imageRendering: 'image-rendering',\n    letterSpacing: 'letter-spacing',\n    lightingColor: 'lighting-color',\n    markerEnd: 'marker-end',\n    markerMid: 'marker-mid',\n    markerStart: 'marker-start',\n    navDown: 'nav-down',\n    navDownLeft: 'nav-down-left',\n    navDownRight: 'nav-down-right',\n    navLeft: 'nav-left',\n    navNext: 'nav-next',\n    navPrev: 'nav-prev',\n    navRight: 'nav-right',\n    navUp: 'nav-up',\n    navUpLeft: 'nav-up-left',\n    navUpRight: 'nav-up-right',\n    onAbort: 'onabort',\n    onActivate: 'onactivate',\n    onAfterPrint: 'onafterprint',\n    onBeforePrint: 'onbeforeprint',\n    onBegin: 'onbegin',\n    onCancel: 'oncancel',\n    onCanPlay: 'oncanplay',\n    onCanPlayThrough: 'oncanplaythrough',\n    onChange: 'onchange',\n    onClick: 'onclick',\n    onClose: 'onclose',\n    onCopy: 'oncopy',\n    onCueChange: 'oncuechange',\n    onCut: 'oncut',\n    onDblClick: 'ondblclick',\n    onDrag: 'ondrag',\n    onDragEnd: 'ondragend',\n    onDragEnter: 'ondragenter',\n    onDragExit: 'ondragexit',\n    onDragLeave: 'ondragleave',\n    onDragOver: 'ondragover',\n    onDragStart: 'ondragstart',\n    onDrop: 'ondrop',\n    onDurationChange: 'ondurationchange',\n    onEmptied: 'onemptied',\n    onEnd: 'onend',\n    onEnded: 'onended',\n    onError: 'onerror',\n    onFocus: 'onfocus',\n    onFocusIn: 'onfocusin',\n    onFocusOut: 'onfocusout',\n    onHashChange: 'onhashchange',\n    onInput: 'oninput',\n    onInvalid: 'oninvalid',\n    onKeyDown: 'onkeydown',\n    onKeyPress: 'onkeypress',\n    onKeyUp: 'onkeyup',\n    onLoad: 'onload',\n    onLoadedData: 'onloadeddata',\n    onLoadedMetadata: 'onloadedmetadata',\n    onLoadStart: 'onloadstart',\n    onMessage: 'onmessage',\n    onMouseDown: 'onmousedown',\n    onMouseEnter: 'onmouseenter',\n    onMouseLeave: 'onmouseleave',\n    onMouseMove: 'onmousemove',\n    onMouseOut: 'onmouseout',\n    onMouseOver: 'onmouseover',\n    onMouseUp: 'onmouseup',\n    onMouseWheel: 'onmousewheel',\n    onOffline: 'onoffline',\n    onOnline: 'ononline',\n    onPageHide: 'onpagehide',\n    onPageShow: 'onpageshow',\n    onPaste: 'onpaste',\n    onPause: 'onpause',\n    onPlay: 'onplay',\n    onPlaying: 'onplaying',\n    onPopState: 'onpopstate',\n    onProgress: 'onprogress',\n    onRateChange: 'onratechange',\n    onRepeat: 'onrepeat',\n    onReset: 'onreset',\n    onResize: 'onresize',\n    onScroll: 'onscroll',\n    onSeeked: 'onseeked',\n    onSeeking: 'onseeking',\n    onSelect: 'onselect',\n    onShow: 'onshow',\n    onStalled: 'onstalled',\n    onStorage: 'onstorage',\n    onSubmit: 'onsubmit',\n    onSuspend: 'onsuspend',\n    onTimeUpdate: 'ontimeupdate',\n    onToggle: 'ontoggle',\n    onUnload: 'onunload',\n    onVolumeChange: 'onvolumechange',\n    onWaiting: 'onwaiting',\n    onZoom: 'onzoom',\n    overlinePosition: 'overline-position',\n    overlineThickness: 'overline-thickness',\n    paintOrder: 'paint-order',\n    panose1: 'panose-1',\n    pointerEvents: 'pointer-events',\n    referrerPolicy: 'referrerpolicy',\n    renderingIntent: 'rendering-intent',\n    shapeRendering: 'shape-rendering',\n    stopColor: 'stop-color',\n    stopOpacity: 'stop-opacity',\n    strikethroughPosition: 'strikethrough-position',\n    strikethroughThickness: 'strikethrough-thickness',\n    strokeDashArray: 'stroke-dasharray',\n    strokeDashOffset: 'stroke-dashoffset',\n    strokeLineCap: 'stroke-linecap',\n    strokeLineJoin: 'stroke-linejoin',\n    strokeMiterLimit: 'stroke-miterlimit',\n    strokeOpacity: 'stroke-opacity',\n    strokeWidth: 'stroke-width',\n    tabIndex: 'tabindex',\n    textAnchor: 'text-anchor',\n    textDecoration: 'text-decoration',\n    textRendering: 'text-rendering',\n    transformOrigin: 'transform-origin',\n    typeOf: 'typeof',\n    underlinePosition: 'underline-position',\n    underlineThickness: 'underline-thickness',\n    unicodeBidi: 'unicode-bidi',\n    unicodeRange: 'unicode-range',\n    unitsPerEm: 'units-per-em',\n    vAlphabetic: 'v-alphabetic',\n    vHanging: 'v-hanging',\n    vIdeographic: 'v-ideographic',\n    vMathematical: 'v-mathematical',\n    vectorEffect: 'vector-effect',\n    vertAdvY: 'vert-adv-y',\n    vertOriginX: 'vert-origin-x',\n    vertOriginY: 'vert-origin-y',\n    wordSpacing: 'word-spacing',\n    writingMode: 'writing-mode',\n    xHeight: 'x-height',\n    // These were camelcased in Tiny. Now lowercased in SVG 2\n    playbackOrder: 'playbackorder',\n    timelineBegin: 'timelinebegin'\n  },\n  transform: caseSensitiveTransform,\n  properties: {\n    about: commaOrSpaceSeparated,\n    accentHeight: number,\n    accumulate: null,\n    additive: null,\n    alignmentBaseline: null,\n    alphabetic: number,\n    amplitude: number,\n    arabicForm: null,\n    ascent: number,\n    attributeName: null,\n    attributeType: null,\n    azimuth: number,\n    bandwidth: null,\n    baselineShift: null,\n    baseFrequency: null,\n    baseProfile: null,\n    bbox: null,\n    begin: null,\n    bias: number,\n    by: null,\n    calcMode: null,\n    capHeight: number,\n    className: spaceSeparated,\n    clip: null,\n    clipPath: null,\n    clipPathUnits: null,\n    clipRule: null,\n    color: null,\n    colorInterpolation: null,\n    colorInterpolationFilters: null,\n    colorProfile: null,\n    colorRendering: null,\n    content: null,\n    contentScriptType: null,\n    contentStyleType: null,\n    crossOrigin: null,\n    cursor: null,\n    cx: null,\n    cy: null,\n    d: null,\n    dataType: null,\n    defaultAction: null,\n    descent: number,\n    diffuseConstant: number,\n    direction: null,\n    display: null,\n    dur: null,\n    divisor: number,\n    dominantBaseline: null,\n    download: boolean,\n    dx: null,\n    dy: null,\n    edgeMode: null,\n    editable: null,\n    elevation: number,\n    enableBackground: null,\n    end: null,\n    event: null,\n    exponent: number,\n    externalResourcesRequired: null,\n    fill: null,\n    fillOpacity: number,\n    fillRule: null,\n    filter: null,\n    filterRes: null,\n    filterUnits: null,\n    floodColor: null,\n    floodOpacity: null,\n    focusable: null,\n    focusHighlight: null,\n    fontFamily: null,\n    fontSize: null,\n    fontSizeAdjust: null,\n    fontStretch: null,\n    fontStyle: null,\n    fontVariant: null,\n    fontWeight: null,\n    format: null,\n    fr: null,\n    from: null,\n    fx: null,\n    fy: null,\n    g1: commaSeparated,\n    g2: commaSeparated,\n    glyphName: commaSeparated,\n    glyphOrientationHorizontal: null,\n    glyphOrientationVertical: null,\n    glyphRef: null,\n    gradientTransform: null,\n    gradientUnits: null,\n    handler: null,\n    hanging: number,\n    hatchContentUnits: null,\n    hatchUnits: null,\n    height: null,\n    href: null,\n    hrefLang: null,\n    horizAdvX: number,\n    horizOriginX: number,\n    horizOriginY: number,\n    id: null,\n    ideographic: number,\n    imageRendering: null,\n    initialVisibility: null,\n    in: null,\n    in2: null,\n    intercept: number,\n    k: number,\n    k1: number,\n    k2: number,\n    k3: number,\n    k4: number,\n    kernelMatrix: commaOrSpaceSeparated,\n    kernelUnitLength: null,\n    keyPoints: null,\n    // SEMI_COLON_SEPARATED\n    keySplines: null,\n    // SEMI_COLON_SEPARATED\n    keyTimes: null,\n    // SEMI_COLON_SEPARATED\n    kerning: null,\n    lang: null,\n    lengthAdjust: null,\n    letterSpacing: null,\n    lightingColor: null,\n    limitingConeAngle: number,\n    local: null,\n    markerEnd: null,\n    markerMid: null,\n    markerStart: null,\n    markerHeight: null,\n    markerUnits: null,\n    markerWidth: null,\n    mask: null,\n    maskContentUnits: null,\n    maskUnits: null,\n    mathematical: null,\n    max: null,\n    media: null,\n    mediaCharacterEncoding: null,\n    mediaContentEncodings: null,\n    mediaSize: number,\n    mediaTime: null,\n    method: null,\n    min: null,\n    mode: null,\n    name: null,\n    navDown: null,\n    navDownLeft: null,\n    navDownRight: null,\n    navLeft: null,\n    navNext: null,\n    navPrev: null,\n    navRight: null,\n    navUp: null,\n    navUpLeft: null,\n    navUpRight: null,\n    numOctaves: null,\n    observer: null,\n    offset: null,\n    onAbort: null,\n    onActivate: null,\n    onAfterPrint: null,\n    onBeforePrint: null,\n    onBegin: null,\n    onCancel: null,\n    onCanPlay: null,\n    onCanPlayThrough: null,\n    onChange: null,\n    onClick: null,\n    onClose: null,\n    onCopy: null,\n    onCueChange: null,\n    onCut: null,\n    onDblClick: null,\n    onDrag: null,\n    onDragEnd: null,\n    onDragEnter: null,\n    onDragExit: null,\n    onDragLeave: null,\n    onDragOver: null,\n    onDragStart: null,\n    onDrop: null,\n    onDurationChange: null,\n    onEmptied: null,\n    onEnd: null,\n    onEnded: null,\n    onError: null,\n    onFocus: null,\n    onFocusIn: null,\n    onFocusOut: null,\n    onHashChange: null,\n    onInput: null,\n    onInvalid: null,\n    onKeyDown: null,\n    onKeyPress: null,\n    onKeyUp: null,\n    onLoad: null,\n    onLoadedData: null,\n    onLoadedMetadata: null,\n    onLoadStart: null,\n    onMessage: null,\n    onMouseDown: null,\n    onMouseEnter: null,\n    onMouseLeave: null,\n    onMouseMove: null,\n    onMouseOut: null,\n    onMouseOver: null,\n    onMouseUp: null,\n    onMouseWheel: null,\n    onOffline: null,\n    onOnline: null,\n    onPageHide: null,\n    onPageShow: null,\n    onPaste: null,\n    onPause: null,\n    onPlay: null,\n    onPlaying: null,\n    onPopState: null,\n    onProgress: null,\n    onRateChange: null,\n    onRepeat: null,\n    onReset: null,\n    onResize: null,\n    onScroll: null,\n    onSeeked: null,\n    onSeeking: null,\n    onSelect: null,\n    onShow: null,\n    onStalled: null,\n    onStorage: null,\n    onSubmit: null,\n    onSuspend: null,\n    onTimeUpdate: null,\n    onToggle: null,\n    onUnload: null,\n    onVolumeChange: null,\n    onWaiting: null,\n    onZoom: null,\n    opacity: null,\n    operator: null,\n    order: null,\n    orient: null,\n    orientation: null,\n    origin: null,\n    overflow: null,\n    overlay: null,\n    overlinePosition: number,\n    overlineThickness: number,\n    paintOrder: null,\n    panose1: null,\n    path: null,\n    pathLength: number,\n    patternContentUnits: null,\n    patternTransform: null,\n    patternUnits: null,\n    phase: null,\n    ping: spaceSeparated,\n    pitch: null,\n    playbackOrder: null,\n    pointerEvents: null,\n    points: null,\n    pointsAtX: number,\n    pointsAtY: number,\n    pointsAtZ: number,\n    preserveAlpha: null,\n    preserveAspectRatio: null,\n    primitiveUnits: null,\n    propagate: null,\n    property: commaOrSpaceSeparated,\n    r: null,\n    radius: null,\n    referrerPolicy: null,\n    refX: null,\n    refY: null,\n    rel: commaOrSpaceSeparated,\n    rev: commaOrSpaceSeparated,\n    renderingIntent: null,\n    repeatCount: null,\n    repeatDur: null,\n    requiredExtensions: commaOrSpaceSeparated,\n    requiredFeatures: commaOrSpaceSeparated,\n    requiredFonts: commaOrSpaceSeparated,\n    requiredFormats: commaOrSpaceSeparated,\n    resource: null,\n    restart: null,\n    result: null,\n    rotate: null,\n    rx: null,\n    ry: null,\n    scale: null,\n    seed: null,\n    shapeRendering: null,\n    side: null,\n    slope: null,\n    snapshotTime: null,\n    specularConstant: number,\n    specularExponent: number,\n    spreadMethod: null,\n    spacing: null,\n    startOffset: null,\n    stdDeviation: null,\n    stemh: null,\n    stemv: null,\n    stitchTiles: null,\n    stopColor: null,\n    stopOpacity: null,\n    strikethroughPosition: number,\n    strikethroughThickness: number,\n    string: null,\n    stroke: null,\n    strokeDashArray: commaOrSpaceSeparated,\n    strokeDashOffset: null,\n    strokeLineCap: null,\n    strokeLineJoin: null,\n    strokeMiterLimit: number,\n    strokeOpacity: number,\n    strokeWidth: null,\n    style: null,\n    surfaceScale: number,\n    syncBehavior: null,\n    syncBehaviorDefault: null,\n    syncMaster: null,\n    syncTolerance: null,\n    syncToleranceDefault: null,\n    systemLanguage: commaOrSpaceSeparated,\n    tabIndex: number,\n    tableValues: null,\n    target: null,\n    targetX: number,\n    targetY: number,\n    textAnchor: null,\n    textDecoration: null,\n    textRendering: null,\n    textLength: null,\n    timelineBegin: null,\n    title: null,\n    transformBehavior: null,\n    type: null,\n    typeOf: commaOrSpaceSeparated,\n    to: null,\n    transform: null,\n    transformOrigin: null,\n    u1: null,\n    u2: null,\n    underlinePosition: number,\n    underlineThickness: number,\n    unicode: null,\n    unicodeBidi: null,\n    unicodeRange: null,\n    unitsPerEm: number,\n    values: null,\n    vAlphabetic: number,\n    vMathematical: number,\n    vectorEffect: null,\n    vHanging: number,\n    vIdeographic: number,\n    version: null,\n    vertAdvY: number,\n    vertOriginX: number,\n    vertOriginY: number,\n    viewBox: null,\n    viewTarget: null,\n    visibility: null,\n    width: null,\n    widths: null,\n    wordSpacing: null,\n    writingMode: null,\n    x: null,\n    x1: null,\n    x2: null,\n    xChannelSelector: null,\n    xHeight: number,\n    y: null,\n    y1: null,\n    y2: null,\n    yChannelSelector: null,\n    z: null,\n    zoomAndPan: null\n  }\n});","/**\n * @typedef {import('./lib/util/info.js').Info} Info\n * @typedef {import('./lib/util/schema.js').Schema} Schema\n */\n\nimport { merge } from './lib/util/merge.js';\nimport { xlink } from './lib/xlink.js';\nimport { xml } from './lib/xml.js';\nimport { xmlns } from './lib/xmlns.js';\nimport { aria } from './lib/aria.js';\nimport { html as htmlBase } from './lib/html.js';\nimport { svg as svgBase } from './lib/svg.js';\nexport { find } from './lib/find.js';\nexport { hastToReact } from './lib/hast-to-react.js';\nexport { normalize } from './lib/normalize.js';\nexport const html = merge([xml, xlink, xmlns, aria, htmlBase], 'html');\nexport const svg = merge([xml, xlink, xmlns, aria, svgBase], 'svg');","import { visit } from 'unist-util-visit';\n\n/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('hast').Root} Root\n * @typedef {import('hast').Element} Element\n *\n * @callback AllowElement\n * @param {Element} element\n * @param {number} index\n * @param {Element|Root} parent\n * @returns {boolean|undefined}\n *\n * @typedef Options\n * @property {Array<string>} [allowedElements]\n * @property {Array<string>} [disallowedElements=[]]\n * @property {AllowElement} [allowElement]\n * @property {boolean} [unwrapDisallowed=false]\n */\n\n/**\n * @type {import('unified').Plugin<[Options], Root>}\n */\nexport default function rehypeFilter(options) {\n  if (options.allowedElements && options.disallowedElements) {\n    throw new TypeError('Only one of `allowedElements` and `disallowedElements` should be defined');\n  }\n  if (options.allowedElements || options.disallowedElements || options.allowElement) {\n    return tree => {\n      visit(tree, 'element', (node, index, parent_) => {\n        const parent = /** @type {Element|Root} */parent_;\n        /** @type {boolean|undefined} */\n        let remove;\n        if (options.allowedElements) {\n          remove = !options.allowedElements.includes(node.tagName);\n        } else if (options.disallowedElements) {\n          remove = options.disallowedElements.includes(node.tagName);\n        }\n        if (!remove && options.allowElement && typeof index === 'number') {\n          remove = !options.allowElement(node, index, parent);\n        }\n        if (remove && typeof index === 'number') {\n          if (options.unwrapDisallowed && node.children) {\n            parent.children.splice(index, 1, ...node.children);\n          } else {\n            parent.children.splice(index, 1);\n          }\n          return index;\n        }\n        return undefined;\n      });\n    };\n  }\n}","/**\n * Check if the given value is *inter-element whitespace*.\n *\n * @param {unknown} thing\n *   Thing to check (typically `Node` or `string`).\n * @returns {boolean}\n *   Whether the `value` is inter-element whitespace (`boolean`): consisting of\n *   zero or more of space, tab (`\\t`), line feed (`\\n`), carriage return\n *   (`\\r`), or form feed (`\\f`).\n *   If a node is passed it must be a `Text` node, whose `value` field is\n *   checked.\n */\nexport function whitespace(thing) {\n  /** @type {string} */\n  const value =\n  // @ts-expect-error looks like a node.\n  thing && typeof thing === 'object' && thing.type === 'text' ?\n  // @ts-expect-error looks like a text.\n  thing.value || '' : thing;\n\n  // HTML whitespace expression.\n  // See <https://infra.spec.whatwg.org/#ascii-whitespace>.\n  return typeof value === 'string' && value.replace(/[ \\t\\n\\f\\r]/g, '') === '';\n}","/**\n * @typedef {import('./util/schema.js').Schema} Schema\n */\n\nimport { normalize } from './normalize.js';\nimport { DefinedInfo } from './util/defined-info.js';\nimport { Info } from './util/info.js';\nconst valid = /^data[-\\w.:]+$/i;\nconst dash = /-[a-z]/g;\nconst cap = /[A-Z]/g;\n\n/**\n * @param {Schema} schema\n * @param {string} value\n * @returns {Info}\n */\nexport function find(schema, value) {\n  const normal = normalize(value);\n  let prop = value;\n  let Type = Info;\n  if (normal in schema.normal) {\n    return schema.property[schema.normal[normal]];\n  }\n  if (normal.length > 4 && normal.slice(0, 4) === 'data' && valid.test(value)) {\n    // Attribute or property.\n    if (value.charAt(4) === '-') {\n      // Turn it into a property.\n      const rest = value.slice(5).replace(dash, camelcase);\n      prop = 'data' + rest.charAt(0).toUpperCase() + rest.slice(1);\n    } else {\n      // Turn it into an attribute.\n      const rest = value.slice(4);\n      if (!dash.test(rest)) {\n        let dashes = rest.replace(cap, kebab);\n        if (dashes.charAt(0) !== '-') {\n          dashes = '-' + dashes;\n        }\n        value = 'data' + dashes;\n      }\n    }\n    Type = DefinedInfo;\n  }\n  return new Type(prop, value);\n}\n\n/**\n * @param {string} $0\n * @returns {string}\n */\nfunction kebab($0) {\n  return '-' + $0.toLowerCase();\n}\n\n/**\n * @param {string} $0\n * @returns {string}\n */\nfunction camelcase($0) {\n  return $0.charAt(1).toUpperCase();\n}","/**\n * `hast` is close to `React`, but differs in a couple of cases.\n *\n * To get a React property from a hast property, check if it is in\n * `hastToReact`, if it is, then use the corresponding value,\n * otherwise, use the hast property.\n *\n * @type {Record<string, string>}\n */\nexport const hastToReact = {\n  classId: 'classID',\n  dataType: 'datatype',\n  itemId: 'itemID',\n  strokeDashArray: 'strokeDasharray',\n  strokeDashOffset: 'strokeDashoffset',\n  strokeLineCap: 'strokeLinecap',\n  strokeLineJoin: 'strokeLinejoin',\n  strokeMiterLimit: 'strokeMiterlimit',\n  typeOf: 'typeof',\n  xLinkActuate: 'xlinkActuate',\n  xLinkArcRole: 'xlinkArcrole',\n  xLinkHref: 'xlinkHref',\n  xLinkRole: 'xlinkRole',\n  xLinkShow: 'xlinkShow',\n  xLinkTitle: 'xlinkTitle',\n  xLinkType: 'xlinkType',\n  xmlnsXLink: 'xmlnsXlink'\n};","import StyleToObject from './index.js';\nexport default StyleToObject;","const protocols = ['http', 'https', 'mailto', 'tel'];\n\n/**\n * @param {string} uri\n * @returns {string}\n */\nexport function uriTransformer(uri) {\n  const url = (uri || '').trim();\n  const first = url.charAt(0);\n  if (first === '#' || first === '/') {\n    return url;\n  }\n  const colon = url.indexOf(':');\n  if (colon === -1) {\n    return url;\n  }\n  let index = -1;\n  while (++index < protocols.length) {\n    const protocol = protocols[index];\n    if (colon === protocol.length && url.slice(0, protocol.length).toLowerCase() === protocol) {\n      return url;\n    }\n  }\n  index = url.indexOf('?');\n  if (index !== -1 && colon > index) {\n    return url;\n  }\n  index = url.indexOf('#');\n  if (index !== -1 && colon > index) {\n    return url;\n  }\n\n  // eslint-disable-next-line no-script-url\n  return 'javascript:void(0)';\n}","/**\n * @template T\n * @typedef {import('react').ComponentType<T>} ComponentType<T>\n */\n\n/**\n * @template {import('react').ElementType} T\n * @typedef {import('react').ComponentPropsWithoutRef<T>} ComponentPropsWithoutRef<T>\n */\n\n/**\n * @typedef {import('react').ReactNode} ReactNode\n * @typedef {import('unist').Position} Position\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n * @typedef {import('hast').Root} Root\n * @typedef {import('hast').Text} Text\n * @typedef {import('hast').Comment} Comment\n * @typedef {import('hast').DocType} Doctype\n * @typedef {import('property-information').Info} Info\n * @typedef {import('property-information').Schema} Schema\n * @typedef {import('./complex-types.js').ReactMarkdownProps} ReactMarkdownProps\n *\n * @typedef Raw\n * @property {'raw'} type\n * @property {string} value\n *\n * @typedef Context\n * @property {Options} options\n * @property {Schema} schema\n * @property {number} listDepth\n *\n * @callback TransformLink\n * @param {string} href\n * @param {Array<ElementContent>} children\n * @param {string?} title\n * @returns {string}\n *\n * @callback TransformImage\n * @param {string} src\n * @param {string} alt\n * @param {string?} title\n * @returns {string}\n *\n * @typedef {import('react').HTMLAttributeAnchorTarget} TransformLinkTargetType\n *\n * @callback TransformLinkTarget\n * @param {string} href\n * @param {Array<ElementContent>} children\n * @param {string?} title\n * @returns {TransformLinkTargetType|undefined}\n *\n * @typedef {keyof JSX.IntrinsicElements} ReactMarkdownNames\n *\n * To do: is `data-sourcepos` typeable?\n *\n * @typedef {ComponentPropsWithoutRef<'code'> & ReactMarkdownProps & {inline?: boolean}} CodeProps\n * @typedef {ComponentPropsWithoutRef<'h1'> & ReactMarkdownProps & {level: number}} HeadingProps\n * @typedef {ComponentPropsWithoutRef<'li'> & ReactMarkdownProps & {checked: boolean|null, index: number, ordered: boolean}} LiProps\n * @typedef {ComponentPropsWithoutRef<'ol'> & ReactMarkdownProps & {depth: number, ordered: true}} OrderedListProps\n * @typedef {ComponentPropsWithoutRef<'td'> & ReactMarkdownProps & {style?: Record<string, unknown>, isHeader: false}} TableDataCellProps\n * @typedef {ComponentPropsWithoutRef<'th'> & ReactMarkdownProps & {style?: Record<string, unknown>, isHeader: true}} TableHeaderCellProps\n * @typedef {ComponentPropsWithoutRef<'tr'> & ReactMarkdownProps & {isHeader: boolean}} TableRowProps\n * @typedef {ComponentPropsWithoutRef<'ul'> & ReactMarkdownProps & {depth: number, ordered: false}} UnorderedListProps\n *\n * @typedef {ComponentType<CodeProps>} CodeComponent\n * @typedef {ComponentType<HeadingProps>} HeadingComponent\n * @typedef {ComponentType<LiProps>} LiComponent\n * @typedef {ComponentType<OrderedListProps>} OrderedListComponent\n * @typedef {ComponentType<TableDataCellProps>} TableDataCellComponent\n * @typedef {ComponentType<TableHeaderCellProps>} TableHeaderCellComponent\n * @typedef {ComponentType<TableRowProps>} TableRowComponent\n * @typedef {ComponentType<UnorderedListProps>} UnorderedListComponent\n *\n * @typedef SpecialComponents\n * @property {CodeComponent|ReactMarkdownNames} code\n * @property {HeadingComponent|ReactMarkdownNames} h1\n * @property {HeadingComponent|ReactMarkdownNames} h2\n * @property {HeadingComponent|ReactMarkdownNames} h3\n * @property {HeadingComponent|ReactMarkdownNames} h4\n * @property {HeadingComponent|ReactMarkdownNames} h5\n * @property {HeadingComponent|ReactMarkdownNames} h6\n * @property {LiComponent|ReactMarkdownNames} li\n * @property {OrderedListComponent|ReactMarkdownNames} ol\n * @property {TableDataCellComponent|ReactMarkdownNames} td\n * @property {TableHeaderCellComponent|ReactMarkdownNames} th\n * @property {TableRowComponent|ReactMarkdownNames} tr\n * @property {UnorderedListComponent|ReactMarkdownNames} ul\n *\n * @typedef {Partial<Omit<import('./complex-types.js').NormalComponents, keyof SpecialComponents> & SpecialComponents>} Components\n *\n * @typedef Options\n * @property {boolean} [sourcePos=false]\n * @property {boolean} [rawSourcePos=false]\n * @property {boolean} [skipHtml=false]\n * @property {boolean} [includeElementIndex=false]\n * @property {null|false|TransformLink} [transformLinkUri]\n * @property {TransformImage} [transformImageUri]\n * @property {TransformLinkTargetType|TransformLinkTarget} [linkTarget]\n * @property {Components} [components]\n */\n\nimport React from 'react';\nimport ReactIs from 'react-is';\nimport { whitespace } from 'hast-util-whitespace';\nimport { svg, find, hastToReact } from 'property-information';\nimport { stringify as spaces } from 'space-separated-tokens';\nimport { stringify as commas } from 'comma-separated-tokens';\nimport style from 'style-to-object';\nimport { uriTransformer } from './uri-transformer.js';\nconst own = {}.hasOwnProperty;\n\n// The table-related elements that must not contain whitespace text according\n// to React.\nconst tableElements = new Set(['table', 'thead', 'tbody', 'tfoot', 'tr']);\n\n/**\n * @param {Context} context\n * @param {Element|Root} node\n */\nexport function childrenToReact(context, node) {\n  /** @type {Array<ReactNode>} */\n  const children = [];\n  let childIndex = -1;\n  /** @type {Comment|Doctype|Element|Raw|Text} */\n  let child;\n  while (++childIndex < node.children.length) {\n    child = node.children[childIndex];\n    if (child.type === 'element') {\n      children.push(toReact(context, child, childIndex, node));\n    } else if (child.type === 'text') {\n      // Currently, a warning is triggered by react for *any* white space in\n      // tables.\n      // So we drop it.\n      // See: <https://github.com/facebook/react/pull/7081>.\n      // See: <https://github.com/facebook/react/pull/7515>.\n      // See: <https://github.com/remarkjs/remark-react/issues/64>.\n      // See: <https://github.com/remarkjs/react-markdown/issues/576>.\n      if (node.type !== 'element' || !tableElements.has(node.tagName) || !whitespace(child)) {\n        children.push(child.value);\n      }\n    } else if (child.type === 'raw' && !context.options.skipHtml) {\n      // Default behavior is to show (encoded) HTML.\n      children.push(child.value);\n    }\n  }\n  return children;\n}\n\n/**\n * @param {Context} context\n * @param {Element} node\n * @param {number} index\n * @param {Element|Root} parent\n */\nfunction toReact(context, node, index, parent) {\n  const options = context.options;\n  const transform = options.transformLinkUri === undefined ? uriTransformer : options.transformLinkUri;\n  const parentSchema = context.schema;\n  /** @type {ReactMarkdownNames} */\n  // @ts-expect-error assume a known HTML/SVG element.\n  const name = node.tagName;\n  /** @type {Record<string, unknown>} */\n  const properties = {};\n  let schema = parentSchema;\n  /** @type {string} */\n  let property;\n  if (parentSchema.space === 'html' && name === 'svg') {\n    schema = svg;\n    context.schema = schema;\n  }\n  if (node.properties) {\n    for (property in node.properties) {\n      if (own.call(node.properties, property)) {\n        addProperty(properties, property, node.properties[property], context);\n      }\n    }\n  }\n  if (name === 'ol' || name === 'ul') {\n    context.listDepth++;\n  }\n  const children = childrenToReact(context, node);\n  if (name === 'ol' || name === 'ul') {\n    context.listDepth--;\n  }\n\n  // Restore parent schema.\n  context.schema = parentSchema;\n\n  // Nodes created by plugins do not have positional info, in which case we use\n  // an object that matches the position interface.\n  const position = node.position || {\n    start: {\n      line: null,\n      column: null,\n      offset: null\n    },\n    end: {\n      line: null,\n      column: null,\n      offset: null\n    }\n  };\n  const component = options.components && own.call(options.components, name) ? options.components[name] : name;\n  const basic = typeof component === 'string' || component === React.Fragment;\n  if (!ReactIs.isValidElementType(component)) {\n    throw new TypeError(`Component for name \\`${name}\\` not defined or is not renderable`);\n  }\n  properties.key = index;\n  if (name === 'a' && options.linkTarget) {\n    properties.target = typeof options.linkTarget === 'function' ? options.linkTarget(String(properties.href || ''), node.children, typeof properties.title === 'string' ? properties.title : null) : options.linkTarget;\n  }\n  if (name === 'a' && transform) {\n    properties.href = transform(String(properties.href || ''), node.children, typeof properties.title === 'string' ? properties.title : null);\n  }\n  if (!basic && name === 'code' && parent.type === 'element' && parent.tagName !== 'pre') {\n    properties.inline = true;\n  }\n  if (!basic && (name === 'h1' || name === 'h2' || name === 'h3' || name === 'h4' || name === 'h5' || name === 'h6')) {\n    properties.level = Number.parseInt(name.charAt(1), 10);\n  }\n  if (name === 'img' && options.transformImageUri) {\n    properties.src = options.transformImageUri(String(properties.src || ''), String(properties.alt || ''), typeof properties.title === 'string' ? properties.title : null);\n  }\n  if (!basic && name === 'li' && parent.type === 'element') {\n    const input = getInputElement(node);\n    properties.checked = input && input.properties ? Boolean(input.properties.checked) : null;\n    properties.index = getElementsBeforeCount(parent, node);\n    properties.ordered = parent.tagName === 'ol';\n  }\n  if (!basic && (name === 'ol' || name === 'ul')) {\n    properties.ordered = name === 'ol';\n    properties.depth = context.listDepth;\n  }\n  if (name === 'td' || name === 'th') {\n    if (properties.align) {\n      if (!properties.style) properties.style = {};\n      // @ts-expect-error assume `style` is an object\n      properties.style.textAlign = properties.align;\n      delete properties.align;\n    }\n    if (!basic) {\n      properties.isHeader = name === 'th';\n    }\n  }\n  if (!basic && name === 'tr' && parent.type === 'element') {\n    properties.isHeader = Boolean(parent.tagName === 'thead');\n  }\n\n  // If `sourcePos` is given, pass source information (line/column info from markdown source).\n  if (options.sourcePos) {\n    properties['data-sourcepos'] = flattenPosition(position);\n  }\n  if (!basic && options.rawSourcePos) {\n    properties.sourcePosition = node.position;\n  }\n\n  // If `includeElementIndex` is given, pass node index info to components.\n  if (!basic && options.includeElementIndex) {\n    properties.index = getElementsBeforeCount(parent, node);\n    properties.siblingCount = getElementsBeforeCount(parent);\n  }\n  if (!basic) {\n    properties.node = node;\n  }\n\n  // Ensure no React warnings are emitted for void elements w/ children.\n  return children.length > 0 ? React.createElement(component, properties, children) : React.createElement(component, properties);\n}\n\n/**\n * @param {Element|Root} node\n * @returns {Element?}\n */\nfunction getInputElement(node) {\n  let index = -1;\n  while (++index < node.children.length) {\n    const child = node.children[index];\n    if (child.type === 'element' && child.tagName === 'input') {\n      return child;\n    }\n  }\n  return null;\n}\n\n/**\n * @param {Element|Root} parent\n * @param {Element} [node]\n * @returns {number}\n */\nfunction getElementsBeforeCount(parent, node) {\n  let index = -1;\n  let count = 0;\n  while (++index < parent.children.length) {\n    if (parent.children[index] === node) break;\n    if (parent.children[index].type === 'element') count++;\n  }\n  return count;\n}\n\n/**\n * @param {Record<string, unknown>} props\n * @param {string} prop\n * @param {unknown} value\n * @param {Context} ctx\n */\nfunction addProperty(props, prop, value, ctx) {\n  const info = find(ctx.schema, prop);\n  let result = value;\n\n  // Ignore nullish and `NaN` values.\n  // eslint-disable-next-line no-self-compare\n  if (result === null || result === undefined || result !== result) {\n    return;\n  }\n\n  // Accept `array`.\n  // Most props are space-separated.\n  if (Array.isArray(result)) {\n    result = info.commaSeparated ? commas(result) : spaces(result);\n  }\n  if (info.property === 'style' && typeof result === 'string') {\n    result = parseStyle(result);\n  }\n  if (info.space && info.property) {\n    props[own.call(hastToReact, info.property) ? hastToReact[info.property] : info.property] = result;\n  } else if (info.attribute) {\n    props[info.attribute] = result;\n  }\n}\n\n/**\n * @param {string} value\n * @returns {Record<string, string>}\n */\nfunction parseStyle(value) {\n  /** @type {Record<string, string>} */\n  const result = {};\n  try {\n    style(value, iterator);\n  } catch {\n    // Silent.\n  }\n  return result;\n\n  /**\n   * @param {string} name\n   * @param {string} v\n   */\n  function iterator(name, v) {\n    const k = name.slice(0, 4) === '-ms-' ? `ms-${name.slice(4)}` : name;\n    result[k.replace(/-([a-z])/g, styleReplacer)] = v;\n  }\n}\n\n/**\n * @param {unknown} _\n * @param {string} $1\n */\nfunction styleReplacer(_, $1) {\n  return $1.toUpperCase();\n}\n\n/**\n * @param {Position|{start: {line: null, column: null, offset: null}, end: {line: null, column: null, offset: null}}} pos\n * @returns {string}\n */\nfunction flattenPosition(pos) {\n  return [pos.start.line, ':', pos.start.column, '-', pos.end.line, ':', pos.end.column].map(String).join('');\n}","/**\n * @typedef Options\n *   Configuration for `stringify`.\n * @property {boolean} [padLeft=true]\n *   Whether to pad a space before a token.\n * @property {boolean} [padRight=false]\n *   Whether to pad a space after a token.\n */\n\n/**\n * @typedef {Options} StringifyOptions\n *   Please use `StringifyOptions` instead.\n */\n\n/**\n * Parse comma-separated tokens to an array.\n *\n * @param {string} value\n *   Comma-separated tokens.\n * @returns {Array<string>}\n *   List of tokens.\n */\nexport function parse(value) {\n  /** @type {Array<string>} */\n  const tokens = [];\n  const input = String(value || '');\n  let index = input.indexOf(',');\n  let start = 0;\n  /** @type {boolean} */\n  let end = false;\n  while (!end) {\n    if (index === -1) {\n      index = input.length;\n      end = true;\n    }\n    const token = input.slice(start, index).trim();\n    if (token || !end) {\n      tokens.push(token);\n    }\n    start = index + 1;\n    index = input.indexOf(',', start);\n  }\n  return tokens;\n}\n\n/**\n * Serialize an array of strings or numbers to comma-separated tokens.\n *\n * @param {Array<string|number>} values\n *   List of tokens.\n * @param {Options} [options]\n *   Configuration for `stringify` (optional).\n * @returns {string}\n *   Comma-separated tokens.\n */\nexport function stringify(values, options) {\n  const settings = options || {};\n\n  // Ensure the last empty entry is seen.\n  const input = values[values.length - 1] === '' ? [...values, ''] : values;\n  return input.join((settings.padRight ? ' ' : '') + ',' + (settings.padLeft === false ? '' : ' ')).trim();\n}","/**\n * Parse space-separated tokens to an array of strings.\n *\n * @param {string} value\n *   Space-separated tokens.\n * @returns {Array<string>}\n *   List of tokens.\n */\nexport function parse(value) {\n  const input = String(value || '').trim();\n  return input ? input.split(/[ \\t\\n\\r\\f]+/g) : [];\n}\n\n/**\n * Serialize an array of strings as space separated-tokens.\n *\n * @param {Array<string|number>} values\n *   List of tokens.\n * @returns {string}\n *   Space-separated tokens.\n */\nexport function stringify(values) {\n  return values.join(' ').trim();\n}","/**\n * @typedef {import('react').ReactNode} ReactNode\n * @typedef {import('react').ReactElement<{}>} ReactElement\n * @typedef {import('unified').PluggableList} PluggableList\n * @typedef {import('hast').Root} Root\n * @typedef {import('./rehype-filter.js').Options} FilterOptions\n * @typedef {import('./ast-to-react.js').Options} TransformOptions\n *\n * @typedef CoreOptions\n * @property {string} children\n *\n * @typedef PluginOptions\n * @property {PluggableList} [remarkPlugins=[]]\n * @property {PluggableList} [rehypePlugins=[]]\n * @property {import('remark-rehype').Options | undefined} [remarkRehypeOptions={}]\n *\n * @typedef LayoutOptions\n * @property {string} [className]\n *\n * @typedef {CoreOptions & PluginOptions & LayoutOptions & FilterOptions & TransformOptions} ReactMarkdownOptions\n *\n * @typedef Deprecation\n * @property {string} id\n * @property {string} [to]\n */\n\nimport React from 'react';\nimport { VFile } from 'vfile';\nimport { unified } from 'unified';\nimport remarkParse from 'remark-parse';\nimport remarkRehype from 'remark-rehype';\nimport PropTypes from 'prop-types';\nimport { html } from 'property-information';\nimport rehypeFilter from './rehype-filter.js';\nimport { childrenToReact } from './ast-to-react.js';\nconst own = {}.hasOwnProperty;\nconst changelog = 'https://github.com/remarkjs/react-markdown/blob/main/changelog.md';\n\n/** @type {Record<string, Deprecation>} */\nconst deprecated = {\n  plugins: {\n    to: 'remarkPlugins',\n    id: 'change-plugins-to-remarkplugins'\n  },\n  renderers: {\n    to: 'components',\n    id: 'change-renderers-to-components'\n  },\n  astPlugins: {\n    id: 'remove-buggy-html-in-markdown-parser'\n  },\n  allowDangerousHtml: {\n    id: 'remove-buggy-html-in-markdown-parser'\n  },\n  escapeHtml: {\n    id: 'remove-buggy-html-in-markdown-parser'\n  },\n  source: {\n    to: 'children',\n    id: 'change-source-to-children'\n  },\n  allowNode: {\n    to: 'allowElement',\n    id: 'replace-allownode-allowedtypes-and-disallowedtypes'\n  },\n  allowedTypes: {\n    to: 'allowedElements',\n    id: 'replace-allownode-allowedtypes-and-disallowedtypes'\n  },\n  disallowedTypes: {\n    to: 'disallowedElements',\n    id: 'replace-allownode-allowedtypes-and-disallowedtypes'\n  },\n  includeNodeIndex: {\n    to: 'includeElementIndex',\n    id: 'change-includenodeindex-to-includeelementindex'\n  }\n};\n\n/**\n * React component to render markdown.\n *\n * @param {ReactMarkdownOptions} options\n * @returns {ReactElement}\n */\nexport function ReactMarkdown(options) {\n  for (const key in deprecated) {\n    if (own.call(deprecated, key) && own.call(options, key)) {\n      const deprecation = deprecated[key];\n      console.warn(`[react-markdown] Warning: please ${deprecation.to ? `use \\`${deprecation.to}\\` instead of` : 'remove'} \\`${key}\\` (see <${changelog}#${deprecation.id}> for more info)`);\n      delete deprecated[key];\n    }\n  }\n  const processor = unified().use(remarkParse).use(options.remarkPlugins || []).use(remarkRehype, {\n    ...options.remarkRehypeOptions,\n    allowDangerousHtml: true\n  }).use(options.rehypePlugins || []).use(rehypeFilter, options);\n  const file = new VFile();\n  if (typeof options.children === 'string') {\n    file.value = options.children;\n  } else if (options.children !== undefined && options.children !== null) {\n    console.warn(`[react-markdown] Warning: please pass a string as \\`children\\` (not: \\`${options.children}\\`)`);\n  }\n  const hastNode = processor.runSync(processor.parse(file), file);\n  if (hastNode.type !== 'root') {\n    throw new TypeError('Expected a `root` node');\n  }\n\n  /** @type {ReactElement} */\n  let result = React.createElement(React.Fragment, {}, childrenToReact({\n    options,\n    schema: html,\n    listDepth: 0\n  }, hastNode));\n  if (options.className) {\n    result = React.createElement('div', {\n      className: options.className\n    }, result);\n  }\n  return result;\n}\nReactMarkdown.propTypes = {\n  // Core options:\n  children: PropTypes.string,\n  // Layout options:\n  className: PropTypes.string,\n  // Filter options:\n  allowElement: PropTypes.func,\n  allowedElements: PropTypes.arrayOf(PropTypes.string),\n  disallowedElements: PropTypes.arrayOf(PropTypes.string),\n  unwrapDisallowed: PropTypes.bool,\n  // Plugin options:\n  remarkPlugins: PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.object, PropTypes.func, PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.bool, PropTypes.string, PropTypes.object, PropTypes.func, PropTypes.arrayOf(\n  // prettier-ignore\n  // type-coverage:ignore-next-line\n  PropTypes.any)]))])),\n  rehypePlugins: PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.object, PropTypes.func, PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.bool, PropTypes.string, PropTypes.object, PropTypes.func, PropTypes.arrayOf(\n  // prettier-ignore\n  // type-coverage:ignore-next-line\n  PropTypes.any)]))])),\n  // Transform options:\n  sourcePos: PropTypes.bool,\n  rawSourcePos: PropTypes.bool,\n  skipHtml: PropTypes.bool,\n  includeElementIndex: PropTypes.bool,\n  transformLinkUri: PropTypes.oneOfType([PropTypes.func, PropTypes.bool]),\n  linkTarget: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),\n  transformImageUri: PropTypes.func,\n  components: PropTypes.object\n};","import clsx from 'clsx'\nimport React from 'react'\nimport ReactMarkdown from 'react-markdown'\n\nexport default function Text({ children, className, ...props }) {\n  return (\n    <ReactMarkdown\n      components={{\n        a: ({ node, ...props }) => (\n          <a href={props.href} target=\"_blank\" rel=\"noreferrer\">\n            {props.children}\n          </a>\n        ),\n      }}\n      className={clsx('prose dark:prose-invert ', className)}\n      {...props}\n    >\n      {children}\n    </ReactMarkdown>\n  )\n}\n","import clsx from 'clsx'\nimport React from 'react'\nimport Buttons from '../components/UI/Buttons'\nimport Container from '../components/UI/Container'\nimport Text from '../components/UI/Text'\n\nexport default function Hero({ data }) {\n  const isCentered = data?.variant === 'centered'\n  const isFull = data?.variant === 'full'\n  return (\n    <section\n      className={clsx(\n        'py-12 dark:bg-black dark:text-white lg:py-24',\n        {\n          'flex min-h-screen items-center': isFull,\n        },\n        {\n          'flex justify-center py-20 text-center lg:py-44': isCentered,\n        },\n      )}\n    >\n      <Container>\n        {data?.title && (\n          <h1\n            className={clsx('mb-4 text-4xl font-bold md:text-6xl', {\n              'mx-auto': isCentered,\n            })}\n          >\n            {data?.title}\n          </h1>\n        )}\n        <Text className={clsx('text-lg', { 'mx-auto': isCentered })}>\n          {data?.content}\n        </Text>\n        {data?.buttons && (\n          <Buttons\n            buttons={data?.buttons}\n            className={clsx('mt-6', { 'justify-center': isCentered })}\n          />\n        )}\n      </Container>\n    </section>\n  )\n}\n","import React from 'react';\nimport Link from '../../resolvers/Link';\n\nexport default function ArticleCard({ data }) {\n  const { node: post } = data;\n  return (\n    <article>\n      <h2 className='mb-4 text-2xl font-bold'>\n        <Link to={post.fields.slug}>{post.frontmatter.title}</Link>\n      </h2>\n      <div className='prose mb-3 dark:prose-invert'>{post.excerpt}</div>\n      <Link to={post.fields.slug}>\n        Read more <div className='sr-only'>about {post.frontmatter.title}</div>\n      </Link>\n    </article>\n  );\n}\n","import { useStaticQuery, graphql } from 'gatsby';\nexport const useRecentArticles = () => {\n  const {\n    allMarkdownRemark: { edges: posts },\n  } = useStaticQuery(\n    graphql`\n      query RecentArticlesQuery {\n        allMarkdownRemark(\n          sort: { frontmatter: { date: DESC } }\n          filter: { frontmatter: { type: { eq: \"post\" } } }\n          limit: 3\n        ) {\n          edges {\n            node {\n              id\n              excerpt(pruneLength: 120)\n              fields {\n                slug\n              }\n              frontmatter {\n                title\n                date(formatString: \"MMMM DD, YYYY\")\n                author\n              }\n            }\n          }\n        }\n      }\n    `,\n  );\n  return posts;\n};\n","import React from 'react';\nimport ArticleCard from './ArticleCard';\nimport { useRecentArticles } from '../../hooks/useRecentArticles';\n\nexport default function Recent() {\n  const posts = useRecentArticles();\n\n  return (\n    <div className='grid grid-cols-2 md:grid-cols-3 xl:grid-cols-4 gap-6'>\n      {posts && posts.map((item, i) => <ArticleCard key={i} data={item} />)}\n    </div>\n  );\n}\n","import React from 'react';\nimport Recent from '../components/Article/Recent';\nimport Container from '../components/UI/Container';\n\nexport default function RecentArticles({ data, preview }) {\n  return (\n    <section className='py-10 dark:bg-black dark:text-white lg:py-16'>\n      <Container>\n        <h2 className='mb-12 text-lg font-semibold uppercase tracking-wider md:text-xl'>\n          {data?.title}\n        </h2>\n        {preview ? 'Articles will show up here' : <Recent />}\n      </Container>\n    </section>\n  );\n}\n","import React from 'react';\nimport { GatsbyImage, getImage } from 'gatsby-plugin-image';\n\nexport default function Image({ src, alt = '', ...props }) {\n  const isRemote = typeof src === 'string';\n  const image = !isRemote ? getImage(src) : [];\n  return (\n    <>\n      {isRemote ? (\n        <img src={src} alt={alt} {...props}></img>\n      ) : (\n        <GatsbyImage image={image} alt={alt} {...props} />\n      )}\n    </>\n  );\n}\n","import clsx from 'clsx'\nimport React from 'react'\n\nexport default function Title({\n  children,\n  variant = 'base',\n  Tag = 'h2',\n  className,\n  ...props\n}) {\n  let style = 'dark:text-white font-semibold'\n  switch (variant) {\n    case 'hero':\n      style = `${style} text-5xl lg:text-7xl max-w-5xl mb-4 md:mb-8 hero-title`\n      break\n    case 'xl':\n      style = `${style} text-4xl md:text-5xl`\n      break\n    case 'lg':\n      style = `${style} text-3xl md:text-4xl`\n      break\n    case 'base':\n    default:\n      style = `${style} text-2xl md:text-3xl`\n      break\n    case 'sm':\n      style = `${style} text-2xl`\n      break\n    case 'xs':\n      style = `${style} text-xl`\n      break\n  }\n  return (\n    <>\n      {children && (\n        <Tag\n          className={clsx(style, className)}\n          dangerouslySetInnerHTML={{ __html: children }}\n          {...props}\n        />\n      )}\n    </>\n  )\n}\n","import React from 'react'\nimport Image from '../resolvers/Image'\nimport Container from '../components/UI/Container'\nimport Text from '../components/UI/Text'\nimport Title from '../components/UI/Title'\nimport Buttons from '../components/UI/Buttons'\nimport clsx from 'clsx'\n\nexport default function ContentImage({ data }) {\n  const isReversed = data?.variant === 'reversed'\n  return (\n    <section className=\"py-20 lg:py-32\">\n      <Container className=\"max-w-7xl\">\n        <div\n          className={clsx(\n            'flex flex-col items-center justify-center gap-4 md:gap-6 lg:gap-10',\n            { 'md:flex-row-reverse': isReversed },\n            { 'md:flex-row': !isReversed },\n          )}\n        >\n          <div className=\"lg:w-1/2\">\n            {data?.photo?.image && (\n              <Image\n                src={data?.photo?.image}\n                alt={data?.photo?.alt}\n                className=\"w-full\"\n              />\n            )}\n          </div>\n          <div className=\"lg:w-1/2\">\n            <div className=\"mx-auto max-w-2xl\">\n              {data?.title && (\n                <Title Tag=\"h2\" variant=\"lg\">\n                  {data?.title}\n                </Title>\n              )}\n              {data?.content && (\n                <Text className=\"mt-4 lg:text-lg lg:leading-relaxed\">\n                  {data?.content}\n                </Text>\n              )}\n              {data?.buttons && (\n                <Buttons buttons={data?.buttons} className=\"mt-4\" />\n              )}\n            </div>\n          </div>\n        </div>\n      </Container>\n    </section>\n  )\n}\n","import React from 'react';\n\nimport Container from '../components/UI/Container';\nimport Title from '../components/UI/Title';\nimport Text from '../components/UI/Text';\n\nexport default function Perks({ data }) {\n  return (\n    <section className='bg-zinc-100 py-10 dark:bg-[#0d0d10] lg:py-20 '>\n      <Container>\n        {data?.title && (\n          <Title\n            Tag='h2'\n            variant='xl'\n            className={`mx-auto mb-4 max-w-6xl lg:mb-10`}>\n            {data?.title}\n          </Title>\n        )}\n        {data?.content && (\n          <Text className={`mx-auto mt-8 max-w-3xl text-center lg:text-lg`}>\n            {data?.content}\n          </Text>\n        )}\n        <div\n          className={`mx-auto grid max-w-6xl grid-cols-2 gap-x-4 gap-y-6 md:gap-10 lg:grid-cols-3 `}>\n          {data?.columns &&\n            data?.columns.map((col, i) => (\n              <div className='flex' key={i}>\n                <div\n                  className={`mx-auto w-72 text-center sm:text-left lg:w-80  ${\n                    i % 3 === 0\n                      ? 'lg:ml-0 lg:mr-auto'\n                      : i % 3 === 2\n                      ? 'lg:mr-0 lg:ml-auto'\n                      : 'lg:mx-auto'\n                  } ${i % 2 === 0 ? 'md:ml-0' : 'md:mr-0'}`}>\n                  {col?.title && (\n                    <Title Tag='h3' variant='xs' className='mt-2'>\n                      {col.title}\n                    </Title>\n                  )}\n                  {col?.content && (\n                    <Text className={`mt-2 max-w-2xl`}>{col?.content}</Text>\n                  )}\n                </div>\n              </div>\n            ))}\n        </div>\n      </Container>\n    </section>\n  );\n}\n","import React from 'react';\nimport Container from '../components/UI/Container';\nimport Text from '../components/UI/Text';\n\nexport default function Content({ data }) {\n  return (\n    <section className='py-10 lg:py-16'>\n      <Container>\n        {data?.content && (\n          <Text className='mx-auto w-full max-w-6xl'>{data?.content}</Text>\n        )}\n      </Container>\n    </section>\n  );\n}\n","import React from 'react';\nimport { graphql } from 'gatsby';\n\nimport Hero from '@/blocks/Hero';\nimport RecentArticles from '../blocks/RecentArticles';\nimport ContentImage from '../blocks/ContentImage';\nimport Perks from '../blocks/Perks';\nimport Content from '../blocks/Content';\n\nexport default function PageBuilder({ blocks, preview = false }) {\n  return (\n    <>\n      {blocks &&\n        blocks.map((block, i) => {\n          switch (block.type) {\n            case 'hero':\n              return <Hero key={i} data={block} />;\n            case 'recentArticles':\n              return <RecentArticles key={i} data={block} preview={preview} />;\n            case 'content_image':\n              return <ContentImage key={i} data={block} preview={preview} />;\n            case 'perks':\n              return <Perks key={i} data={block} preview={preview} />;\n            case 'content':\n              return <Content key={i} data={block} preview={preview} />;\n            default:\n              return (\n                <div className='container mx-auto'>\n                  <div className='text-center'>\n                    Missing Section {block.type}\n                  </div>\n                </div>\n              );\n          }\n        })}\n    </>\n  );\n}\n\nexport const query = graphql`\n  fragment Blocks on MarkdownRemarkFrontmatter {\n    blocks {\n      type\n      title\n      content\n      columns {\n        title\n        content\n      }\n      photo {\n        image {\n          childImageSharp {\n            gatsbyImageData(\n              width: 800\n              quality: 72\n              placeholder: DOMINANT_COLOR\n              formats: [AUTO, WEBP, AVIF]\n            )\n          }\n        }\n        alt\n      }\n      variant\n      buttons {\n        button {\n          content\n          url\n          variant\n        }\n      }\n    }\n  }\n`;\n","import React from 'react'\nimport { graphql } from 'gatsby'\nimport PropTypes from 'prop-types'\n\nimport Layout from '@/components/Layout'\nimport PageBuilder from '@/components/PageBuilder'\nimport DefaultHead from '../components/Head/DefaultHead'\n\nconst Page = ({ data }) => {\n  return (\n    <Layout nav={true}>\n      <PageBuilder blocks={data.page.frontmatter.blocks} />\n    </Layout>\n  )\n}\n\nPage.propTypes = {\n  data: PropTypes.shape({\n    markdownRemark: PropTypes.shape({\n      frontmatter: PropTypes.object,\n    }),\n  }),\n}\n\nexport default Page\n\nexport const Head = ({ data }) => (\n  <DefaultHead data={data.page.frontmatter.seo}>\n    <meta id=\"type\" property=\"og:type\" content=\"website\" />\n  </DefaultHead>\n)\n\nexport const basicPageQuery = graphql`\n  query BasicPage($id: String!) {\n    page: markdownRemark(id: { eq: $id }) {\n      id\n      fields {\n        slug\n      }\n      html\n      frontmatter {\n        id\n        title\n        ...Blocks\n        ...Seo\n      }\n    }\n  }\n`\n"],"names":["hasOwn","Object","prototype","hasOwnProperty","toStr","toString","defineProperty","gOPD","getOwnPropertyDescriptor","isArray","arr","Array","call","isPlainObject","obj","key","hasOwnConstructor","hasIsPrototypeOf","constructor","setProperty","target","options","name","enumerable","configurable","value","newValue","writable","getProperty","module","exports","extend","src","copy","copyIsArray","clone","arguments","i","length","deep","COMMENT_REGEX","NEWLINE_REGEX","WHITESPACE_REGEX","PROPERTY_REGEX","COLON_REGEX","VALUE_REGEX","SEMICOLON_REGEX","TRIM_REGEX","EMPTY_STRING","trim","str","replace","style","TypeError","lineno","column","updatePosition","lines","match","lastIndexOf","position","start","line","node","Position","whitespace","this","end","source","content","errorsList","error","msg","err","Error","reason","filename","silent","push","re","m","exec","slice","comments","rules","c","comment","pos","charAt","type","declaration","prop","val","ret","property","decl","decls","declarations","isBuffer","u","b","Symbol","for","d","e","f","g","h","k","l","n","p","q","t","v","a","r","$$typeof","ContextConsumer","ContextProvider","Element","ForwardRef","Fragment","Lazy","Memo","Portal","Profiler","StrictMode","Suspense","SuspenseList","isAsyncMode","isConcurrentMode","isContextConsumer","isContextProvider","isElement","isForwardRef","isFragment","isLazy","isMemo","isPortal","isProfiler","isStrictMode","isSuspense","isSuspenseList","isValidElementType","getModuleId","typeOf","parse","StyleToObject","iterator","output","hasIterator","len","Button","_ref","className","button","children","props","buttonStyle","variant","React","url","Link","assign","to","clsx","Buttons","buttons","map","item","_item$button","stringifyPosition","point","index","VFileMessage","place","origin","parts","super","undefined","indexOf","message","stack","fatal","ruleId","file","actual","expected","note","path","basename","ext","assertPath","seenNonSlash","charCodeAt","firstNonSlashEnd","extIndex","dirname","unmatchedSlash","extname","startPart","startDot","preDotState","code","join","joined","_len","segments","_key","absolute","allowAboveRoot","lastSlashIndex","result","lastSegmentLength","lastSlash","dots","normalizeString","normalize","sep","JSON","stringify","proc","cwd","isUrl","fileUrlOrPath","href","urlToPath","URL","protocol","hostname","pathname","third","decodeURIComponent","getPathFromURLPosix","order","VFile","buffer","data","messages","history","stored","includes","assertNonEmpty","assertPart","stem","encoding","info","fail","part","bail","getPrototypeOf","toStringTag","trough","fns","pipeline","run","values","middlewareIndex","callback","pop","next","fn","_len2","_key2","middleware","called","wrapped","_len3","parameters","_key3","fnExpectsCallback","done","apply","Promise","then","_len4","_key4","wrap","use","middelware","unified","base","transformers","attachers","frozen","namespace","freezeIndex","processor","assertUnfrozen","own","Parser","Compiler","freeze","attacher","transformer","Number","POSITIVE_INFINITY","settings","addPlugin","addList","addPreset","add","plugin","plugins","entry","doc","vfile","assertParser","newable","String","assertCompiler","assertNode","compile","executor","resolve","reject","tree","runSync","complete","assertDone","process","processSync","destination","keys","asyncName","Boolean","looksLikeAVFile","emptyOptions","one","includeImageAlt","includeHtml","alt","splice","list","remove","items","chunkStart","from","unshift","syntaxExtension","all","extension","hook","left","right","constructs","existing","before","asciiAlpha","regexCheck","asciiAlphanumeric","asciiAtext","asciiControl","asciiDigit","asciiHexDigit","asciiPunctuation","markdownLineEnding","markdownLineEndingOrSpace","markdownSpace","unicodePunctuation","unicodeWhitespace","regex","test","fromCharCode","factorySpace","effects","ok","max","limit","size","enter","prefix","consume","exit","tokenize","contentStart","attempt","parser","contentInitial","lineStart","previous","token","contentType","self","childFlow","childToken","lineStartOffset","continued","containerState","continuation","documentContinue","checkNewContainers","_closeFlow","closeFlow","indexBeforeExits","events","indexBeforeFlow","exitContainers","documentContinued","currentConstruct","concrete","flowStart","interrupt","_gfmTableDynamicInterruptHack","check","containerConstruct","thereIsANewContainer","thereIsNoNewContainer","lazy","now","offset","containerContinue","flow","_tokenizer","flowContinue","writeToChild","eof","stream","sliceStream","defineSkip","write","seen","nok","document","disable","null","blankLine","after","partial","subtokenize","jumps","event","lineIndex","otherIndex","otherEvent","subevents","more","_isInFirstContentOfListItem","subcontent","_container","eventIndex","context","startPosition","startPositions","tokenizer","childEvents","gaps","current","adjust","breaks","_gfmTasklistFirstContentOfListItem","chunkInside","contentEnd","continuationConstruct","contentContinue","prefixed","tail","sliceSerialize","initial","flowInitial","afterConstruct","resolver","resolveAll","createResolver","string","initializeFactory","field","text","notText","atBreak","resolveAllLineSuffixes","extraResolver","chunks","tabs","bufferIndex","chunk","_index","_bufferIndex","createTokenizer","initialize","columnStart","resolveAllConstructs","consumed","accountForPotentialSkip","fields","constructFactory","construct","addResult","onsuccessfulcheck","expandTabs","atTab","serializeChunks","main","expectedCode","state","startIndex","startBufferIndex","endIndex","endBufferIndex","view","head","shift","sliceChunks","chunkIndex","go","_","restore","onreturn","returnState","bogusState","listOfConstructs","constructIndex","handleListOfConstructs","def","handleMapOfConstructs","handleConstruct","startPoint","startPrevious","startCurrentConstruct","startEventsIndex","startStack","store","create","resolveTo","thematicBreak","marker","sequence","initialSize","kind","atMarker","inside","onBlank","listItemPrefixWhitespaceConstruct","endOfPrefix","otherPrefix","initialBlankLine","notBlank","furtherBlankLines","notInCurrentItem","indentConstruct","blockQuote","open","contBefore","factoryDestination","literalType","literalMarkerType","rawType","stringType","balance","enclosedBefore","raw","enclosed","enclosedEscape","rawEscape","factoryLabel","markerType","labelInside","labelEscape","factoryTitle","begin","escape","factoryWhitespace","normalizeIdentifier","toLowerCase","toUpperCase","definition","identifier","labelAfter","markerAfter","destinationBefore","destinationAfter","titleBefore","afterWhitespace","defined","beforeMarker","titleAfter","titleAfterOptionalWhitespace","codeIndented","afterPrefix","furtherStart","headingAtx","sequenceOpen","sequenceFurther","setextUnderline","paragraph","heading","htmlBlockNames","htmlRawNames","htmlFlow","closingTag","markerB","declarationOpen","tagCloseStart","continuationDeclarationInside","tagName","commentOpenInside","cdataOpenInside","slash","basicSelfClosing","completeClosingTagAfter","completeAttributeNameBefore","completeEnd","completeAttributeName","completeAttributeNameAfter","completeAttributeValueBefore","completeAttributeValueQuoted","completeAttributeValueUnquoted","completeAttributeValueQuotedAfter","completeAfter","continuationCommentInside","continuationRawTagOpen","continuationClose","continuationCdataInside","continuationStart","blankLineBefore","continuationAfter","nonLazyContinuationStart","continuationStartNonLazy","continuationBefore","continuationRawEndTag","nonLazyContinuation","codeFenced","closeStart","startBefore","beforeSequenceClose","sequenceClose","sizeOpen","sequenceCloseAfter","initialPrefix","beforeSequenceOpen","infoBefore","atNonLazyBreak","metaBefore","meta","contentBefore","beforeContentChunk","contentChunk","createElement","decodeNamedCharacterReference","characterReference","innerHTML","char","textContent","numeric","characterEscape","lineEnding","labelEnd","labelStart","_balanced","_inactive","labelEndNok","resourceConstruct","labelEndOk","referenceFullConstruct","referenceNotFull","referenceCollapsedConstruct","close","media","group","label","insideSpan","resourceBefore","resourceOpen","resourceEnd","resourceDestinationAfter","resourceDestinationMissing","resourceBetween","resourceTitleAfter","referenceFullAfter","referenceFullMissing","referenceCollapsedOpen","labelStartImage","classifyCharacter","attention","attentionMarkers","_open","_close","openingSequence","closingSequence","nextEvents","movePoint","autolink","schemeOrEmailAtext","emailAtext","schemeInsideOrEmailAtext","urlInside","emailAtSignOrDot","emailLabel","emailValue","htmlText","instruction","tagOpen","commentEnd","commentClose","lineEndingBefore","cdata","cdataClose","cdataEnd","instructionClose","tagClose","tagCloseBetween","tagOpenBetween","tagOpenAttributeName","tagOpenAttributeNameAfter","tagOpenAttributeValueBefore","tagOpenAttributeValueQuoted","tagOpenAttributeValueUnquoted","tagOpenAttributeValueQuotedAfter","lineEndingAfter","lineEndingAfterPrefix","labelStartLink","hardBreakEscape","codeText","between","tailExitIndex","headEnterIndex","extensions","combineExtensions","search","decodeNumericCharacterReference","parseInt","characterEscapeOrReference","decode","$0","$1","$2","hex","fromMarkdown","config","transforms","canContainEols","opener","link","autolinkProtocol","onenterdata","autolinkEmail","atxHeading","codeFlow","codeFencedFenceInfo","codeFencedFenceMeta","codeTextData","codeFlowValue","definitionDestinationString","definitionLabelString","definitionTitleString","emphasis","hardBreak","hardBreakTrailing","html","htmlFlowData","htmlTextData","image","listItem","listItemValue","onenterlistitemvalue","listOrdered","onenterlistordered","listUnordered","reference","onenterreference","referenceString","resourceDestinationString","resourceTitleString","setextHeading","strong","closer","atxHeadingSequence","onexitatxheadingsequence","onexitautolinkemail","onexitautolinkprotocol","characterEscapeValue","onexitdata","characterReferenceMarkerHexadecimal","onexitcharacterreferencemarker","characterReferenceMarkerNumeric","characterReferenceValue","onexitcharacterreferencevalue","onexitcodefenced","codeFencedFence","onexitcodefencedfence","onexitcodefencedfenceinfo","onexitcodefencedfencemeta","onexitcodeindented","onexitcodetext","onexitdefinitiondestinationstring","onexitdefinitionlabelstring","onexitdefinitiontitlestring","onexithardbreak","onexithtmlflow","onexithtmltext","onexitimage","onexitlabel","labelText","onexitlabeltext","onexitlineending","onexitlink","onexitreferencestring","onexitresourcedestinationstring","onexitresourcetitlestring","resource","onexitresource","onexitsetextheading","setextHeadingLineSequence","onexitsetextheadinglinesequence","setextHeadingText","onexitsetextheadingtext","configure","mdastExtensions","tokenStack","resume","setData","getData","listStack","prepareList","handler","defaultOnError","firstBlankLineIndex","containerBalance","listSpread","tailIndex","tailEvent","_spread","and","errorHandler","onExitError","lang","title","depth","referenceType","ancestor","decodeString","fragment","ordered","spread","checked","compiler","postprocess","atCarriageReturn","endPosition","lastIndex","Math","ceil","preprocess","combined","remarkParse","normalizeUri","skip","encodeURIComponent","convert","castFactory","typeFactory","tests","checks","any","anyFactory","propsFactory","visitParents","visitor","reverse","is","step","factory","parents","visit","subresult","grandparents","toResult","concat","parent","pointStart","pointEnd","clean","footnoteReference","id","safeId","footnoteOrder","counter","footnoteCounts","reuseCounter","properties","clobberPrefix","dataFootnoteRef","ariaDescribedBy","patch","sup","applyData","revert","subtype","suffix","contents","listItemLoose","tab","space","trimLines","last","trimLine","codePointAt","handlers","blockquote","break","delete","footnote","footnoteById","no","dangerous","imageReference","inlineCode","linkReference","results","loose","listLoose","disabled","child","root","table","rows","firstRow","tableContent","body","tableCell","tableRow","siblings","align","cellIndex","cells","cell","alignValue","toml","ignore","yaml","footnoteDefinition","createState","allowDangerousHtml","footnoteLabel","footnoteLabelTagName","footnoteLabelProperties","footnoteBackLabel","unknownHandler","passThrough","cache","definitions","augment","hName","hProperties","hChildren","ctx","generated","defaultUnknownHandler","nodes","toHast","foot","listItems","referenceIndex","backReferences","backReference","dataFootnoteBackref","ariaLabel","tailTail","dataFootnotes","footer","bridge","mutate","Schema","normal","merge","Info","attribute","boolean","booleanish","overloadedBoolean","number","commaSeparated","spaceSeparated","commaOrSpaceSeparated","mustUseProperty","powers","increment","DefinedInfo","mask","mark","transform","attributes","xlink","xLinkActuate","xLinkArcRole","xLinkHref","xLinkRole","xLinkShow","xLinkTitle","xLinkType","xml","xmlLang","xmlBase","xmlSpace","caseSensitiveTransform","caseInsensitiveTransform","xmlns","xmlnsxlink","xmlnsXLink","aria","ariaActiveDescendant","ariaAtomic","ariaAutoComplete","ariaBusy","ariaChecked","ariaColCount","ariaColIndex","ariaColSpan","ariaControls","ariaCurrent","ariaDetails","ariaDisabled","ariaDropEffect","ariaErrorMessage","ariaExpanded","ariaFlowTo","ariaGrabbed","ariaHasPopup","ariaHidden","ariaInvalid","ariaKeyShortcuts","ariaLabelledBy","ariaLevel","ariaLive","ariaModal","ariaMultiLine","ariaMultiSelectable","ariaOrientation","ariaOwns","ariaPlaceholder","ariaPosInSet","ariaPressed","ariaReadOnly","ariaRelevant","ariaRequired","ariaRoleDescription","ariaRowCount","ariaRowIndex","ariaRowSpan","ariaSelected","ariaSetSize","ariaSort","ariaValueMax","ariaValueMin","ariaValueNow","ariaValueText","role","acceptcharset","classname","htmlfor","httpequiv","abbr","accept","acceptCharset","accessKey","action","allow","allowFullScreen","allowPaymentRequest","allowUserMedia","as","async","autoCapitalize","autoComplete","autoFocus","autoPlay","blocking","capture","charSet","cite","cols","colSpan","contentEditable","controls","controlsList","coords","crossOrigin","dateTime","decoding","default","defer","dir","dirName","download","draggable","encType","enterKeyHint","fetchPriority","form","formAction","formEncType","formMethod","formNoValidate","formTarget","headers","height","hidden","high","hrefLang","htmlFor","httpEquiv","imageSizes","imageSrcSet","inert","inputMode","integrity","isMap","itemId","itemProp","itemRef","itemScope","itemType","language","loading","loop","low","manifest","maxLength","method","min","minLength","multiple","muted","nonce","noModule","noValidate","onAbort","onAfterPrint","onAuxClick","onBeforeMatch","onBeforePrint","onBeforeToggle","onBeforeUnload","onBlur","onCancel","onCanPlay","onCanPlayThrough","onChange","onClick","onClose","onContextLost","onContextMenu","onContextRestored","onCopy","onCueChange","onCut","onDblClick","onDrag","onDragEnd","onDragEnter","onDragExit","onDragLeave","onDragOver","onDragStart","onDrop","onDurationChange","onEmptied","onEnded","onError","onFocus","onFormData","onHashChange","onInput","onInvalid","onKeyDown","onKeyPress","onKeyUp","onLanguageChange","onLoad","onLoadedData","onLoadedMetadata","onLoadEnd","onLoadStart","onMessage","onMessageError","onMouseDown","onMouseEnter","onMouseLeave","onMouseMove","onMouseOut","onMouseOver","onMouseUp","onOffline","onOnline","onPageHide","onPageShow","onPaste","onPause","onPlay","onPlaying","onPopState","onProgress","onRateChange","onRejectionHandled","onReset","onResize","onScroll","onScrollEnd","onSecurityPolicyViolation","onSeeked","onSeeking","onSelect","onSlotChange","onStalled","onStorage","onSubmit","onSuspend","onTimeUpdate","onToggle","onUnhandledRejection","onUnload","onVolumeChange","onWaiting","onWheel","optimum","pattern","ping","placeholder","playsInline","popover","popoverTarget","popoverTargetAction","poster","preload","readOnly","referrerPolicy","rel","required","reversed","rowSpan","sandbox","scope","scoped","seamless","selected","shadowRootDelegatesFocus","shadowRootMode","shape","sizes","slot","span","spellCheck","srcDoc","srcLang","srcSet","tabIndex","translate","typeMustMatch","useMap","width","aLink","archive","axis","background","bgColor","border","borderColor","bottomMargin","cellPadding","cellSpacing","charOff","classId","clear","codeBase","codeType","color","compact","declare","face","frame","frameBorder","hSpace","leftMargin","longDesc","lowSrc","marginHeight","marginWidth","noResize","noHref","noShade","noWrap","object","profile","prompt","rev","rightMargin","scheme","scrolling","standby","summary","topMargin","valueType","version","vAlign","vLink","vSpace","allowTransparency","autoCorrect","autoSave","disablePictureInPicture","disableRemotePlayback","security","unselectable","svg","accentHeight","alignmentBaseline","arabicForm","baselineShift","capHeight","clipPath","clipRule","colorInterpolation","colorInterpolationFilters","colorProfile","colorRendering","dataType","dominantBaseline","enableBackground","fillOpacity","fillRule","floodColor","floodOpacity","fontFamily","fontSize","fontSizeAdjust","fontStretch","fontStyle","fontVariant","fontWeight","glyphName","glyphOrientationHorizontal","glyphOrientationVertical","horizAdvX","horizOriginX","horizOriginY","imageRendering","letterSpacing","lightingColor","markerEnd","markerMid","markerStart","navDown","navDownLeft","navDownRight","navLeft","navNext","navPrev","navRight","navUp","navUpLeft","navUpRight","onActivate","onBegin","onEnd","onFocusIn","onFocusOut","onMouseWheel","onRepeat","onShow","onZoom","overlinePosition","overlineThickness","paintOrder","panose1","pointerEvents","renderingIntent","shapeRendering","stopColor","stopOpacity","strikethroughPosition","strikethroughThickness","strokeDashArray","strokeDashOffset","strokeLineCap","strokeLineJoin","strokeMiterLimit","strokeOpacity","strokeWidth","textAnchor","textDecoration","textRendering","transformOrigin","underlinePosition","underlineThickness","unicodeBidi","unicodeRange","unitsPerEm","vAlphabetic","vHanging","vIdeographic","vMathematical","vectorEffect","vertAdvY","vertOriginX","vertOriginY","wordSpacing","writingMode","xHeight","playbackOrder","timelineBegin","about","accumulate","additive","alphabetic","amplitude","ascent","attributeName","attributeType","azimuth","bandwidth","baseFrequency","baseProfile","bbox","bias","by","calcMode","clip","clipPathUnits","contentScriptType","contentStyleType","cursor","cx","cy","defaultAction","descent","diffuseConstant","direction","display","dur","divisor","dx","dy","edgeMode","editable","elevation","exponent","externalResourcesRequired","fill","filter","filterRes","filterUnits","focusable","focusHighlight","format","fr","fx","fy","g1","g2","glyphRef","gradientTransform","gradientUnits","hanging","hatchContentUnits","hatchUnits","ideographic","initialVisibility","in","in2","intercept","k1","k2","k3","k4","kernelMatrix","kernelUnitLength","keyPoints","keySplines","keyTimes","kerning","lengthAdjust","limitingConeAngle","local","markerHeight","markerUnits","markerWidth","maskContentUnits","maskUnits","mathematical","mediaCharacterEncoding","mediaContentEncodings","mediaSize","mediaTime","mode","numOctaves","observer","opacity","operator","orient","orientation","overflow","overlay","pathLength","patternContentUnits","patternTransform","patternUnits","phase","pitch","points","pointsAtX","pointsAtY","pointsAtZ","preserveAlpha","preserveAspectRatio","primitiveUnits","propagate","radius","refX","refY","repeatCount","repeatDur","requiredExtensions","requiredFeatures","requiredFonts","requiredFormats","restart","rotate","rx","ry","scale","seed","side","slope","snapshotTime","specularConstant","specularExponent","spreadMethod","spacing","startOffset","stdDeviation","stemh","stemv","stitchTiles","stroke","surfaceScale","syncBehavior","syncBehaviorDefault","syncMaster","syncTolerance","syncToleranceDefault","systemLanguage","tableValues","targetX","targetY","textLength","transformBehavior","u1","u2","unicode","viewBox","viewTarget","visibility","widths","x","x1","x2","xChannelSelector","y","y1","y2","yChannelSelector","z","zoomAndPan","rehypeFilter","allowedElements","disallowedElements","allowElement","parent_","unwrapDisallowed","thing","valid","dash","cap","kebab","camelcase","hastToReact","protocols","uriTransformer","uri","first","colon","tableElements","Set","childrenToReact","childIndex","toReact","has","skipHtml","transformLinkUri","parentSchema","schema","addProperty","listDepth","component","components","basic","linkTarget","inline","level","transformImageUri","input","getInputElement","getElementsBeforeCount","textAlign","isHeader","sourcePos","rawSourcePos","sourcePosition","includeElementIndex","siblingCount","count","Type","rest","dashes","find","padRight","padLeft","styleReplacer","parseStyle","changelog","deprecated","renderers","astPlugins","escapeHtml","allowNode","allowedTypes","disallowedTypes","includeNodeIndex","ReactMarkdown","deprecation","console","warn","remarkPlugins","remarkRehypeOptions","rehypePlugins","hastNode","Text","_ref2","Hero","isCentered","isFull","Container","ArticleCard","post","slug","frontmatter","excerpt","propTypes","useRecentArticles","allMarkdownRemark","edges","posts","useStaticQuery","Recent","RecentArticles","preview","Image","isRemote","getImage","GatsbyImage","Title","Tag","dangerouslySetInnerHTML","__html","ContentImage","_data$photo","_data$photo2","_data$photo3","isReversed","photo","Perks","columns","col","Content","PageBuilder","blocks","block","Layout","nav","page","Head","DefaultHead","seo"],"sourceRoot":""}